 static void func_0 ( ) char * variable_0 ; variable_0 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; variable_0 [ 0 ] = ' \0 ' ; WSADATA variable_1 ; int variable_2 ; struct sockaddr_in variable_3 ; size_t variable_4 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_1 ) != variable_5 ) variable_6 = func_3 ( variable_7 , variable_8 , variable_9 ) ; if ( variable_6 == variable_10 ) memset ( & variable_3 , 0 , sizeof ( variable_3 ) ) ; variable_3 . variable_11 = variable_7 ; variable_3 . variable_12 . variable_13 = func_4 ( variable_14 ) ; variable_3 . variable_15 = func_5 ( variable_16 ) ; if ( func_6 ( variable_6 , ( struct sockaddr * ) & variable_3 , sizeof ( variable_3 ) ) == variable_17 ) variable_2 = recv ( variable_6 , ( char * ) ( variable_0 + variable_4 ) , sizeof ( char ) * ( 100 - variable_4 - 1 ) , 0 ) ; if ( variable_2 == variable_17 || variable_2 == 0 ) variable_0 [ variable_4 + variable_2 / sizeof ( char ) ] = ' \0 ' ; variable_18 = strchr ( variable_0 , ' \r ' ) ; if ( variable_18 ) * variable_18 = ' \0 ' ; variable_18 = strchr ( variable_0 , ' \n ' ) ; if ( variable_18 ) * variable_18 = ' \0 ' ; while ( 0 ) if ( variable_6 != variable_10 ) func_7 ( variable_6 ) ; variable_19 [ 2 ] = variable_0 ; func_8 ( variable_19 ) ; void func_9 ( char * variable_19 [ ] ) char * variable_0 = variable_19 [ 2 ] ; for ( variable_20 = 0 ; variable_20 < strlen ( variable_0 ) ; variable_20 ++ ) if ( variable_0 [ variable_20 ] == variable_21 ) free ( variable_0 ) ;
 int func_0 ( ) int variable_0 = 7 ; int variable_1 ; char * variable_2 [ 10 ] = { 0 } ; char * variable_3 ; if ( func_1 ( & variable_4 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) variable_3 = getenv ( " PALOVERDE_POBOX " ) ; if ( variable_3 != 0 ) variable_2 [ 5 ] = variable_3 ; variable_1 = 5 ; variable_5 = & variable_1 ; variable_6 = * ( variable_2 + * variable_5 ) ; func_3 ( variable_0 , variable_6 ) ; void func_4 ( int variable_7 , char * variable_8 ) char variable_9 [ 150 ] ; variable_7 -- ; if ( variable_7 > 0 ) variable_10 = getenv ( " DBPGHOST " ) ; variable_11 = getenv ( " DBPGUSER " ) ; variable_12 = getenv ( " DBPGPASSWORD " ) ; variable_13 = getenv ( " DBPGPORT " ) ; variable_14 = getenv ( " SS_DBPGDATABASE " ) ; if ( variable_10 != 0 && variable_13 != 0 && variable_11 != 0 && variable_12 != 0 && variable_14 != 0 ) snprintf ( variable_9 , 150 , " dbname = %s host = %s user = %s password = %s port = %s " , variable_14 , variable_10 , variable_11 , variable_12 , variable_13 ) ; variable_15 = func_5 ( variable_9 ) ; if ( func_6 ( variable_15 ) != 0 ) func_7 ( " %s : %s \n " , " Connection to database failed " , func_8 ( variable_15 ) ) ; void func_9 ( char * variable_16 , . . . ) va_start ( variable_17 , variable_16 ) ; vfprintf ( variable_18 , variable_16 , variable_17 ) ; func_10 ( variable_15 ) ; variable_19 = func_11 ( variable_15 , variable_20 ) ; if ( func_12 ( variable_19 ) != variable_21 ) func_13 ( " %s : %s \n " , " INSERT failed " , func_14 ( variable_15 ) ) ; void func_15 ( char * variable_16 , . . . ) va_start ( variable_17 , variable_16 ) ; vfprintf ( variable_18 , variable_16 , variable_17 ) ; func_16 ( variable_19 ) ; func_17 ( variable_15 ) ; variable_22 = func_18 ( variable_19 ) ; func_19 ( " Query OK , %s rows affected \n " , variable_22 ) ; void func_20 ( char * variable_16 , . . . ) va_start ( variable_17 , variable_16 ) ; vfprintf ( variable_18 , variable_16 , variable_17 ) ; func_21 ( variable_19 ) ; func_22 ( variable_15 ) ;

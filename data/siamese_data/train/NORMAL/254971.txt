 static void func_0 ( ) char * variable_0 ; variable_1 < int , char * > variable_2 ; variable_0 = NULL ; char * variable_3 = new char [ 100 ] ; memset ( variable_3 , ' A ' , 100 - 1 ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; variable_0 = variable_3 ; variable_2 [ 0 ] = variable_0 ; variable_2 [ 1 ] = variable_0 ; variable_2 [ 2 ] = variable_0 ; func_1 ( variable_2 ) ; void func_2 ( variable_1 < int , char * > variable_2 ) char * variable_0 = variable_2 [ 2 ] ; char variable_4 [ 100 ] ; memset ( variable_4 , ' C ' , 100 - 1 ) ; variable_4 [ 100 - 1 ] = ' \0 ' ; strncpy ( variable_0 , variable_4 , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; func_3 ( variable_0 ) ; void func_4 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ;
 int main ( int variable_0 , char * variable_1 [ ] ) if ( variable_0 > 1 ) const unsigned int variable_2 = variable_0 - 1 ; if ( ( variable_3 = ( char * * ) malloc ( ( variable_2 ) * sizeof ( char * * ) ) ) == NULL ) for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) if ( ! ( variable_3 [ variable_4 ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) strncpy ( variable_3 [ variable_4 ] , variable_1 [ variable_4 + 1 ] , 255 ) ; func_0 ( variable_3 [ variable_4 ] ) ; void func_1 ( char * variable_5 ) char * variable_6 = variable_5 , * variable_7 = variable_8 ; for ( ; * variable_6 != ' \0 ' ; variable_6 ++ ) while ( * variable_6 == ' / ' ) variable_6 ++ ; * variable_7 ++ = * variable_6 ; strncpy ( variable_5 , variable_8 , 255 ) ; for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) if ( func_2 ( variable_3 [ variable_4 ] ) ) int func_3 ( const char * variable_9 ) if ( variable_10 = fopen ( variable_9 , " r " ) ) printf ( " >> > %s \n " , variable_9 ) ; while ( fgets ( variable_11 , 512 , variable_10 ) ) printf ( " % 3 d : %s " , ++ variable_12 , variable_11 ) ; fclose ( variable_10 ) ; printf ( " Argument error , the given argument is not a readable file ( %s ) . \n " , variable_3 [ variable_4 ] ) ; for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) free ( variable_3 [ variable_4 ] ) ; free ( variable_3 ) ;

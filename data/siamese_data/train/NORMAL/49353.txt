 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = variable_15 ; variable_4 . variable_16 = func_4 ( variable_17 ) ; if ( bind ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) if ( func_5 ( variable_7 , variable_19 ) == variable_18 ) variable_20 = func_6 ( variable_7 , NULL , NULL ) ; if ( variable_20 == variable_18 ) variable_3 = recv ( variable_20 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ; if ( variable_20 != variable_11 ) func_8 ( variable_20 ) ; func_9 ( variable_0 ) ; void func_10 ( char * variable_0 ) func_11 ( variable_0 ) ; void func_12 ( char * variable_0 ) func_13 ( variable_22 , 100 - 1 , variable_0 ) ;
 void func_0 ( ) char * variable_0 ; char * variable_1 ; if ( variable_2 ) if ( getenv ( " TERM " ) == ( ( void * ) 0 ) ) variable_1 = getenv ( " TREE_COLORS " ) ; if ( variable_1 == ( ( void * ) 0 ) ) variable_1 = getenv ( " LS_COLORS " ) ; if ( ( variable_1 == ( ( void * ) 0 ) || strlen ( variable_1 ) == 0 ) && variable_3 ) variable_1 = " : no = 00 : fi = 00 : di = 01 ; 34 : ln = 01 ; 36 : pi = 40 ; 33 : so = 01 ; 35 : bd = 40 ; 33 ; 01 : cd = 40 ; 33 ; 01 : or = 40 ; 31 ; 01 : ex = 01 ; 32 : * . bat = 01 ; 32 : * . BAT = 01 ; 32 : * . btm = 01 ; 32 : * . BTM = 01 ; 32 : * . cmd = 01 ; 32 : * . CMD = 01 ; 32 : * . com = 01 ; 32 : * . COM = 01 ; 32 : * . dll = 01 ; 32 : * . DLL = 01 ; 32 : * . exe = 01 ; 32 : * . EXE = 01 ; 32 : * . arj = 01 ; 31 : * . bz2 = 01 ; 31 : * . deb = 01 ; 31 : * . gz = 01 ; 31 : * . lzh = 01 ; 31 : * . rpm = 01 ; 31 : * . tar = 01 ; 31 : * . taz = 01 ; 31 : * . tb2 = 01 ; 31 : * . tbz2 = 01 ; 31 : * . tbz = 01 ; 31 : * . tgz = 01 ; 31 : * . tz2 = 01 ; 31 : * . z = 01 ; 31 : * . Z = 01 ; 31 : * . zip = 01 ; 31 : * . ZIP = 01 ; 31 : * . zoo = 01 ; 31 : * . asf = 01 ; 35 : * . ASF = 01 ; 35 : * . avi = 01 ; 35 : * . AVI = 01 ; 35 : * . bmp = 01 ; 35 : * . BMP = 01 ; 35 : * . flac = 01 ; 35 : * . FLAC = 01 ; 35 : * . gif = 01 ; 35 : * . GIF = 01 ; 35 : * . jpg = 01 ; 35 : * . JPG = 01 ; 35 : * . jpeg = 01 ; 35 : * . JPEG = 01 ; 35 : * . m2a = 01 ; 35 : * . M2a = 01 ; 35 : * . m2v = 01 ; 35 : * . M2V = 01 ; 35 : * . mov = 01 ; 35 : * . MOV = 01 ; 35 : * . mp3 = 01 ; 35 : * . MP3 = 01 ; 35 : * . mpeg = 01 ; 35 : * . MPEG = 01 ; 35 : * . mpg = 01 ; 35 : * . MPG = 01 ; 35 : * . ogg = 01 ; 35 : * . OGG = 01 ; 35 : * . ppm = 01 ; 35 : * . rm = 01 ; 35 : * . RM = 01 ; 35 : * . tga = 01 ; 35 : * . TGA = 01 ; 35 : * . tif = 01 ; 35 : * . TIF = 01 ; 35 : * . wav = 01 ; 35 : * . WAV = 01 ; 35 : * . wmv = 01 ; 35 : * . WMV = 01 ; 35 : * . xbm = 01 ; 35 : * . xpm = 01 ; 35 : " ; if ( variable_1 == ( ( void * ) 0 ) || ! variable_3 && ( variable_4 || ! func_1 ( 1 ) ) ) variable_0 = strcpy ( ( xmalloc ( strlen ( variable_1 ) + 1 ) ) , variable_1 ) ; variable_5 = func_2 ( variable_0 , " : " , & variable_6 ) ; char * * func_3 ( char * variable_7 , char * variable_8 , int * variable_9 ) variable_10 [ * variable_9 = 0 ] = strtok ( variable_7 , variable_8 ) ; while ( variable_10 [ * variable_9 ] ) if ( * variable_9 == variable_6 - 2 ) variable_10 = ( func_4 ( variable_10 , sizeof ( char * ) * ( variable_6 += 256 ) ) ) ; variable_10 [ ++ * variable_9 ] = strtok ( ( ( void * ) 0 ) , variable_8 ) ; variable_10 [ * variable_9 ] = ( ( void * ) 0 ) ; return variable_10 ; for ( variable_11 = 0 ; variable_5 [ variable_11 ] ; variable_11 ++ ) variable_12 = func_5 ( variable_5 [ variable_11 ] , " = " , & variable_6 ) ; char * * func_6 ( char * variable_7 , char * variable_8 , int * variable_9 ) variable_10 [ * variable_9 = 0 ] = strtok ( variable_7 , variable_8 ) ; while ( variable_10 [ * variable_9 ] ) if ( * variable_9 == variable_6 - 2 ) variable_10 = ( func_7 ( variable_10 , sizeof ( char * ) * ( variable_6 += 256 ) ) ) ; variable_10 [ ++ * variable_9 ] = strtok ( ( ( void * ) 0 ) , variable_8 ) ; variable_10 [ * variable_9 ] = ( ( void * ) 0 ) ; return variable_10 ; switch ( func_8 ( variable_12 [ 0 ] ) ) int func_9 ( char * variable_1 ) if ( ! strcmp ( variable_13 [ variable_11 ] . variable_14 , variable_1 ) ) if ( variable_1 [ 0 ] == ' * ' ) if ( variable_12 [ 1 ] ) variable_15 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_16 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_17 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) if ( func_10 ( " target " , variable_12 [ 1 ] ) == 0 ) variable_18 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_19 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_20 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_21 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_22 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_23 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_24 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_25 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_26 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_27 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_28 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_29 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_30 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_31 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_32 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_33 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_34 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_35 -> variable_36 = strcpy ( ( xmalloc ( strlen ( ( variable_12 [ 0 ] + 1 ) ) + 1 ) ) , ( variable_12 [ 0 ] + 1 ) ) ; variable_35 -> variable_37 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; variable_35 -> variable_38 = variable_36 ; variable_36 = variable_35 ; free ( variable_12 ) ; free ( variable_5 ) ; if ( ! variable_32 ) if ( ! variable_33 ) if ( ! variable_15 ) if ( ! variable_34 ) sprintf ( variable_39 , " %s %s %s " , variable_32 , variable_15 , variable_33 ) ; variable_34 = strcpy ( ( xmalloc ( strlen ( variable_39 ) + 1 ) ) , variable_39 ) ; free ( variable_0 ) ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = variable_15 ; variable_4 . variable_16 = func_4 ( variable_17 ) ; if ( bind ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) if ( func_5 ( variable_7 , variable_19 ) == variable_18 ) variable_20 = func_6 ( variable_7 , NULL , NULL ) ; if ( variable_20 == variable_18 ) variable_3 = recv ( variable_20 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ; if ( variable_20 != variable_11 ) func_8 ( variable_20 ) ; func_9 ( variable_0 ) ; void func_10 ( char * variable_0 )
 size_t variable_0 * size_t variable_1 * variable_2 ) variable_2 -> variable_3 = 0 ; memset ( variable_2 -> variable_4 , 0 , variable_5 * sizeof ( size_t ) ) ; if ( variable_6 . func_0 ( ) ) PacketIterator variable_7 = func_1 ( variable_6 . begin ( ) ) ; while ( variable_7 != variable_6 . end ( ) ) const int variable_8 = ( * variable_7 ) . variable_9 . variable_10 . variable_11 . variable_12 ; PacketIterator variable_13 = func_2 ( variable_7 ) ; variable_2 -> variable_14 [ variable_8 ] = ( * variable_7 ) . variable_15 - variable_16 ; variable_2 -> variable_4 [ variable_8 ] = ( * variable_13 ) . variable_15 + ( * variable_13 ) . variable_17 - ( * variable_7 ) . variable_15 ; variable_7 = func_3 ( variable_13 ) ; if ( variable_8 + 1 > variable_2 -> variable_3 ) variable_2 -> variable_3 = variable_8 + 1 ; if ( variable_2 -> variable_4 [ 0 ] == 0 ) variable_2 -> variable_14 [ 0 ] = 0 ; for ( int variable_18 = 1 ; variable_18 < variable_2 -> variable_3 ; ++ variable_18 ) if ( variable_2 -> variable_4 [ variable_18 ] == 0 ) variable_2 -> variable_14 [ variable_18 ] = variable_2 -> variable_14 [ variable_18 - 1 ] + variable_2 -> variable_4 [ variable_18 - 1 ] ; assert ( variable_18 == 0 || variable_2 -> variable_14 [ variable_18 ] >= variable_2 -> variable_14 [ variable_18 - 1 ] ) ;

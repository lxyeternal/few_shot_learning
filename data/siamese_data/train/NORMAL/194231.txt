 void func_0 ( ) char * variable_0 ; char variable_1 [ variable_2 ] = variable_3 ; variable_0 = variable_1 ; variable_0 = func_1 ( variable_0 ) ; char * func_2 ( char * variable_0 ) if ( variable_4 ) WSADATA variable_5 ; int variable_6 ; struct sockaddr_in variable_7 ; size_t variable_8 = strlen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_5 ) != variable_9 ) variable_10 = func_5 ( variable_11 , variable_12 , variable_13 ) ; if ( variable_10 == variable_14 ) memset ( & variable_7 , 0 , sizeof ( variable_7 ) ) ; variable_7 . variable_15 = variable_11 ; variable_7 . variable_16 . variable_17 = func_6 ( variable_18 ) ; variable_7 . variable_19 = func_7 ( variable_20 ) ; if ( func_8 ( variable_10 , ( struct sockaddr * ) & variable_7 , sizeof ( variable_7 ) ) == variable_21 ) variable_6 = recv ( variable_10 , ( char * ) ( variable_0 + variable_8 ) , sizeof ( char ) * ( variable_2 - variable_8 - 1 ) , 0 ) ; if ( variable_6 == variable_21 || variable_6 == 0 ) variable_0 [ variable_8 + variable_6 / sizeof ( char ) ] = ' \0 ' ; variable_22 = strchr ( variable_0 , ' \r ' ) ; if ( variable_22 ) * variable_22 = ' \0 ' ; variable_22 = strchr ( variable_0 , ' \n ' ) ; if ( variable_22 ) * variable_22 = ' \0 ' ; while ( 0 ) if ( variable_10 != variable_14 ) func_9 ( variable_10 ) ; return variable_0 ;
 void func_0 ( variable_0 * variable_1 , const gchar * variable_2 , void * variable_3 , guint32 variable_4 ) guint32 variable_5 = ( variable_6 ) ( strlen ( variable_2 ) ) ; guint32 variable_7 = ( variable_5 + 3 ) / 4 + 1 ; variable_8 = ( func_1 ( variable_7 * sizeof ( variable_6 ) ) ) ; for ( variable_9 = 0 ; variable_9 < variable_5 ; variable_9 ++ ) variable_10 = ( ( unsigned char ) variable_2 [ variable_9 ] ) ; if ( ( * func_2 ( ) ) [ ( int ) variable_10 ] & ( ( unsigned short ) variable_11 ) ) variable_10 = ( tolower ( variable_10 ) ) ; variable_12 << = 8 ; variable_12 |= variable_10 ; variable_8 [ variable_9 / 4 ] = variable_12 ; if ( variable_9 % 4 != 0 ) while ( variable_9 % 4 != 0 ) variable_9 ++ ; variable_12 << = 8 ; variable_8 [ variable_9 / 4 - 1 ] = variable_12 ; variable_8 [ variable_7 - 1 ] = 0 variable_13 ; variable_14 [ 0 ] . variable_15 = variable_7 ; variable_14 [ 0 ] . variable_14 = variable_8 ; variable_14 [ 1 ] . variable_15 = 0 ; variable_14 [ 1 ] . variable_14 = ( ( void * ) 0 ) ; func_3 ( variable_1 , variable_14 , variable_3 ) ; void func_4 ( variable_0 * variable_1 , variable_16 * variable_14 , void * variable_17 ) if ( ! variable_1 || ! variable_14 ) for ( variable_18 = variable_14 ; variable_18 -> variable_15 > 0 ; variable_18 ++ ) if ( variable_18 -> variable_15 > 100 ) for ( variable_9 = 0 ; variable_9 < variable_18 -> variable_15 ; variable_9 ++ ) if ( ! variable_19 ) variable_19 = variable_1 ; variable_19 = ( func_5 ( variable_19 , variable_20 , variable_21 , variable_1 , 1 ) ) ; static void * func_6 ( variable_0 * variable_1 , guint32 variable_14 , void * ( * variable_22 ) ( void * ) , void * variable_23 , int variable_24 ) variable_25 = variable_1 -> variable_26 ; if ( ! variable_25 ) variable_25 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; switch ( variable_1 -> variable_29 ) variable_25 -> variable_30 . variable_31 = 1 ; variable_25 -> variable_32 = ( ( void * ) 0 ) ; variable_25 -> variable_33 = ( ( void * ) 0 ) ; variable_25 -> variable_34 = ( ( void * ) 0 ) ; variable_25 -> variable_35 = variable_14 ; variable_25 -> variable_17 = func_7 ( variable_23 ) ; variable_25 -> variable_30 . variable_24 = variable_24 ; variable_1 -> variable_26 = variable_25 ; return variable_25 -> variable_17 ; if ( variable_14 == variable_25 -> variable_35 ) return variable_25 -> variable_17 ; if ( variable_14 < variable_25 -> variable_35 ) if ( ! variable_25 -> variable_33 ) variable_36 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; variable_25 -> variable_33 = variable_36 ; variable_36 -> variable_32 = variable_25 ; variable_36 -> variable_33 = ( ( void * ) 0 ) ; variable_36 -> variable_34 = ( ( void * ) 0 ) ; variable_36 -> variable_35 = variable_14 ; variable_36 -> variable_17 = func_8 ( variable_23 ) ; variable_36 -> variable_30 . variable_24 = variable_24 ; variable_25 = variable_36 ; variable_25 = variable_25 -> variable_33 ; if ( variable_14 > variable_25 -> variable_35 ) if ( ! variable_25 -> variable_34 ) variable_36 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; variable_25 -> variable_34 = variable_36 ; variable_36 -> variable_32 = variable_25 ; variable_36 -> variable_33 = ( ( void * ) 0 ) ; variable_36 -> variable_34 = ( ( void * ) 0 ) ; variable_36 -> variable_35 = variable_14 ; variable_36 -> variable_17 = func_9 ( variable_23 ) ; variable_36 -> variable_30 . variable_24 = variable_24 ; variable_25 = variable_36 ; variable_25 = variable_25 -> variable_34 ; switch ( variable_1 -> variable_29 ) variable_25 -> variable_30 . variable_31 = 0 ; func_10 ( variable_1 , variable_25 ) ; inline static void func_11 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_12 ( variable_25 ) ; inline static variable_28 * func_13 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( ! variable_32 ) variable_25 -> variable_30 . variable_31 = 1 ; func_14 ( variable_1 , variable_25 ) ; inline static void func_15 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_16 ( variable_25 ) ; inline static variable_28 * func_17 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( variable_32 -> variable_30 . variable_31 == 1 ) func_18 ( variable_1 , variable_25 ) ; inline static void func_19 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_37 = func_20 ( variable_25 ) ; inline static variable_28 * func_21 ( variable_28 * variable_25 ) variable_32 = func_22 ( variable_25 ) ; inline static variable_28 * func_23 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( ! variable_32 ) variable_38 = func_24 ( variable_32 ) ; inline static variable_28 * func_25 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( ! variable_38 ) if ( variable_32 == variable_38 -> variable_33 ) return variable_38 -> variable_34 ; return variable_38 -> variable_33 ; if ( variable_37 && variable_37 -> variable_30 . variable_31 == 0 ) variable_32 = func_26 ( variable_25 ) ; inline static variable_28 * func_27 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; variable_32 -> variable_30 . variable_31 = 1 ; variable_37 -> variable_30 . variable_31 = 1 ; variable_38 = func_28 ( variable_25 ) ; inline static variable_28 * func_29 ( variable_28 * variable_25 ) variable_32 = func_30 ( variable_25 ) ; inline static variable_28 * func_31 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( variable_32 ) return variable_32 -> variable_32 ; variable_38 -> variable_30 . variable_31 = 0 ; func_32 ( variable_1 , variable_38 ) ; inline static void func_33 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_34 ( variable_25 ) ; if ( ! variable_32 ) variable_25 -> variable_30 . variable_31 = 1 ; func_35 ( variable_1 , variable_25 ) ; func_36 ( variable_1 , variable_25 ) ; inline static void func_37 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_38 ( variable_25 ) ; inline static variable_28 * func_39 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; variable_38 = func_40 ( variable_32 ) ; inline static variable_28 * func_41 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; if ( ! variable_38 ) if ( variable_25 == variable_32 -> variable_34 && variable_32 == variable_38 -> variable_33 ) func_42 ( variable_1 , variable_32 ) ; inline static void func_43 ( variable_0 * variable_1 , variable_28 * variable_25 ) if ( variable_25 -> variable_32 ) if ( variable_25 -> variable_32 -> variable_33 == variable_25 ) variable_25 -> variable_32 -> variable_33 = variable_25 -> variable_34 ; variable_25 -> variable_32 -> variable_34 = variable_25 -> variable_34 ; variable_1 -> variable_26 = variable_25 -> variable_34 ; variable_25 -> variable_34 -> variable_32 = variable_25 -> variable_32 ; variable_25 -> variable_32 = variable_25 -> variable_34 ; variable_25 -> variable_34 = variable_25 -> variable_34 -> variable_33 ; if ( variable_25 -> variable_34 ) variable_25 -> variable_34 -> variable_32 = variable_25 ; variable_25 -> variable_32 -> variable_33 = variable_25 ; variable_25 = variable_25 -> variable_33 ; if ( variable_25 == variable_32 -> variable_33 && variable_32 == variable_38 -> variable_34 ) func_44 ( variable_1 , variable_32 ) ; inline static void func_45 ( variable_0 * variable_1 , variable_28 * variable_25 ) if ( variable_25 -> variable_32 ) if ( variable_25 -> variable_32 -> variable_33 == variable_25 ) variable_25 -> variable_32 -> variable_33 = variable_25 -> variable_33 ; variable_25 -> variable_32 -> variable_34 = variable_25 -> variable_33 ; variable_1 -> variable_26 = variable_25 -> variable_33 ; variable_25 -> variable_33 -> variable_32 = variable_25 -> variable_32 ; variable_25 -> variable_32 = variable_25 -> variable_33 ; variable_25 -> variable_33 = variable_25 -> variable_33 -> variable_34 ; if ( variable_25 -> variable_33 ) variable_25 -> variable_33 -> variable_32 = variable_25 ; variable_25 -> variable_32 -> variable_34 = variable_25 ; variable_25 = variable_25 -> variable_34 ; func_46 ( variable_1 , variable_25 ) ; inline static void func_47 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_48 ( variable_25 ) ; inline static variable_28 * func_49 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; variable_38 = func_50 ( variable_32 ) ; inline static variable_28 * func_51 ( variable_28 * variable_25 ) return variable_25 -> variable_32 ; variable_32 -> variable_30 . variable_31 = 1 ; variable_38 -> variable_30 . variable_31 = 0 ; if ( variable_25 == variable_32 -> variable_33 && variable_32 == variable_38 -> variable_33 ) func_52 ( variable_1 , variable_38 ) ; inline static void func_53 ( variable_0 * variable_1 , variable_28 * variable_25 ) if ( variable_25 -> variable_32 ) if ( variable_25 -> variable_32 -> variable_33 == variable_25 ) variable_25 -> variable_32 -> variable_33 = variable_25 -> variable_33 ; variable_25 -> variable_32 -> variable_34 = variable_25 -> variable_33 ; variable_1 -> variable_26 = variable_25 -> variable_33 ; variable_25 -> variable_33 -> variable_32 = variable_25 -> variable_32 ; variable_25 -> variable_32 = variable_25 -> variable_33 ; variable_25 -> variable_33 = variable_25 -> variable_33 -> variable_34 ; if ( variable_25 -> variable_33 ) variable_25 -> variable_33 -> variable_32 = variable_25 ; variable_25 -> variable_32 -> variable_34 = variable_25 ; func_54 ( variable_1 , variable_38 ) ; inline static void func_55 ( variable_0 * variable_1 , variable_28 * variable_25 ) if ( variable_25 -> variable_32 ) if ( variable_25 -> variable_32 -> variable_33 == variable_25 ) variable_25 -> variable_32 -> variable_33 = variable_25 -> variable_34 ; variable_25 -> variable_32 -> variable_34 = variable_25 -> variable_34 ; variable_1 -> variable_26 = variable_25 -> variable_34 ; variable_25 -> variable_34 -> variable_32 = variable_25 -> variable_32 ; variable_25 -> variable_32 = variable_25 -> variable_34 ; variable_25 -> variable_34 = variable_25 -> variable_34 -> variable_33 ; if ( variable_25 -> variable_34 ) variable_25 -> variable_34 -> variable_32 = variable_25 ; variable_25 -> variable_32 -> variable_33 = variable_25 ; return variable_25 -> variable_17 ; variable_20 = variable_18 -> variable_14 [ variable_9 ] ; if ( ! variable_19 ) func_56 ( variable_19 , variable_20 , variable_17 ) ; void func_57 ( variable_0 * variable_1 , guint32 variable_14 , void * variable_17 ) variable_25 = variable_1 -> variable_26 ; if ( ! variable_25 ) variable_25 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; switch ( variable_1 -> variable_29 ) variable_25 -> variable_30 . variable_31 = 1 ; variable_25 -> variable_32 = ( ( void * ) 0 ) ; variable_25 -> variable_33 = ( ( void * ) 0 ) ; variable_25 -> variable_34 = ( ( void * ) 0 ) ; variable_25 -> variable_35 = variable_14 ; variable_25 -> variable_17 = variable_17 ; variable_25 -> variable_30 . variable_24 = 0 ; variable_1 -> variable_26 = variable_25 ; if ( variable_14 == variable_25 -> variable_35 ) variable_25 -> variable_17 = variable_17 ; if ( variable_14 < variable_25 -> variable_35 ) if ( ! variable_25 -> variable_33 ) variable_36 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; variable_25 -> variable_33 = variable_36 ; variable_36 -> variable_32 = variable_25 ; variable_36 -> variable_33 = ( ( void * ) 0 ) ; variable_36 -> variable_34 = ( ( void * ) 0 ) ; variable_36 -> variable_35 = variable_14 ; variable_36 -> variable_17 = variable_17 ; variable_36 -> variable_30 . variable_24 = 0 ; variable_25 = variable_36 ; variable_25 = variable_25 -> variable_33 ; if ( variable_14 > variable_25 -> variable_35 ) if ( ! variable_25 -> variable_34 ) variable_36 = ( ( variable_1 -> variable_27 ) ( sizeof ( variable_28 ) ) ) ; variable_25 -> variable_34 = variable_36 ; variable_36 -> variable_32 = variable_25 ; variable_36 -> variable_33 = ( ( void * ) 0 ) ; variable_36 -> variable_34 = ( ( void * ) 0 ) ; variable_36 -> variable_35 = variable_14 ; variable_36 -> variable_17 = variable_17 ; variable_36 -> variable_30 . variable_24 = 0 ; variable_25 = variable_36 ; variable_25 = variable_25 -> variable_34 ; switch ( variable_1 -> variable_29 ) variable_25 -> variable_30 . variable_31 = 0 ; func_58 ( variable_1 , variable_25 ) ; inline static void func_59 ( variable_0 * variable_1 , variable_28 * variable_25 ) variable_32 = func_60 ( variable_25 ) ; if ( ! variable_32 ) variable_25 -> variable_30 . variable_31 = 1 ; func_61 ( variable_1 , variable_25 ) ; func_62 ( variable_8 ) ;
 void func_0 ( ) char * variable_0 ; char * variable_1 ; if ( variable_2 ) if ( getenv ( " TERM " ) == ( ( void * ) 0 ) ) variable_1 = getenv ( " TREE_COLORS " ) ; if ( variable_1 == ( ( void * ) 0 ) ) variable_1 = getenv ( " LS_COLORS " ) ; if ( ( variable_1 == ( ( void * ) 0 ) || strlen ( variable_1 ) == 0 ) && variable_3 ) variable_1 = " : no = 00 : fi = 00 : di = 01 ; 34 : ln = 01 ; 36 : pi = 40 ; 33 : so = 01 ; 35 : bd = 40 ; 33 ; 01 : cd = 40 ; 33 ; 01 : or = 40 ; 31 ; 01 : ex = 01 ; 32 : * . bat = 01 ; 32 : * . BAT = 01 ; 32 : * . btm = 01 ; 32 : * . BTM = 01 ; 32 : * . cmd = 01 ; 32 : * . CMD = 01 ; 32 : * . com = 01 ; 32 : * . COM = 01 ; 32 : * . dll = 01 ; 32 : * . DLL = 01 ; 32 : * . exe = 01 ; 32 : * . EXE = 01 ; 32 : * . arj = 01 ; 31 : * . bz2 = 01 ; 31 : * . deb = 01 ; 31 : * . gz = 01 ; 31 : * . lzh = 01 ; 31 : * . rpm = 01 ; 31 : * . tar = 01 ; 31 : * . taz = 01 ; 31 : * . tb2 = 01 ; 31 : * . tbz2 = 01 ; 31 : * . tbz = 01 ; 31 : * . tgz = 01 ; 31 : * . tz2 = 01 ; 31 : * . z = 01 ; 31 : * . Z = 01 ; 31 : * . zip = 01 ; 31 : * . ZIP = 01 ; 31 : * . zoo = 01 ; 31 : * . asf = 01 ; 35 : * . ASF = 01 ; 35 : * . avi = 01 ; 35 : * . AVI = 01 ; 35 : * . bmp = 01 ; 35 : * . BMP = 01 ; 35 : * . flac = 01 ; 35 : * . FLAC = 01 ; 35 : * . gif = 01 ; 35 : * . GIF = 01 ; 35 : * . jpg = 01 ; 35 : * . JPG = 01 ; 35 : * . jpeg = 01 ; 35 : * . JPEG = 01 ; 35 : * . m2a = 01 ; 35 : * . M2a = 01 ; 35 : * . m2v = 01 ; 35 : * . M2V = 01 ; 35 : * . mov = 01 ; 35 : * . MOV = 01 ; 35 : * . mp3 = 01 ; 35 : * . MP3 = 01 ; 35 : * . mpeg = 01 ; 35 : * . MPEG = 01 ; 35 : * . mpg = 01 ; 35 : * . MPG = 01 ; 35 : * . ogg = 01 ; 35 : * . OGG = 01 ; 35 : * . ppm = 01 ; 35 : * . rm = 01 ; 35 : * . RM = 01 ; 35 : * . tga = 01 ; 35 : * . TGA = 01 ; 35 : * . tif = 01 ; 35 : * . TIF = 01 ; 35 : * . wav = 01 ; 35 : * . WAV = 01 ; 35 : * . wmv = 01 ; 35 : * . WMV = 01 ; 35 : * . xbm = 01 ; 35 : * . xpm = 01 ; 35 : " ; if ( variable_1 == ( ( void * ) 0 ) || ! variable_3 && ( variable_4 || ! func_1 ( 1 ) ) ) variable_0 = strcpy ( ( xmalloc ( strlen ( variable_1 ) + 1 ) ) , variable_1 ) ; variable_5 = func_2 ( variable_0 , " : " , & variable_6 ) ; char * * func_3 ( char * variable_7 , char * variable_8 , int * variable_9 ) variable_10 [ * variable_9 = 0 ] = strtok ( variable_7 , variable_8 ) ; while ( variable_10 [ * variable_9 ] ) if ( * variable_9 == variable_6 - 2 ) variable_10 = ( func_4 ( variable_10 , sizeof ( char * ) * ( variable_6 += 256 ) ) ) ; variable_10 [ ++ * variable_9 ] = strtok ( ( ( void * ) 0 ) , variable_8 ) ; variable_10 [ * variable_9 ] = ( ( void * ) 0 ) ; return variable_10 ; for ( variable_11 = 0 ; variable_5 [ variable_11 ] ; variable_11 ++ ) variable_12 = func_5 ( variable_5 [ variable_11 ] , " = " , & variable_6 ) ; char * * func_6 ( char * variable_7 , char * variable_8 , int * variable_9 ) variable_10 [ * variable_9 = 0 ] = strtok ( variable_7 , variable_8 ) ; while ( variable_10 [ * variable_9 ] ) if ( * variable_9 == variable_6 - 2 ) variable_10 = ( func_7 ( variable_10 , sizeof ( char * ) * ( variable_6 += 256 ) ) ) ; variable_10 [ ++ * variable_9 ] = strtok ( ( ( void * ) 0 ) , variable_8 ) ; variable_10 [ * variable_9 ] = ( ( void * ) 0 ) ; return variable_10 ; switch ( func_8 ( variable_12 [ 0 ] ) ) int func_9 ( char * variable_1 ) if ( ! strcmp ( variable_13 [ variable_11 ] . variable_14 , variable_1 ) ) if ( variable_1 [ 0 ] == ' * ' ) if ( variable_12 [ 1 ] ) variable_15 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_16 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_17 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) if ( func_10 ( " target " , variable_12 [ 1 ] ) == 0 ) variable_18 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_19 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_20 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_21 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_22 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_23 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_24 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_25 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_26 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_27 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_28 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_29 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_30 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_31 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_32 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_33 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_34 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; if ( variable_12 [ 1 ] ) variable_35 -> variable_36 = strcpy ( ( xmalloc ( strlen ( ( variable_12 [ 0 ] + 1 ) ) + 1 ) ) , ( variable_12 [ 0 ] + 1 ) ) ; variable_35 -> variable_37 = strcpy ( ( xmalloc ( strlen ( variable_12 [ 1 ] ) + 1 ) ) , variable_12 [ 1 ] ) ; variable_35 -> variable_38 = variable_36 ; variable_36 = variable_35 ; free ( variable_12 ) ; free ( variable_5 ) ; if ( ! variable_32 ) if ( ! variable_33 ) if ( ! variable_15 ) if ( ! variable_34 ) sprintf ( variable_39 , " %s %s %s " , variable_32 , variable_15 , variable_33 ) ; variable_34 = strcpy ( ( xmalloc ( strlen ( variable_39 ) + 1 ) ) , variable_39 ) ; free ( variable_0 ) ;

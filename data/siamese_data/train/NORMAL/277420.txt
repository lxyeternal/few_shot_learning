 static void func_0 ( ) char variable_0 [ variable_1 ] = " " ; if ( fgets ( variable_0 , variable_1 , variable_2 ) != NULL ) variable_3 = atoi ( variable_0 ) ; func_1 ( & variable_3 ) ; void func_2 ( int * variable_4 ) int variable_3 = * variable_4 ; if ( variable_3 != 0 ) func_3 ( 100 / variable_3 ) ; void func_4 ( int variable_5 ) printf ( " %d \n " , variable_5 ) ;
 void func_0 ( variable_0 * variable_1 , gint variable_2 , gint variable_3 , gint variable_4 , gint variable_5 , variable_6 * variable_7 , guint variable_8 ) guint variable_9 ; guint variable_10 ; for ( variable_10 = variable_3 ; variable_10 <= variable_5 ; variable_10 += 64 - variable_10 % 64 ) for ( variable_9 = variable_2 ; variable_9 <= variable_4 ; variable_9 += 64 - variable_9 % 64 ) variable_11 * variable_12 = func_1 ( variable_1 , variable_9 , variable_10 , ! 0 , 0 ) ; variable_11 * func_2 ( variable_0 * variable_1 , gint variable_13 , gint variable_14 , gboolean variable_15 , gboolean variable_16 ) if ( variable_1 != ( ( void * ) 0 ) ) return ( ( void * ) 0 ) ; while ( 0 ) return func_3 ( variable_1 , func_4 ( variable_1 , variable_13 , variable_14 ) , variable_15 , variable_16 ) ; inline static gint func_5 ( variable_0 * variable_1 , gint variable_13 , gint variable_14 ) if ( variable_13 < 0 || variable_13 >= variable_1 -> variable_17 || variable_14 < 0 || variable_14 >= variable_1 -> variable_18 ) return - 1 ; return variable_14 / 64 * variable_1 -> variable_19 + variable_13 / 64 ; variable_11 * func_6 ( variable_0 * variable_1 , gint variable_20 , gboolean variable_15 , gboolean variable_16 ) variable_11 * variable_12 ; gint variable_21 ; if ( variable_1 != ( ( void * ) 0 ) ) return ( ( void * ) 0 ) ; while ( 0 ) variable_21 = variable_1 -> variable_22 * variable_1 -> variable_19 ; if ( variable_20 < 0 || variable_20 >= variable_21 ) return ( ( void * ) 0 ) ; variable_12 = variable_1 -> variable_23 [ variable_20 ] ; if ( variable_15 ) if ( variable_16 ) if ( variable_12 -> variable_24 > 1 ) variable_11 * new = func_7 ( ( variable_12 -> variable_25 ) new -> variable_26 = variable_12 -> new -> variable_27 = variable_12 -> new -> variable_28 = ( variable_12 -> variable_28 new -> variable_29 = ( new -> variable_26 ) * ( new -> variable_27 ) * ( new -> variable_25 new -> variable_30 = ( ( guchar * ) ( func_8 ( ( new -> variable_29 ) , sizeof ( variable_6 ) ) ) ) if ( variable_12 -> variable_30 ) memcpy ( ( new -> variable_30 ) , ( variable_12 -> variable_30 ) , ( new -> variable_29 ) ) memcpy ( ( new -> variable_30 ) , ( variable_12 -> variable_30 ) , ( new -> variable_29 ) ) func_9 ( new , variable_1 , variable_20 variable_12 = new variable_12 -> variable_31 ++ ; variable_12 -> variable_32 = ( ! 0 ) ; return variable_12 ; const guchar * variable_33 = ( variable_12 -> variable_30 + ( ( variable_10 & ( 64 - 1 ) ) * ( variable_12 -> variable_26 ) + ( variable_9 & ( 64 - 1 ) ) ) * ( variable_12 -> variable_25 ) ) ; variable_6 * variable_34 = variable_7 + variable_8 * ( variable_10 - variable_3 ) + ( variable_1 -> variable_25 ) * ( variable_9 - variable_2 ) ; guint variable_35 ; guint variable_36 ; guint variable_37 ; variable_35 = ( variable_12 -> variable_27 ) - variable_10 % 64 ; if ( variable_35 > variable_5 - variable_10 + 1 ) variable_35 = variable_5 - variable_10 + 1 ; variable_36 = ( variable_12 -> variable_26 ) - variable_9 % 64 ; if ( variable_36 > variable_4 - variable_9 + 1 ) variable_36 = variable_4 - variable_9 + 1 ; variable_37 = ( ( variable_12 -> variable_26 ) * ( variable_12 -> variable_25 ) ) ; while ( variable_35 -- ) memcpy ( variable_34 , variable_33 , ( variable_36 * ( variable_1 -> variable_25 ) ) ) ; variable_33 += variable_37 ; variable_34 += variable_8 ;

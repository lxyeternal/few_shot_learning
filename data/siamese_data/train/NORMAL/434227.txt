 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ variable_2 ] = variable_3 ; variable_0 = variable_1 ; WSADATA variable_4 ; int variable_5 ; struct sockaddr_in variable_6 ; size_t variable_7 = wcslen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_4 ) != variable_8 ) variable_9 = func_3 ( variable_10 , variable_11 , variable_12 ) ; if ( variable_9 == variable_13 ) memset ( & variable_6 , 0 , sizeof ( variable_6 ) ) ; variable_6 . variable_14 = variable_10 ; variable_6 . variable_15 . variable_16 = variable_17 ; variable_6 . variable_18 = func_4 ( variable_19 ) ; if ( bind ( variable_9 , ( struct sockaddr * ) & variable_6 , sizeof ( variable_6 ) ) == variable_20 ) if ( func_5 ( variable_9 , variable_21 ) == variable_20 ) variable_22 = func_6 ( variable_9 , NULL , NULL ) ; if ( variable_22 == variable_20 ) variable_5 = recv ( variable_22 , ( char * ) ( variable_0 + variable_7 ) , sizeof ( wchar_t ) * ( variable_2 - variable_7 - 1 ) , 0 ) ; if ( variable_5 == variable_20 || variable_5 == 0 ) while ( 0 ) if ( variable_9 != variable_13 ) func_7 ( variable_9 ) ; if ( variable_22 != variable_13 ) func_8 ( variable_22 ) ;
 static void func_0 ( ) char * variable_0 ; if ( func_1 ( & variable_1 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_0 != 0 ) variable_2 = ( ( void * ) variable_0 ) ; variable_3 = & variable_2 ; func_3 ( variable_3 ) ; void func_4 ( void * * variable_4 ) char variable_5 [ 1024 ] ; variable_6 = ( ( char * ) ( ( char * ) ( * variable_4 ) ) ) ; variable_7 = ( struct stonesoup_struct * ) malloc ( sizeof ( struct variable_8 ) ) ; if ( variable_7 != NULL ) memset ( variable_5 , 0 , 1024 ) ; memset ( variable_7 -> variable_9 , 65 , 64 ) ; variable_7 -> variable_9 [ 64 - 1 ] = ' \0 ' ; variable_7 -> variable_10 = variable_7 -> variable_9 ; strncpy ( variable_5 , variable_6 , sizeof ( variable_5 ) ) ; variable_5 [ 1023 ] = ' \0 ' ; if ( strlen ( variable_5 ) + 1 <= 64 ) strncpy ( variable_7 -> variable_9 , variable_5 , sizeof ( variable_5 ) ) ; variable_11 = strlen ( variable_7 -> variable_10 ) ; for ( ; variable_12 < variable_11 ; ++ variable_12 ) variable_7 -> variable_9 [ variable_12 ] = func_5 ( variable_7 -> variable_9 [ variable_12 ] ) ; int func_6 ( int variable_13 ) if ( variable_13 >= 97 && variable_13 <= 122 ) return variable_13 - 32 ; return variable_13 ; func_7 ( " %s \n " , variable_7 -> variable_9 ) ; void func_8 ( char * variable_14 , . . . ) va_start ( variable_15 , variable_14 ) ; vfprintf ( variable_16 , variable_14 , variable_15 ) ; free ( variable_7 ) ;

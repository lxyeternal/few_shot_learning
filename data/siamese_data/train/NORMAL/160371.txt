 static void func_0 ( ) if ( func_1 ( ) ) int func_2 ( ) return ( rand ( ) % 2 ) ; WSADATA variable_0 ; int variable_1 ; struct sockaddr_in variable_2 ; char variable_3 [ variable_4 ] ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_0 ) != variable_5 ) variable_6 = func_5 ( variable_7 , variable_8 , variable_9 ) ; if ( variable_6 == variable_10 ) memset ( & variable_2 , 0 , sizeof ( variable_2 ) ) ; variable_2 . variable_11 = variable_7 ; variable_2 . variable_12 . variable_13 = func_6 ( variable_14 ) ; variable_2 . variable_15 = func_7 ( variable_16 ) ; if ( func_8 ( variable_6 , ( struct sockaddr * ) & variable_2 , sizeof ( variable_2 ) ) == variable_17 ) variable_1 = recv ( variable_6 , variable_3 , variable_4 - 1 , 0 ) ; if ( variable_1 == variable_17 || variable_1 == 0 ) variable_3 [ variable_1 ] = ' \0 ' ; variable_18 = atoi ( variable_3 ) ; while ( 0 ) if ( variable_6 != variable_10 ) func_9 ( variable_6 ) ; if ( abs ( ( long ) variable_18 ) <= ( long ) sqrt ( ( variable_19 ) variable_20 ) ) int variable_21 = variable_18 * variable_18 ; func_10 ( variable_21 ) ; void func_11 ( int variable_22 ) printf ( " %d \n " , variable_22 ) ; if ( abs ( ( long ) variable_18 ) <= ( long ) sqrt ( ( variable_19 ) variable_20 ) ) int variable_21 = variable_18 * variable_18 ; func_12 ( variable_21 ) ; void func_13 ( int variable_22 ) printf ( " %d \n " , variable_22 ) ;
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) variable_6 * variable_7 ; variable_4 * variable_8 ; guint variable_9 = 0 ; guint8 variable_10 ; gboolean variable_11 ; gboolean variable_12 ; guint32 variable_13 ; guint32 variable_14 ; variable_7 = func_1 ( variable_5 , variable_15 , variable_1 , 0 , - 1 , variable_16 ) ; variable_8 = func_2 ( variable_7 , variable_17 ) ; variable_9 += func_3 ( variable_1 , variable_8 , variable_9 , & variable_10 ) ; static func_4 ( variable_0 * variable_1 , variable_4 * variable_8 , guint variable_9 , variable_18 * variable_10 ) guint variable_19 = 0 ; * variable_10 = func_5 ( func_6 ( variable_1 , variable_9 + variable_19 ) ) ; variable_19 ++ ; if ( * variable_10 == 1 ) variable_19 += 3 ; return variable_19 ; if ( variable_10 == 1 ) variable_9 += func_7 ( variable_1 , variable_8 , variable_9 , variable_3 , & variable_20 , & variable_21 , & variable_11 , & variable_12 , & variable_13 , & variable_14 ) ; static func_8 ( variable_0 * variable_1 , variable_4 * variable_8 , guint variable_9 , variable_2 * variable_3 , variable_18 * variable_20 , variable_18 * variable_21 , variable_22 * variable_11 , variable_22 * variable_12 , variable_23 * variable_13 , variable_23 * variable_14 ) guint variable_19 = 0 ; guint8 variable_24 , variable_25 ; variable_19 ++ ; variable_26 = func_9 ( variable_1 , ( variable_9 + variable_19 ) * 8 + 7 , 9 , variable_27 ) ; variable_19 += 2 ; variable_19 += 2 ; variable_19 += 2 ; if ( variable_26 & 0 variable_28 ) variable_24 = func_10 ( variable_1 , variable_9 + variable_19 ) ; variable_19 += 1 ; variable_19 += variable_24 ; variable_29 = 4 - ( ( variable_9 + variable_19 ) % 4 ) ; if ( variable_29 != 4 ) variable_19 += variable_29 ; if ( variable_26 & 0 variable_30 ) variable_25 = func_11 ( variable_1 , variable_9 + variable_19 ) ; if ( variable_31 == 1 ) variable_19 += 1 ; variable_25 = 4 ; variable_19 += 1 ; variable_19 += variable_25 ; variable_29 = 4 - ( ( variable_9 + variable_19 ) % 4 ) ; if ( variable_29 != 4 ) variable_19 += variable_29 ; return variable_19 ; if ( variable_32 && variable_11 ) const int variable_33 = func_12 ( variable_1 , variable_9 ) ; if ( variable_33 <= 0 ) variable_3 -> variable_34 = variable_35 ; variable_36 = func_13 ( variable_1 , variable_9 , variable_3 , variable_13 , variable_37 , variable_38 , variable_14 , variable_33 , variable_12 ) ; variable_39 func_14 ( variable_0 * variable_1 , const int variable_9 , const variable_2 const guint32 variable_40 , variable_41 variable_41 * variable_42 , const variable_23 const guint32 variable_43 , const gboolean variable_44 ) fragment_key variable_45 , * variable_46 , * variable_47 ; gpointer variable_48 , variable_49 ; variable_39 * variable_50 ; if ( variable_3 -> variable_51 -> variable_26 . variable_52 ) variable_45 . variable_53 = variable_3 -> variable_53 ; variable_45 . variable_54 = variable_3 -> variable_54 ; variable_45 . variable_40 = variable_40 ; if ( ! func_15 ( variable_55 , & variable_45 , & variable_48 , & variable_49 ) ) variable_50 = func_16 ( 0 ) ; static variable_39 * func_17 ( const guint32 variable_26 ) variable_39 * variable_50 ; variable_50 = func_18 ( variable_39 ) ; variable_50 -> variable_26 = variable_26 ; return variable_50 ; variable_50 = variable_49 ; if ( func_19 ( variable_1 ) > func_20 ( variable_1 ) ) if ( func_21 ( variable_50 , variable_1 , variable_9 , variable_3 , variable_56 , variable_43 , variable_44 ) ) static func_22 ( variable_39 * variable_50 , variable_0 * variable_1 , const int const packet_info * variable_3 , const variable_23 const guint32 variable_43 , const gboolean variable_44 ) variable_39 * variable_51 ; variable_39 * variable_57 ; guint32 variable_58 , variable_59 ; variable_51 = func_23 ( variable_39 ) ; variable_51 -> variable_60 = NULL ; variable_51 -> variable_26 = 0 ; variable_51 -> variable_61 = variable_3 -> variable_51 -> variable_62 ; if ( variable_51 -> variable_61 > variable_50 -> variable_61 ) variable_50 -> variable_61 = variable_51 -> variable_61 ; variable_51 -> variable_9 = variable_56 ; variable_51 -> variable_63 = variable_43 ; variable_51 -> variable_64 = NULL ; if ( variable_50 -> variable_26 & variable_65 && ( variable_56 + variable_43 ) >= variable_50 -> variable_66 && variable_50 -> variable_26 & variable_67 ) for ( variable_57 = variable_50 -> variable_60 ; variable_57 ; variable_57 = variable_57 -> variable_60 ) if ( ! variable_57 -> variable_64 ) variable_57 -> variable_64 = variable_50 -> variable_64 + variable_57 -> variable_9 ; variable_57 -> variable_26 |= variable_68 ; variable_57 -> variable_26 &= ( ~ variable_69 ) & ( ~ variable_70 ) ; variable_50 -> variable_26 &= ~ ( variable_65 | variable_67 | variable_71 ) ; variable_50 -> variable_26 &= ( ~ variable_69 ) & ( ~ variable_70 ) ; variable_50 -> variable_66 = 0 ; variable_50 -> variable_72 = 0 ; if ( ! variable_44 ) if ( variable_50 -> variable_26 & variable_71 ) if ( variable_50 -> variable_66 != ( variable_51 -> variable_9 + variable_51 -> variable_63 ) ) variable_50 -> variable_26 |= variable_70 ; variable_50 -> variable_66 = variable_51 -> variable_9 + variable_51 -> variable_63 ; variable_50 -> variable_26 |= variable_71 ; if ( variable_50 -> variable_26 & variable_65 ) if ( ! ( variable_50 -> variable_26 & variable_71 ) ) variable_58 = 0 ; for ( variable_57 = variable_50 -> variable_60 ; variable_57 ; variable_57 = variable_57 -> variable_60 ) if ( ( ( variable_57 -> variable_9 ) <= variable_58 ) && ( ( variable_57 -> variable_9 + variable_57 -> variable_63 ) > variable_58 ) ) variable_58 = variable_57 -> variable_9 + variable_57 -> variable_63 ; if ( variable_58 < ( variable_50 -> variable_66 ) ) if ( variable_58 > ( variable_50 -> variable_66 ) ) variable_50 -> variable_26 |= variable_69 ; variable_50 -> variable_64 = func_24 ( variable_58 ) ; for ( variable_59 = 0 , variable_57 = variable_50 ; variable_57 ; variable_57 = variable_57 -> variable_60 ) if ( variable_57 -> variable_63 ) if ( variable_57 -> variable_9 + variable_57 -> variable_63 > variable_59 ) if ( variable_57 -> variable_9 + variable_57 -> variable_63 > variable_58 ) if ( variable_59 < variable_57 -> variable_9 ) if ( variable_59 - variable_57 -> variable_9 > variable_57 -> variable_63 ) if ( ! variable_50 -> variable_64 ) if ( variable_57 -> variable_9 < variable_59 ) variable_57 -> variable_26 |= variable_73 ; variable_50 -> variable_26 |= variable_73 ; if ( memcmp ( variable_50 -> variable_64 + variable_57 -> variable_9 , variable_57 -> variable_64 , func_25 ( variable_57 -> variable_63 , ( variable_59 - variable_57 -> variable_9 ) ) ) ) variable_57 -> variable_26 |= variable_74 ; variable_50 -> variable_26 |= variable_74 ; memcpy ( variable_50 -> variable_64 + variable_59 , variable_57 -> variable_64 + ( variable_59 - variable_57 -> variable_9 ) , variable_57 -> variable_63 - ( variable_59 - variable_57 -> variable_9 ) ) ; if ( variable_57 -> variable_26 & variable_68 ) variable_57 -> variable_26 &= ~ variable_68 ; variable_57 -> variable_64 = NULL ; variable_59 = func_26 ( variable_59 , ( variable_57 -> variable_9 + variable_57 -> variable_63 ) ) ; variable_50 -> variable_26 |= variable_65 ; variable_50 -> variable_72 = variable_3 -> variable_51 -> variable_62 ;
 static int func_0 ( struct variable_0 * variable_1 , enum mg_event variable_2 ) char * variable_3 ; char * variable_4 ; int variable_5 = 1000 ; if ( variable_2 == variable_6 ) variable_3 = ( char * ) func_1 ( variable_1 , " if - match " ) ; if ( strcmp ( variable_3 , " weak_taint_source_value " ) == 0 ) while ( 1 ) variable_4 = ( char * ) malloc ( variable_5 * sizeof ( char ) ) ; variable_7 = func_2 ( variable_1 , " data " , variable_4 , variable_5 * sizeof ( char ) ) ; if ( variable_7 < variable_5 ) variable_5 = variable_5 * 2 ; free ( variable_4 ) ; func_3 ( variable_4 ) ; void func_4 ( char * variable_8 ) if ( variable_8 != 0 ) variable_9 = ( ( void * ) variable_8 ) ; variable_10 = & variable_9 ; variable_11 = & variable_10 ; variable_12 = & variable_11 ; variable_13 = & variable_12 ; variable_14 = & variable_13 ; variable_15 = & variable_14 ; variable_16 = & variable_15 ; variable_17 = & variable_16 ; variable_18 = & variable_17 ; variable_19 = & variable_18 ; variable_20 = & variable_19 ; variable_21 = & variable_20 ; variable_22 = & variable_21 ; variable_23 = & variable_22 ; variable_24 = & variable_23 ; variable_25 = & variable_24 ; variable_26 = & variable_25 ; variable_27 = & variable_26 ; variable_28 = & variable_27 ; variable_29 = & variable_28 ; variable_30 = & variable_29 ; variable_31 = & variable_30 ; variable_32 = & variable_31 ; variable_33 = & variable_32 ; variable_34 = & variable_33 ; variable_35 = & variable_34 ; variable_36 = & variable_35 ; variable_37 = & variable_36 ; variable_38 = & variable_37 ; variable_39 = & variable_38 ; variable_40 = & variable_39 ; variable_41 = & variable_40 ; variable_42 = & variable_41 ; variable_43 = & variable_42 ; variable_44 = & variable_43 ; variable_45 = & variable_44 ; variable_46 = & variable_45 ; variable_47 = & variable_46 ; variable_48 = & variable_47 ; variable_49 = & variable_48 ; variable_50 = & variable_49 ; variable_51 = & variable_50 ; variable_52 = & variable_51 ; variable_53 = & variable_52 ; variable_54 = & variable_53 ; variable_55 = & variable_54 ; variable_56 = & variable_55 ; variable_57 = & variable_56 ; variable_58 = & variable_57 ; variable_59 = & variable_58 ; func_5 ( variable_60 , variable_59 ) ; void func_6 ( int variable_61 , void * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * variable_62 ) variable_61 -- ; if ( variable_61 > 0 ) func_7 ( variable_61 , variable_62 ) ; void func_8 ( int variable_61 , void * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * variable_62 ) variable_61 -- ; if ( variable_61 > 0 ) func_9 ( variable_61 , variable_62 ) ; variable_63 = ( ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; if ( strlen ( variable_63 ) < 63 ) variable_64 = malloc ( strlen ( variable_63 + 1 ) ) ; func_10 ( variable_65 , variable_66 , " stonesoup_skip_malloc_buffer " , variable_64 , " TRIGGER - STATE " ) ; strcpy ( variable_64 , variable_63 ) ; func_11 ( " Buffer is %s \n " , variable_64 ) ; void func_12 ( char * variable_67 , . . . ) va_start ( variable_68 , variable_67 ) ; func_13 ( ( struct mg_connection * ) variable_69 , variable_67 , variable_68 ) ; if ( variable_64 != 0 ) free ( variable_64 ) ; if ( ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) != 0 ) free ( ( ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; variable_63 = ( ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; if ( strlen ( variable_63 ) < 63 ) variable_64 = malloc ( strlen ( variable_63 + 1 ) ) ; func_14 ( variable_65 , variable_66 , " stonesoup_skip_malloc_buffer " , variable_64 , " TRIGGER - STATE " ) ; strcpy ( variable_64 , variable_63 ) ; func_15 ( " Buffer is %s \n " , variable_64 ) ; if ( variable_64 != 0 ) free ( variable_64 ) ; if ( ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) != 0 ) free ( ( ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_62 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;

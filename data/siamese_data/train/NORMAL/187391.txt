 variable_0 :: func_0 ( int variable_1 ) WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; char variable_5 [ variable_6 ] ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_13 = variable_9 ; variable_4 . variable_14 . variable_15 = variable_16 ; variable_4 . variable_17 = func_4 ( variable_18 ) ; if ( bind ( variable_8 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_19 ) if ( func_5 ( variable_8 , variable_20 ) == variable_19 ) variable_21 = func_6 ( variable_8 , NULL , NULL ) ; if ( variable_21 == variable_19 ) variable_3 = recv ( variable_21 , variable_5 , variable_6 - 1 , 0 ) ; if ( variable_3 == variable_19 || variable_3 == 0 ) variable_5 [ variable_3 ] = ' \0 ' ; variable_22 = atoi ( variable_5 ) ; while ( 0 ) if ( variable_8 != variable_12 ) func_7 ( variable_8 ) ; if ( variable_21 != variable_12 ) func_8 ( variable_21 ) ;
 int func_0 ( variable_0 * variable_1 ) int variable_2 = 7 ; char * variable_3 ; if ( func_1 ( & variable_4 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_3 != 0 ) variable_5 = func_3 ( variable_3 ) ; char * func_4 ( char * variable_6 ) return variable_6 ; func_5 ( variable_2 , variable_5 ) ; void func_6 ( int variable_7 , char * variable_8 ) char * variable_9 ; char * variable_10 = " nslookup " ; variable_7 -- ; if ( variable_7 > 0 ) variable_11 = ( ( char * ) variable_8 ) ; if ( strlen ( variable_11 ) < 1000 - strlen ( variable_10 ) ) if ( func_7 ( variable_11 ) == 1 ) int func_8 ( char * variable_12 ) int variable_13 = 0 ; while ( variable_12 [ variable_13 ] != ' \0 ' ) if ( variable_12 [ variable_13 ] == ' ; ' ) if ( variable_13 == 0 || variable_12 [ variable_13 - 1 ] != ' \ \ ' ) return 0 ; if ( variable_12 [ variable_13 ] == ' | ' ) if ( variable_13 == 0 || variable_12 [ variable_13 - 1 ] != ' \ \ ' ) return 0 ; if ( variable_12 [ variable_13 ] == ' & ' ) if ( variable_13 == 0 || variable_12 [ variable_13 - 1 ] != ' \ \ ' ) return 0 ; variable_13 ++ ; return 1 ; variable_9 = malloc ( ( strlen ( variable_11 ) + 1 ) * sizeof ( char ) ) ; func_9 ( variable_11 , variable_9 ) ; void func_10 ( char * variable_12 , char * variable_14 ) while ( * variable_12 ) if ( ( * variable_12 == ' % ' ) && ( ( variable_15 = variable_12 [ 1 ] ) && ( variable_16 = variable_12 [ 2 ] ) ) && ( isxdigit ( variable_15 ) && isxdigit ( variable_16 ) ) ) if ( variable_15 >= ' a ' ) variable_15 -= ' a ' - ' A ' ; if ( variable_15 >= ' A ' ) variable_15 -= ( ' A ' - 10 ) ; variable_15 -= ' 0 ' ; if ( variable_16 >= ' a ' ) variable_16 -= ' a ' - ' A ' ; if ( variable_16 >= ' A ' ) variable_16 -= ( ' A ' - 10 ) ; variable_16 -= ' 0 ' ; * variable_14 ++ = 16 * variable_15 + variable_16 ; variable_12 += 3 ; * variable_14 ++ = * variable_12 ++ ; * variable_14 ++ = ' \0 ' ; snprintf ( variable_17 , 1000 , " %s %s " , variable_10 , variable_9 ) ; func_11 ( variable_18 , variable_19 , " stonesoup_command_buffer " , variable_17 , " CROSSOVER - STATE " ) ; variable_20 = func_12 ( variable_17 , " r " ) ; if ( variable_20 != 0 ) while ( fgets ( variable_21 , 100 , variable_20 ) != 0 ) func_13 ( variable_21 ) ; void func_14 ( char * variable_22 , . . . ) va_start ( variable_23 , variable_22 ) ; vfprintf ( variable_24 , variable_22 , variable_23 ) ; func_15 ( variable_20 ) ;

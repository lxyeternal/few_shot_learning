 static void func_0 ( ) void * variable_0 ; variable_0 = NULL ; if ( variable_1 ) variable_0 = ( void * ) variable_2 ; if ( variable_1 ) size_t variable_3 = wcslen ( ( wchar_t * ) variable_0 ) ; void * variable_4 = ( void * ) calloc ( variable_3 + 1 , sizeof ( wchar_t ) ) ; memcpy ( variable_4 , variable_0 , ( variable_3 + 1 ) * sizeof ( wchar_t ) ) ; func_1 ( ( wchar_t * ) variable_4 ) ; void func_2 ( const wchar_t * variable_5 ) if ( variable_5 != NULL ) wprintf ( L " % ls \n " , variable_5 ) free ( variable_4 ) ;
 static enum variable_1 func_0 ( variable_2 const char const char const char * * variable_3 ) variable_4 * variable_5 ; const char * variable_6 , * variable_7 ; const char * variable_8 ; enum XML_Error variable_9 ; variable_10 * variable_11 = variable_12 ; if ( ! variable_11 ) variable_5 = variable_11 -> variable_5 ; variable_6 = ( ( char * ) variable_5 -> variable_13 ) + variable_5 -> variable_14 ; variable_7 = ( char * ) ( variable_5 -> variable_13 + variable_5 -> variable_15 ) ; if ( variable_5 -> variable_16 ) int variable_17 = func_1 ( variable_18 , variable_6 , variable_7 , & variable_8 ) ; variable_9 = func_2 ( variable_19 , variable_18 , variable_6 , variable_7 , variable_17 , variable_8 , & variable_8 , variable_20 ) ; variable_9 = func_3 ( variable_19 , variable_11 -> variable_21 , variable_18 , variable_6 , variable_7 , & variable_8 , variable_20 ) ; if ( variable_9 != variable_22 ) if ( variable_7 != variable_8 && variable_23 == variable_24 ) variable_5 -> variable_25 = variable_20 ; if ( variable_5 -> variable_16 ) int variable_17 ; variable_17 = func_4 ( variable_26 , variable_27 , variable_28 , & variable_8 ) ; return func_5 ( variable_19 , variable_26 , variable_27 , variable_28 , variable_17 , variable_8 , variable_3 , ( variable_29 ) ! variable_30 ) ; static enum func_6 ( variable_2 const variable_31 const char const char int const char const char XML_Bool variable_32 ) static const XML_Char variable_33 [ ] = { ' # ' , ' \0 ' } ; static const XML_Char variable_34 [ ] = { ' C ' , ' D ' , ' A ' , ' T ' , ' A ' , ' \0 ' } ; static const XML_Char variable_35 [ ] = { ' I ' , ' D ' , ' \0 ' } ; static const XML_Char variable_36 [ ] = { ' I ' , ' D ' , ' R ' , ' E ' , ' F ' , ' \0 ' } ; static const XML_Char variable_37 [ ] = { ' I ' , ' D ' , ' R ' , ' E ' , ' F ' , ' S ' , ' \0 ' } ; static const XML_Char variable_38 [ ] = { ' E ' , ' N ' , ' T ' , ' I ' , ' T ' , ' Y ' , ' \0 ' } ; static const XML_Char variable_39 [ ] = { ' E ' , ' N ' , ' T ' , ' I ' , ' T ' , ' I ' , ' E ' , ' S ' , ' \0 ' } ; static const XML_Char variable_40 [ ] = { ' N ' , ' M ' , ' T ' , ' O ' , ' K ' , ' E ' , ' N ' , ' \0 ' } ; static const XML_Char variable_41 [ ] = { ' N ' , ' M ' , ' T ' , ' O ' , ' K ' , ' E ' , ' N ' , ' S ' , ' \0 ' } ; static const XML_Char variable_42 [ ] = { ' N ' , ' O ' , ' T ' , ' A ' , ' T ' , ' I ' , ' O ' , ' N ' , ' ( ' , ' \0 ' } ; static const XML_Char variable_43 [ ] = { ' | ' , ' \0 ' } ; static const XML_Char variable_44 [ ] = { ' ( ' , ' \0 ' } ; DTD * const variable_45 = variable_46 const char * * variable_47 ; enum XML_Content_Quant variable_48 ; if ( variable_49 == variable_26 ) variable_47 = & variable_50 ; variable_47 = & ( variable_12 -> variable_51 ) ; int variable_52 ; XML_Bool variable_53 = variable_54 ; * variable_47 = variable_27 ; if ( variable_17 <= 0 ) if ( variable_32 && variable_17 != variable_55 ) switch ( variable_17 ) * variable_47 = variable_8 ; if ( variable_49 != variable_26 && ! variable_12 -> variable_56 ) * variable_3 = variable_27 ; if ( variable_57 || variable_49 != variable_26 ) if ( func_7 ( & variable_58 , variable_59 , variable_28 , variable_28 , variable_49 ) == variable_60 ) * variable_3 = variable_27 ; variable_17 = - variable_17 ; variable_8 = variable_28 ; variable_52 = func_8 ( & variable_58 , variable_17 , variable_27 , variable_8 , variable_49 ) ; switch ( variable_52 ) enum XML_Error variable_9 = func_9 ( variable_19 , 0 , variable_27 , variable_8 ) ; if ( variable_9 != variable_22 ) variable_49 = variable_26 ; variable_53 = variable_20 ; if ( variable_61 ) variable_62 = func_10 ( & variable_63 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_62 ) variable_64 = NULL ; variable_53 = variable_20 ; variable_65 = NULL ; if ( variable_61 ) variable_62 = NULL ; variable_53 = variable_20 ; enum XML_Error variable_9 = func_11 ( variable_19 , 1 , variable_27 , variable_8 ) ; if ( variable_9 != variable_22 ) variable_49 = variable_26 ; variable_53 = variable_20 ; variable_66 = variable_20 ; variable_67 = ( ENTITY * ) func_12 ( & variable_45 -> variable_68 , variable_33 , sizeof ( variable_4 ) ) ; if ( ! variable_67 ) variable_45 -> variable_69 = variable_54 ; if ( variable_61 ) if ( ! func_13 ( variable_49 , variable_27 , variable_8 , variable_47 ) ) variable_64 = func_14 ( & variable_63 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_64 ) if ( ! func_15 ( variable_49 , variable_27 , variable_8 , variable_47 ) ) if ( variable_45 -> variable_71 && variable_67 ) variable_72 * variable_73 = func_16 ( & variable_45 -> variable_74 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_73 ) variable_67 -> variable_75 = variable_73 ; if ( variable_76 ) variable_53 = variable_20 ; if ( variable_62 ) variable_53 = variable_20 ; if ( variable_65 || variable_66 ) XML_Bool variable_77 = variable_45 -> variable_69 ; variable_45 -> variable_69 = variable_54 ; if ( variable_78 && variable_79 ) variable_4 * variable_5 = ( ENTITY * ) func_17 ( & variable_45 -> variable_68 , variable_33 , sizeof ( variable_4 ) ) ; if ( ! variable_5 ) if ( variable_66 ) variable_5 -> variable_80 = variable_81 ; variable_45 -> variable_82 = variable_20 ; if ( ! func_18 ( variable_83 , 0 , variable_5 -> variable_80 , variable_5 -> variable_84 , variable_5 -> variable_75 ) ) if ( variable_45 -> variable_82 ) if ( ! variable_45 -> variable_85 && variable_86 && ! func_19 ( variable_87 ) ) if ( ! variable_65 ) variable_45 -> variable_69 = variable_77 ; variable_66 = variable_20 ; if ( variable_88 ) variable_53 = variable_20 ; if ( variable_66 ) XML_Bool variable_77 = variable_45 -> variable_69 ; variable_45 -> variable_69 = variable_54 ; if ( variable_78 && variable_79 ) variable_4 * variable_5 = ( ENTITY * ) func_20 ( & variable_45 -> variable_68 , variable_33 , sizeof ( variable_4 ) ) ; if ( ! variable_5 ) variable_5 -> variable_80 = variable_81 ; variable_45 -> variable_82 = variable_20 ; if ( ! func_21 ( variable_83 , 0 , variable_5 -> variable_80 , variable_5 -> variable_84 , variable_5 -> variable_75 ) ) if ( variable_45 -> variable_82 ) variable_45 -> variable_69 = variable_77 ; variable_89 = func_22 ( variable_19 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_89 ) variable_90 = func_23 ( variable_19 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_90 ) variable_91 = variable_20 ; variable_92 = NULL ; variable_93 = variable_20 ; variable_91 = variable_54 ; variable_92 = variable_34 ; variable_93 = variable_54 ; variable_92 = variable_35 ; variable_92 = variable_36 ; variable_92 = variable_37 ; variable_92 = variable_38 ; variable_92 = variable_39 ; variable_92 = variable_40 ; variable_92 = variable_41 ; if ( variable_45 -> variable_71 && variable_94 ) variable_53 = variable_20 ; if ( variable_45 -> variable_71 && variable_94 ) const XML_Char * variable_95 ; if ( variable_92 ) variable_95 = variable_43 ; variable_95 = ( variable_52 == variable_96 ? variable_42 : variable_44 ) ; if ( ! func_24 ( & variable_63 , variable_95 ) ) if ( ! func_25 ( & variable_63 , variable_49 , variable_27 , variable_8 ) ) variable_92 = variable_63 . variable_97 ; variable_53 = variable_20 ; if ( variable_45 -> variable_71 ) if ( ! func_26 ( variable_89 , variable_90 , variable_91 , variable_93 , 0 , variable_19 ) ) if ( variable_94 && variable_92 ) if ( * variable_92 == func_27 ( ' ( ' ) || ( * variable_92 == func_28 ( ' N ' ) && variable_92 [ 1 ] == func_29 ( ' O ' ) ) ) if ( ! func_30 ( & variable_63 , func_31 ( ' ) ' ) ) || ! func_32 ( & variable_63 , func_33 ( ' \0 ' ) ) ) variable_92 = variable_63 . variable_97 ; variable_53 = variable_20 ; if ( variable_45 -> variable_71 ) const XML_Char * variable_98 ; enum XML_Error variable_9 = func_34 ( variable_19 , variable_49 , variable_91 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 , & variable_45 -> variable_74 ) ; if ( variable_9 ) variable_98 = func_35 ( & variable_45 -> variable_74 ) ; if ( ! func_36 ( variable_89 , variable_90 , variable_91 , variable_20 , variable_98 , variable_19 ) ) if ( variable_94 && variable_92 ) if ( * variable_92 == func_37 ( ' ( ' ) || ( * variable_92 == func_38 ( ' N ' ) && variable_92 [ 1 ] == func_39 ( ' O ' ) ) ) if ( ! func_40 ( & variable_63 , func_41 ( ' ) ' ) ) || ! func_42 ( & variable_63 , func_43 ( ' \0 ' ) ) ) variable_92 = variable_63 . variable_97 ; variable_53 = variable_20 ; if ( variable_45 -> variable_71 ) enum XML_Error variable_9 = func_44 ( variable_19 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( variable_67 ) variable_67 -> variable_13 = func_45 ( & variable_45 -> variable_99 ) ; variable_67 -> variable_15 = ( int ) ( func_46 ( & variable_45 -> variable_99 ) ) ; if ( variable_9 != variable_22 ) variable_45 -> variable_69 = variable_54 ; if ( variable_61 ) variable_65 = func_47 ( & variable_63 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( variable_65 == NULL ) variable_53 = variable_20 ; && ! variable_78 if ( variable_45 -> variable_71 && variable_67 ) variable_67 -> variable_84 = func_48 ( & variable_45 -> variable_74 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_67 -> variable_84 ) variable_67 -> variable_80 = variable_81 ; if ( variable_76 ) variable_53 = variable_20 ; if ( variable_45 -> variable_71 && variable_67 && variable_76 ) variable_53 = variable_20 ; if ( variable_45 -> variable_71 && variable_67 ) variable_67 -> variable_100 = func_49 ( & variable_45 -> variable_74 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_67 -> variable_100 ) if ( variable_101 ) variable_53 = variable_20 ; if ( variable_76 ) variable_53 = variable_20 ; if ( func_50 ( variable_49 , variable_27 , variable_8 ) ) variable_67 = NULL ; if ( variable_45 -> variable_71 ) const XML_Char * variable_102 = func_51 ( & variable_45 -> variable_74 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_102 ) variable_67 = ( ENTITY * ) func_52 ( & variable_45 -> variable_103 , variable_102 , sizeof ( variable_4 ) ) ; if ( ! variable_67 ) if ( variable_67 -> variable_102 != variable_102 ) variable_67 = NULL ; variable_67 -> variable_75 = NULL ; variable_67 -> variable_16 = variable_20 ; variable_67 -> variable_104 = ! ( variable_105 || variable_12 ) ; if ( variable_76 ) variable_53 = variable_20 ; variable_67 = NULL ; if ( variable_45 -> variable_71 ) const XML_Char * variable_102 = func_53 ( & variable_45 -> variable_74 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_102 ) variable_67 = ( ENTITY * ) func_54 ( & variable_45 -> variable_68 , variable_102 , sizeof ( variable_4 ) ) ; if ( ! variable_67 ) if ( variable_67 -> variable_102 != variable_102 ) variable_67 = NULL ; variable_67 -> variable_75 = NULL ; variable_67 -> variable_16 = variable_54 ; variable_67 -> variable_104 = ! ( variable_105 || variable_12 ) ; if ( variable_76 ) variable_53 = variable_20 ; variable_67 = NULL ; variable_106 = NULL ; variable_107 = NULL ; if ( variable_108 ) variable_107 = func_55 ( & variable_63 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_107 ) variable_53 = variable_20 ; if ( ! func_56 ( variable_49 , variable_27 , variable_8 , variable_47 ) ) if ( variable_107 ) variable_72 * variable_73 = func_57 ( & variable_63 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_73 ) variable_106 = variable_73 ; variable_53 = variable_20 ; if ( variable_107 && variable_108 ) const XML_Char * variable_84 = func_58 ( & variable_63 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_84 ) variable_53 = variable_20 ; if ( variable_106 && variable_108 ) variable_53 = variable_20 ; enum XML_Error variable_9 ; variable_53 = variable_20 ; variable_9 = func_59 ( variable_19 , variable_49 , & variable_8 , variable_28 , variable_3 , variable_32 ) ; if ( variable_9 != variable_22 ) if ( ! variable_8 ) if ( variable_58 . variable_109 >= variable_110 ) if ( variable_110 ) char * variable_111 = ( char * ) func_60 ( variable_112 , variable_110 *= 2 ) ; if ( variable_111 == NULL ) variable_112 = variable_111 ; if ( variable_45 -> variable_113 ) int * variable_111 = ( int * ) func_61 ( variable_45 -> variable_113 , variable_110 * sizeof ( int ) ) ; if ( variable_111 == NULL ) variable_45 -> variable_113 = variable_111 ; variable_112 = ( char * ) func_62 ( variable_110 = 32 ) ; if ( ! variable_112 ) variable_112 [ variable_58 . variable_109 ] = 0 ; if ( variable_45 -> variable_114 ) int variable_115 = func_63 ( variable_19 ) ; if ( variable_115 < 0 ) variable_45 -> variable_113 [ variable_45 -> variable_116 ] = variable_115 ; variable_45 -> variable_116 ++ ; variable_45 -> variable_117 [ variable_115 ] . variable_118 = variable_119 ; if ( variable_120 ) variable_53 = variable_20 ; if ( variable_112 [ variable_58 . variable_109 ] == ' | ' ) variable_112 [ variable_58 . variable_109 ] = ' , ' ; if ( variable_45 -> variable_114 && variable_120 ) variable_53 = variable_20 ; if ( variable_112 [ variable_58 . variable_109 ] == ' , ' ) if ( variable_45 -> variable_114 && ! variable_112 [ variable_58 . variable_109 ] && ( variable_45 -> variable_117 [ variable_45 -> variable_113 [ variable_45 -> variable_116 - 1 ] ] . variable_118 != variable_121 ) ) variable_45 -> variable_117 [ variable_45 -> variable_113 [ variable_45 -> variable_116 - 1 ] ] . variable_118 = variable_122 ; if ( variable_120 ) variable_53 = variable_20 ; variable_112 [ variable_58 . variable_109 ] = ' | ' ; variable_45 -> variable_69 = variable_54 ; if ( ! variable_78 ) variable_45 -> variable_71 = variable_45 -> variable_85 ; const XML_Char * variable_102 ; variable_4 * variable_5 ; variable_102 = func_64 ( & variable_45 -> variable_74 , variable_49 , variable_27 + variable_49 -> variable_70 , variable_8 - variable_49 -> variable_70 ) ; if ( ! variable_102 ) variable_5 = ( ENTITY * ) func_65 ( & variable_45 -> variable_68 , variable_102 , 0 ) ; if ( variable_58 . variable_123 && ( variable_45 -> variable_85 ? ! variable_12 : ! variable_45 -> variable_69 ) ) if ( ! variable_5 ) if ( ! variable_5 -> variable_104 ) if ( ! variable_5 ) variable_45 -> variable_71 = variable_45 -> variable_85 ; if ( variable_5 -> variable_25 ) if ( variable_5 -> variable_13 ) enum XML_Error variable_9 ; XML_Bool variable_56 = ( variable_52 == variable_124 ? variable_54 : variable_20 ) ; variable_9 = func_66 ( variable_19 , variable_5 , variable_56 ) ; if ( variable_9 != variable_22 ) variable_53 = variable_20 ; if ( variable_79 ) variable_45 -> variable_82 = variable_20 ; variable_5 -> variable_25 = variable_54 ; variable_5 -> variable_25 = variable_20 ; variable_5 -> variable_25 = variable_20 ; variable_53 = variable_20 ; if ( ! variable_45 -> variable_82 ) variable_45 -> variable_71 = variable_45 -> variable_85 ; variable_45 -> variable_71 = variable_45 -> variable_85 ; if ( ! variable_45 -> variable_85 && variable_86 && ! func_67 ( variable_87 ) ) if ( variable_120 ) variable_89 = func_68 ( variable_19 , variable_49 , variable_27 , variable_8 ) ; if ( ! variable_89 ) variable_45 -> variable_116 = 0 ; variable_45 -> variable_125 = 0 ; variable_45 -> variable_114 = variable_54 ; variable_53 = variable_20 ; if ( variable_45 -> variable_114 ) if ( variable_120 ) variable_126 * variable_127 = ( XML_Content * ) func_69 ( sizeof ( variable_126 ) ) ; if ( ! variable_127 ) variable_53 = variable_20 ; variable_45 -> variable_114 = variable_20 ; if ( variable_45 -> variable_114 ) variable_45 -> variable_117 [ variable_45 -> variable_113 [ variable_45 -> variable_116 - 1 ] ] . variable_118 = variable_121 ; if ( variable_120 ) variable_53 = variable_20 ; variable_48 = variable_128 ; variable_48 = variable_129 ; variable_48 = variable_130 ; variable_48 = variable_131 ; if ( variable_45 -> variable_114 ) variable_132 * variable_133 ; const XML_Char * variable_102 ; int variable_134 ; const char * variable_135 = ( variable_48 == variable_128 ? variable_8 : variable_8 - variable_49 -> variable_70 ) ; int variable_115 = func_70 ( variable_19 ) ; if ( variable_115 < 0 ) variable_45 -> variable_117 [ variable_115 ] . variable_118 = variable_136 ; variable_45 -> variable_117 [ variable_115 ] . variable_48 = variable_48 ; variable_133 = func_71 ( variable_19 , variable_49 , variable_27 , variable_135 ) ; if ( ! variable_133 ) variable_102 = variable_133 -> variable_102 ; variable_45 -> variable_117 [ variable_115 ] . variable_102 = variable_102 ; variable_134 = 0 ; for ( ; variable_102 [ variable_134 ++ ] ; ) ; variable_45 -> variable_137 += variable_134 ; if ( variable_120 ) variable_53 = variable_20 ; variable_48 = variable_128 ; variable_48 = variable_129 ; variable_48 = variable_130 ; variable_48 = variable_131 ; if ( variable_45 -> variable_114 ) if ( variable_120 ) variable_53 = variable_20 ; variable_45 -> variable_116 -- ; variable_45 -> variable_117 [ variable_45 -> variable_113 [ variable_45 -> variable_116 ] ] . variable_48 = variable_48 ; if ( variable_45 -> variable_116 == 0 ) if ( ! variable_53 ) variable_126 * variable_138 = func_72 ( variable_19 ) ; if ( ! variable_138 ) variable_45 -> variable_114 = variable_20 ; variable_45 -> variable_137 = 0 ; if ( ! func_73 ( variable_19 , variable_49 , variable_27 , variable_8 ) ) if ( ! func_74 ( variable_19 , variable_49 , variable_27 , variable_8 ) ) switch ( variable_23 ) variable_27 = variable_8 ; variable_17 = func_75 ( variable_49 , variable_27 , variable_28 , & variable_8 ) ; static variable_72 func_76 ( variable_139 * variable_74 , const variable_31 const char * variable_140 , const char * variable_28 ) if ( ! variable_74 -> variable_140 && ! func_77 ( variable_74 ) ) if ( variable_140 == variable_28 ) if ( ! func_78 ( variable_74 ) ) static variable_29 func_79 ( variable_139 * variable_74 ) if ( variable_74 -> variable_141 ) if ( variable_74 -> variable_97 == 0 ) if ( variable_74 -> variable_28 - variable_74 -> variable_97 < variable_74 -> variable_141 -> variable_142 ) if ( variable_74 -> variable_143 && variable_74 -> variable_97 == variable_74 -> variable_143 -> variable_27 ) variable_144 * variable_73 ; int variable_145 = ( int ) ( variable_74 -> variable_28 - variable_74 -> variable_97 ) ; if ( variable_145 < variable_146 ) variable_145 = variable_146 ; variable_145 *= 2 ; variable_73 = ( BLOCK * ) variable_74 -> variable_147 -> func_80 ( offsetof ( variable_144 , variable_27 ) + variable_145 * sizeof ( variable_72 ) ) ; if ( ! variable_73 ) variable_73 -> variable_142 = variable_145 ; variable_73 -> variable_8 = variable_74 -> variable_143 ; variable_74 -> variable_143 = variable_73 ; if ( variable_74 -> variable_140 != variable_74 -> variable_97 ) memcpy ( variable_73 -> variable_27 , variable_74 -> variable_97 , ( variable_74 -> variable_140 - variable_74 -> variable_97 ) * sizeof ( variable_72 ) ) ; variable_74 -> variable_140 = variable_73 -> variable_27 + ( variable_74 -> variable_140 - variable_74 -> variable_97 ) ; variable_74 -> variable_97 = variable_73 -> variable_27 ; variable_74 -> variable_28 = variable_73 -> variable_27 + variable_145 ;
 int func_0 ( variable_0 * variable_1 ) AVPacket variable_2 ; if ( variable_1 -> variable_3 == ( ( void * ) 0 ) && variable_1 -> variable_4 ) return func_1 ( variable_1 , & variable_2 ) ; static int func_2 ( variable_0 * variable_5 , variable_0 * variable_6 ) variable_5 -> variable_4 = ( ( void * ) 0 ) ; variable_5 -> variable_7 = ( ( void * ) 0 ) ; void * variable_4 ; if ( 1 ) if ( ( ( unsigned int ) ( variable_5 -> variable_8 ) ) > ( ( unsigned int ) ( variable_5 -> variable_8 ) ) + 16 ) variable_4 = func_3 ( ( variable_5 -> variable_8 + 16 ) ) ; variable_4 = func_4 ( ( variable_5 -> variable_8 ) ) ; if ( ! variable_4 ) memcpy ( variable_4 , ( variable_6 -> variable_4 ) , ( variable_5 -> variable_8 ) ) ; if ( 1 ) memset ( ( ( ( uint8_t * ) variable_4 ) + variable_5 -> variable_8 ) , 0 , 16 ) ; variable_5 -> variable_4 = variable_4 ; while ( 0 ) variable_5 -> variable_3 = variable_9 ; if ( variable_5 -> variable_10 ) int variable_11 ; void * variable_4 ; if ( 0 ) if ( ( ( unsigned int ) ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ) > ( ( unsigned int ) ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ) + 16 ) variable_4 = func_5 ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) + 16 ) ; variable_4 = func_6 ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; if ( ! variable_4 ) memcpy ( variable_4 , ( variable_6 -> variable_7 ) , ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; if ( 0 ) memset ( ( ( ( uint8_t * ) variable_4 ) + ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) , 0 , 16 ) ; variable_5 -> variable_7 = variable_4 ; while ( 0 ) memset ( ( variable_5 -> variable_7 ) , 0 , ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; for ( variable_11 = 0 ; variable_11 < variable_5 -> variable_10 ; variable_11 ++ ) void * variable_4 ; if ( 1 ) if ( ( ( unsigned int ) variable_6 -> variable_7 [ variable_11 ] . variable_8 ) > ( ( unsigned int ) variable_6 -> variable_7 [ variable_11 ] . variable_8 ) + 16 ) variable_4 = func_7 ( ( variable_6 -> variable_7 [ variable_11 ] . variable_8 + 16 ) ) ; variable_4 = func_8 ( variable_6 -> variable_7 [ variable_11 ] . variable_8 ) ; if ( ! variable_4 ) memcpy ( variable_4 , variable_6 -> variable_7 [ variable_11 ] . variable_4 , variable_6 -> variable_7 [ variable_11 ] . variable_8 ) ; if ( 1 ) memset ( ( ( ( uint8_t * ) variable_4 ) + variable_6 -> variable_7 [ variable_11 ] . variable_8 ) , 0 , 16 ) ; variable_5 -> variable_7 [ variable_11 ] . variable_4 = variable_4 ; while ( 0 ) variable_5 -> variable_7 [ variable_11 ] . variable_8 = variable_6 -> variable_7 [ variable_11 ] . variable_8 ; variable_5 -> variable_7 [ variable_11 ] . variable_12 = variable_6 -> variable_7 [ variable_11 ] . variable_12 ;
 int main ( int variable_0 , char * variable_1 [ ] ) char * variable_2 ; variable_2 = getenv ( " CONTENT_TYPE " ) ; if ( variable_2 ) variable_3 [ 0 ] = ' \0 ' ; if ( func_0 ( variable_4 , " post " ) ) if ( func_1 ( variable_3 , " application / x - www - form - urlencoded " ) ) static int func_2 ( char * variable_5 , char * variable_6 ) while ( 1 ) if ( ! ( * variable_5 ) ) if ( ! ( * variable_6 ) ) return 1 ; return 0 ; if ( ! ( * variable_6 ) ) return 0 ; if ( isalpha ( * variable_5 ) ) if ( tolower ( * variable_5 ) != tolower ( * variable_6 ) ) return 0 ; if ( ( * variable_5 ) != ( * variable_6 ) ) return 0 ; variable_5 ++ ; variable_6 ++ ; if ( func_3 ( variable_3 , " multipart / form - data " ) ) static int func_4 ( char * variable_5 , char * variable_6 ) while ( 1 ) if ( ! ( * variable_5 ) ) if ( ! ( * variable_6 ) ) return 1 ; return 0 ; if ( ! ( * variable_6 ) ) return 0 ; if ( isalpha ( * variable_5 ) ) if ( tolower ( * variable_5 ) != tolower ( * variable_6 ) ) return 0 ; if ( ( * variable_5 ) != ( * variable_6 ) ) return 0 ; variable_5 ++ ; variable_6 ++ ; if ( func_5 ( ) != variable_7 ) static cgiParseResultType func_6 ( ) cgiParseResultType variable_8 ; int variable_9 ; char variable_10 [ 1024 ] ; mpStreamPtr variable_11 = & variable_12 ; if ( ! variable_13 ) return variable_7 ; variable_8 = func_7 ( variable_11 , 0 , 0 , 0 , 1 ) ; cgiParseResultType func_8 ( mpStreamPtr variable_11 , FILE * variable_14 , char int * variable_15 , int variable_16 ) int variable_17 = 256 ; cgiParseResultType variable_8 ; int variable_18 ; int variable_9 ; char variable_19 [ 2 ] ; char variable_20 [ 1024 ] ; char * variable_21 = variable_20 ; int variable_22 ; if ( ( ! variable_14 ) && ( variable_23 ) ) variable_24 = ( char * ) malloc ( variable_17 ) ; if ( ! variable_24 ) variable_18 = 0 ; sprintf ( variable_20 , " \r \n -- %s " , variable_25 ) ; if ( variable_16 ) variable_21 = variable_20 + 2 ; variable_22 = strlen ( variable_21 ) ; while ( 1 ) variable_9 = func_9 ( variable_11 , variable_19 , 1 ) ; int func_10 ( mpStreamPtr variable_11 , char * variable_26 , int variable_27 ) int variable_28 = variable_27 ; int variable_9 = 0 ; if ( variable_27 > ( variable_13 - variable_11 -> variable_29 ) ) variable_27 = variable_13 - variable_11 -> variable_29 ; while ( variable_27 ) if ( variable_11 -> variable_30 != variable_11 -> variable_31 ) * variable_26 ++ = variable_11 -> variable_32 [ variable_11 -> variable_30 ++ ] ; variable_11 -> variable_30 %= sizeof ( variable_11 -> variable_32 ) ; variable_9 ++ ; variable_27 -- ; if ( variable_27 ) int variable_33 = fread ( variable_26 , 1 , variable_27 , variable_34 ) ; if ( variable_33 >= 0 ) return variable_9 + variable_33 ; if ( variable_9 > 0 ) return variable_9 ; return variable_33 ; if ( variable_9 ) return variable_9 ; if ( variable_28 ) return variable_35 ; return 0 ; if ( variable_9 != 1 ) variable_8 = variable_36 ; if ( variable_19 [ 0 ] == variable_21 [ variable_18 ] ) variable_18 ++ ; if ( variable_18 == variable_22 ) if ( variable_18 > 0 ) variable_18 = 0 ; variable_9 = func_11 ( variable_11 , variable_19 , 2 ) ; int func_12 ( mpStreamPtr variable_11 , char * variable_26 , int variable_27 ) int variable_28 = variable_27 ; int variable_9 = 0 ; if ( variable_27 > ( variable_13 - variable_11 -> variable_29 ) ) variable_27 = variable_13 - variable_11 -> variable_29 ; while ( variable_27 ) if ( variable_11 -> variable_30 != variable_11 -> variable_31 ) * variable_26 ++ = variable_11 -> variable_32 [ variable_11 -> variable_30 ++ ] ; variable_11 -> variable_30 %= sizeof ( variable_11 -> variable_32 ) ; variable_9 ++ ; variable_27 -- ; if ( variable_27 ) int variable_33 = fread ( variable_26 , 1 , variable_27 , variable_34 ) ; if ( variable_33 >= 0 ) return variable_9 + variable_33 ; if ( variable_9 > 0 ) return variable_9 ; return variable_33 ; if ( variable_9 ) return variable_9 ; if ( variable_28 ) return variable_35 ; return 0 ; if ( variable_9 != 2 ) variable_8 = variable_36 ; return variable_7 ; variable_8 = variable_37 ; return variable_8 ; if ( variable_8 == variable_36 ) return variable_7 ; if ( variable_8 != variable_7 ) return variable_8 ; while ( 1 ) char variable_19 [ 1024 ] ; char variable_38 [ 1024 ] ; char variable_39 [ 1024 ] ; int variable_40 = 0 ; char variable_41 [ 1024 ] ; char variable_42 [ 1024 ] ; variable_38 [ 0 ] = 0 ; variable_39 [ 0 ] = 0 ; variable_41 [ 0 ] = 0 ; variable_24 = 0 ; variable_14 = 0 ; variable_9 = func_13 ( variable_11 , variable_19 , 2 ) ; int func_14 ( mpStreamPtr variable_11 , char * variable_26 , int variable_27 ) int variable_28 = variable_27 ; int variable_9 = 0 ; if ( variable_27 > ( variable_13 - variable_11 -> variable_29 ) ) variable_27 = variable_13 - variable_11 -> variable_29 ; while ( variable_27 ) if ( variable_11 -> variable_30 != variable_11 -> variable_31 ) * variable_26 ++ = variable_11 -> variable_32 [ variable_11 -> variable_30 ++ ] ; variable_11 -> variable_30 %= sizeof ( variable_11 -> variable_32 ) ; variable_9 ++ ; variable_27 -- ; if ( variable_27 ) int variable_33 = fread ( variable_26 , 1 , variable_27 , variable_34 ) ; if ( variable_33 >= 0 ) return variable_9 + variable_33 ; if ( variable_9 > 0 ) return variable_9 ; return variable_33 ; if ( variable_9 ) return variable_9 ; if ( variable_28 ) return variable_35 ; return 0 ; if ( variable_9 < 2 ) if ( ( variable_19 [ 0 ] == ' - ' ) && ( variable_19 [ 1 ] == ' - ' ) ) if ( ! func_15 ( variable_38 , " form - data " ) ) static int func_16 ( char * variable_5 , char * variable_6 ) while ( 1 ) if ( ! ( * variable_5 ) ) if ( ! ( * variable_6 ) ) return 1 ; return 0 ; if ( ! ( * variable_6 ) ) return 0 ; if ( isalpha ( * variable_5 ) ) if ( tolower ( * variable_5 ) != tolower ( * variable_6 ) ) return 0 ; if ( ( * variable_5 ) != ( * variable_6 ) ) return 0 ; variable_5 ++ ; variable_6 ++ ; variable_8 = func_17 ( variable_11 , 0 , 0 , 0 , 0 ) ; cgiParseResultType func_18 ( mpStreamPtr variable_11 , FILE * variable_14 , char int * variable_15 , int variable_16 ) int variable_17 = 256 ; cgiParseResultType variable_8 ; int variable_18 ; int variable_9 ; char variable_19 [ 2 ] ; char variable_20 [ 1024 ] ; char * variable_21 = variable_20 ; int variable_22 ; if ( ( ! variable_14 ) && ( variable_23 ) ) variable_24 = ( char * ) malloc ( variable_17 ) ; if ( ! variable_24 ) variable_18 = 0 ; sprintf ( variable_20 , " \r \n -- %s " , variable_25 ) ; if ( variable_16 ) variable_21 = variable_20 + 2 ; variable_22 = strlen ( variable_21 ) ; while ( 1 ) variable_9 = func_19 ( variable_11 , variable_19 , 1 ) ; if ( variable_9 != 1 ) variable_8 = variable_36 ; if ( variable_19 [ 0 ] == variable_21 [ variable_18 ] ) variable_18 ++ ; if ( variable_18 == variable_22 ) if ( variable_18 > 0 ) variable_18 = 0 ; variable_9 = func_20 ( variable_11 , variable_19 , 2 ) ; if ( variable_9 != 2 ) variable_8 = variable_36 ; return variable_7 ; variable_8 = variable_37 ; return variable_8 ; if ( variable_8 != variable_7 ) return variable_8 ; if ( strlen ( variable_41 ) ) if ( func_21 ( variable_10 ) != variable_7 ) static cgiParseResultType func_22 ( char * variable_10 ) int variable_43 ; strcpy ( variable_10 , variable_44 " / cgicXXXXXX " ) variable_43 = func_23 ( variable_10 ) ; if ( variable_43 == - 1 ) return variable_36 ; if ( func_24 ( variable_10 , 0600 ) != 0 ) return variable_36 ; return variable_7 ; return variable_36 ; variable_14 = fopen ( variable_10 , " w + b " ) ; variable_14 = 0 ; variable_8 = func_25 ( variable_11 , variable_14 , & variable_24 , & variable_40 , 0 ) ; cgiParseResultType func_26 ( mpStreamPtr variable_11 , FILE * variable_14 , char int * variable_15 , int variable_16 ) int variable_17 = 256 ; cgiParseResultType variable_8 ; int variable_18 ; int variable_9 ; char variable_19 [ 2 ] ; char variable_20 [ 1024 ] ; char * variable_21 = variable_20 ; int variable_22 ; if ( ( ! variable_14 ) && ( variable_23 ) ) variable_24 = ( char * ) malloc ( variable_17 ) ; if ( ! variable_24 ) variable_18 = 0 ; sprintf ( variable_20 , " \r \n -- %s " , variable_25 ) ; if ( variable_16 ) variable_21 = variable_20 + 2 ; variable_22 = strlen ( variable_21 ) ; while ( 1 ) variable_9 = func_27 ( variable_11 , variable_19 , 1 ) ; if ( variable_9 != 1 ) variable_8 = variable_36 ; if ( variable_19 [ 0 ] == variable_21 [ variable_18 ] ) variable_18 ++ ; if ( variable_18 == variable_22 ) if ( variable_18 > 0 ) variable_18 = 0 ; variable_9 = func_28 ( variable_11 , variable_19 , 2 ) ; if ( variable_9 != 2 ) variable_8 = variable_36 ; return variable_7 ; variable_8 = variable_37 ; return variable_8 ; if ( variable_8 != variable_7 ) return variable_8 ; variable_45 = ( cgiFormEntry * ) malloc ( sizeof ( variable_46 ) ) ; if ( ! variable_45 ) memset ( variable_45 , 0 , sizeof ( variable_46 ) ) ; variable_45 -> variable_47 = ( char * ) malloc ( strlen ( variable_39 ) + 1 ) ; if ( ! variable_45 -> variable_47 ) if ( variable_24 ) if ( variable_14 ) variable_45 -> variable_48 = ( char * ) malloc ( 1 ) ; if ( ! variable_45 -> variable_48 ) variable_45 -> variable_48 [ 0 ] = ' \0 ' ; variable_45 -> variable_49 = variable_40 ; variable_45 -> variable_50 = 0 ; variable_45 -> variable_51 = ( char * ) malloc ( strlen ( variable_41 ) + 1 ) ; if ( ! variable_45 -> variable_51 ) strcpy ( variable_45 -> variable_51 , variable_41 ) ; variable_45 -> variable_52 = ( char * ) malloc ( strlen ( variable_42 ) + 1 ) ; if ( ! variable_45 -> variable_52 ) strcpy ( variable_45 -> variable_52 , variable_42 ) ; variable_45 -> variable_10 = ( char * ) malloc ( strlen ( variable_10 ) + 1 ) ; if ( ! variable_45 -> variable_10 ) return variable_7 ; return variable_37 ; func_29 ( 500 , " Error reading form data " ) ; void func_30 ( int variable_53 , char * variable_54 ) fprintf ( variable_55 , " Status : %d %s \r \n \r \n " , variable_53 , variable_54 ) ;

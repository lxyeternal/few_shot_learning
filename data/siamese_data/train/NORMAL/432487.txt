 static void func_0 ( ) variable_0 * variable_1 ; variable_0 * variable_2 = ( twoIntsStruct * ) func_1 ( 100 * sizeof ( variable_0 ) ) ; if ( variable_3 != 5 ) variable_1 = variable_2 ; twoIntsStruct variable_4 [ 100 ] ; size_t variable_5 ; for ( variable_5 = 0 ; variable_5 < 100 ; variable_5 ++ ) variable_4 [ variable_5 ] . variable_6 = 0 ; variable_4 [ variable_5 ] . variable_6 = 0 ; memmove ( variable_1 , variable_4 , 100 * sizeof ( variable_0 ) ) ; func_2 ( & variable_1 [ 0 ] ) ; void func_3 ( const twoIntsStruct * variable_7 ) printf ( " %d -- %d \n " , variable_7 -> variable_6 , variable_7 -> variable_8 ) ;
 static int func_0 ( struct variable_0 * variable_1 , variable_2 * variable_3 , int variable_4 ) int variable_5 ; int variable_6 ; int variable_7 ; int variable_8 [ 16 ] ; variable_6 = 0 ; if ( variable_6 + 2 > variable_4 ) variable_6 += 2 ; if ( ( variable_5 = func_1 ( variable_3 , variable_4 , & variable_6 , & variable_9 , & variable_7 ) ) != 0 ) if ( variable_6 + 1 > variable_4 ) if ( ( variable_3 [ variable_6 ++ ] & 0 variable_10 ) == 0 ) if ( variable_7 > variable_11 ) memset ( variable_8 , 0 , sizeof ( variable_8 ) ) ; variable_8 [ variable_12 ] = variable_13 ; variable_1 -> variable_14 [ variable_12 ] . variable_15 = variable_16 ; variable_1 -> variable_14 [ variable_12 ] . variable_17 = variable_18 ; if ( ( variable_5 = func_2 ( variable_3 , variable_4 , & variable_6 , & variable_19 , & variable_1 -> variable_14 [ variable_12 ] . variable_20 [ variable_21 ] ) ) != 0 ) if ( variable_1 -> variable_14 [ variable_12 ] . variable_20 [ variable_21 ] > variable_11 ) memcpy ( variable_1 -> variable_14 [ variable_12 ] . variable_22 [ variable_21 ] , variable_19 , variable_1 -> variable_14 [ variable_12 ] . variable_20 [ variable_21 ] ) ; for ( variable_23 = 0 ; variable_23 < variable_1 -> variable_14 [ variable_12 ] . variable_20 [ variable_21 ] ; variable_23 ++ ) for ( variable_24 = variable_12 ; variable_24 != ( ( variable_12 - ( 16 - variable_16 * variable_18 ) ) & variable_25 ) ; variable_24 = ( variable_24 - 1 ) & variable_25 ) if ( variable_1 -> variable_14 [ variable_24 ] . variable_20 [ 0 ] <= 0 ) for ( variable_26 = 0 ; variable_26 < variable_1 -> variable_14 [ variable_24 ] . variable_17 ; variable_26 ++ ) variable_27 = ( variable_24 + variable_26 ) & variable_25 ; for ( variable_28 = - 1 , variable_29 = ( variable_27 - variable_1 -> variable_14 [ variable_24 ] . variable_15 * variable_1 -> variable_14 [ variable_24 ] . variable_17 ) & variable_25 ; variable_29 != variable_27 ; variable_29 = ( variable_29 + variable_1 -> variable_14 [ variable_24 ] . variable_17 ) & variable_25 ) if ( variable_1 -> variable_14 [ variable_29 ] . variable_30 <= 0 ) variable_28 = ( variable_28 == - 1 ) ? variable_29 : - 2 ; if ( variable_28 >= 0 ) for ( variable_23 = 0 ; variable_23 < variable_1 -> variable_14 [ variable_24 ] . variable_20 [ variable_26 ] ; variable_23 ++ ) variable_1 -> variable_14 [ variable_28 ] . variable_3 [ variable_23 ] = variable_1 -> variable_14 [ variable_24 ] . variable_22 [ variable_26 ] [ variable_23 ] ; for ( variable_29 = ( variable_27 - variable_1 -> variable_14 [ variable_24 ] . variable_15 * variable_1 -> variable_14 [ variable_24 ] . variable_17 ) & variable_25 ; variable_29 != variable_27 ; variable_29 = ( variable_29 + variable_1 -> variable_14 [ variable_24 ] . variable_17 ) & variable_25 ) variable_1 -> variable_14 [ variable_28 ] . variable_3 [ variable_23 ] ^= ( variable_1 -> variable_14 [ variable_29 ] . variable_30 > variable_23 ) ? variable_1 -> variable_14 [ variable_29 ] . variable_3 [ variable_23 ] : 0 ; variable_1 -> variable_14 [ variable_28 ] . variable_30 = variable_1 -> variable_14 [ variable_24 ] . variable_20 [ variable_26 ] ; variable_8 [ variable_28 ] = variable_13 ; for ( variable_24 = ( variable_12 + 1 ) & variable_25 , variable_23 = variable_31 - variable_25 ; variable_24 != variable_12 ; variable_24 = ( variable_24 + 1 ) & variable_25 , variable_23 ++ ) if ( variable_8 [ variable_24 ] ) variable_1 -> variable_32 [ variable_33 ] . variable_34 = variable_35 ; variable_1 -> variable_32 [ variable_33 ] . variable_36 = variable_37 ; variable_1 -> variable_32 [ variable_33 ] . variable_38 = 0 ; variable_1 -> variable_32 [ variable_33 ] . variable_39 = variable_23 ; variable_1 -> variable_32 [ variable_33 ] . variable_40 = variable_1 -> variable_14 [ variable_24 ] . variable_30 ; variable_1 -> variable_32 [ variable_33 ] . variable_19 = variable_1 -> variable_14 [ variable_24 ] . variable_3 ; variable_1 -> variable_32 [ variable_33 ] . variable_41 = 0 ; variable_1 -> variable_32 [ variable_33 ] . variable_42 = " UDPTL " ; if ( variable_33 > 0 ) func_3 ( & variable_1 -> variable_32 [ variable_33 - 1 ] , variable_43 ) = & variable_1 -> variable_32 [ variable_33 ] ; func_4 ( & variable_1 -> variable_32 [ variable_33 ] , variable_43 ) = NULL ; variable_33 ++ ; if ( variable_31 >= variable_1 -> variable_44 ) variable_1 -> variable_32 [ variable_33 ] . variable_34 = variable_35 ; variable_1 -> variable_32 [ variable_33 ] . variable_36 = variable_37 ; variable_1 -> variable_32 [ variable_33 ] . variable_38 = 0 ; variable_1 -> variable_32 [ variable_33 ] . variable_39 = variable_31 ; variable_1 -> variable_32 [ variable_33 ] . variable_40 = variable_7 ; variable_1 -> variable_32 [ variable_33 ] . variable_19 = ( uint8_t * ) variable_9 ; variable_1 -> variable_32 [ variable_33 ] . variable_41 = 0 ; variable_1 -> variable_32 [ variable_33 ] . variable_42 = " UDPTL " ; if ( variable_33 > 0 ) func_5 ( & variable_1 -> variable_32 [ variable_33 - 1 ] , variable_43 ) = & variable_1 -> variable_32 [ variable_33 ] ; func_6 ( & variable_1 -> variable_32 [ variable_33 ] , variable_43 ) = NULL ; variable_33 ++ ; variable_1 -> variable_44 = variable_31 + 1 ; return variable_33 ;

 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = L " " variable_0 = variable_1 ; if ( variable_2 ) WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = wcslen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = func_4 ( variable_16 ) ; variable_5 . variable_17 = func_5 ( variable_18 ) ; if ( func_6 ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) variable_4 = recv ( variable_8 , ( char * ) ( variable_0 + variable_6 ) , sizeof ( wchar_t ) * ( 100 - variable_6 - 1 ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( wchar_t ) ] = L ' \0 ' while ( 0 ) HMODULE variable_20 ; variable_20 = func_7 ( variable_0 ) ; if ( variable_20 != NULL ) FreeLibrary ( variable_20 ) ;
 static func_0 ( variable_0 * variable_1 , void * variable_2 , variable_3 * MutableHandleValue variable_4 , MutableHandleValue variable_5 ) SharedStubInfo func_1 ( variable_1 , variable_2 , variable_6 -> func_2 ( ) ) ; variable_7 < variable_3 * > func_3 ( variable_8 , variable_9 . func_4 ( ) , variable_6 ) ; variable_10 * variable_11 = variable_9 . func_5 ( ) ; JSOp variable_12 = func_6 ( * variable_11 ) ; func_7 ( variable_1 , variable_13 , " GetProp ( %s ) " , variable_14 [ variable_12 ] ) ;  func_8 ( variable_0 * variable_1 , variable_15 * variable_13 , const char * variable_16 , . . . ) if ( func_9 ( variable_17 ) ) char variable_18 [ 100 ] ; va_list variable_19 ; vsnprintf ( variable_18 , 100 , variable_16 , variable_19 ) ; func_10 ( variable_17 " Fallback hit for ( %s : % " variable_20 " ) ( pc = % " variable_20 " , line = %d , uses = %d , stubs = % " variable_20 " ) : %s " variable_21 -> func_11 ( ) variable_21 -> func_12 ( ) variable_21 -> func_13 ( variable_11 ) func_14 ( variable_21 , variable_11 ) variable_21 -> func_15 ( ) variable_13 -> func_16 ( ) variable_18 )

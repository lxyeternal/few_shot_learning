 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; if ( variable_2 == 5 ) size_t variable_3 = strlen ( variable_0 ) ; if ( 100 - variable_3 > 1 ) if ( fgets ( variable_0 + variable_3 , ( int ) ( 100 - variable_3 ) , variable_4 ) != NULL ) variable_3 = strlen ( variable_0 ) ; if ( variable_3 > 0 && variable_0 [ variable_3 - 1 ] == ' \n ' ) variable_0 [ variable_3 - 1 ] = ' \0 ' ; variable_0 [ variable_3 ] = ' \0 ' ; variable_5 = func_1 ( variable_0 ) ; if ( variable_5 != NULL ) FreeLibrary ( variable_5 ) ;
 static int func_0 ( variable_0 * variable_1 ) uint8_t variable_2 [ variable_3 ] ; int variable_4 , variable_5 , variable_6 = - 1 ; RangeCoder * const variable_7 = & variable_1 -> variable_8 [ 0 ] -> variable_7 memset ( variable_2 , 128 , sizeof ( variable_2 ) ) ; if ( variable_1 -> variable_9 < 2 ) int variable_10 , variable_11 , variable_12 , variable_13 ; unsigned variable_14 = func_1 ( variable_7 , variable_2 , 0 ) ; if ( variable_14 >= 2 ) variable_1 -> variable_9 = variable_14 ; variable_1 -> variable_15 = variable_1 -> variable_16 -> variable_17 = func_2 ( variable_7 , variable_2 , 0 ) ; if ( variable_1 -> variable_15 > 1 ) for ( variable_4 = 1 ; variable_4 < 256 ; variable_4 ++ ) variable_1 -> variable_18 [ variable_4 ] = func_3 ( variable_7 , variable_2 , 1 ) + variable_7 -> variable_19 [ variable_4 ] ; variable_1 -> variable_20 = func_4 ( variable_7 , variable_2 , 0 ) ; if ( variable_1 -> variable_9 > 0 ) variable_1 -> variable_16 -> variable_21 = func_5 ( variable_7 , variable_2 , 0 ) ; variable_10 = func_6 ( variable_7 , variable_2 ) ; variable_11 = func_7 ( variable_7 , variable_2 , 0 ) ; variable_12 = func_8 ( variable_7 , variable_2 , 0 ) ; variable_13 = func_9 ( variable_7 , variable_2 ) ; if ( variable_1 -> variable_22 ) if ( variable_10 != variable_1 -> variable_10 || variable_11 != variable_1 -> variable_11 || variable_12 != variable_1 -> variable_12 || variable_13 != variable_1 -> variable_13 ) variable_1 -> variable_10 = variable_10 ; variable_1 -> variable_11 = variable_11 ; variable_1 -> variable_12 = variable_12 ; variable_1 -> variable_13 = variable_13 ; variable_1 -> variable_22 = 2 + variable_1 -> variable_13 ; if ( variable_1 -> variable_20 == 0 ) if ( ! variable_1 -> variable_13 && ! variable_1 -> variable_10 ) if ( variable_1 -> variable_16 -> variable_21 <= 8 ) variable_1 -> variable_16 -> variable_23 = variable_24 ; variable_1 -> variable_16 -> variable_23 = variable_25 ; if ( variable_1 -> variable_16 -> variable_21 <= 8 && ! variable_1 -> variable_13 ) switch ( 16 * variable_1 -> variable_11 + variable_1 -> variable_12 ) variable_1 -> variable_16 -> variable_23 = variable_26 ; variable_1 -> variable_16 -> variable_23 = variable_27 ; variable_1 -> variable_16 -> variable_23 = variable_28 ; variable_1 -> variable_16 -> variable_23 = variable_29 ; variable_1 -> variable_16 -> variable_23 = variable_30 ; variable_1 -> variable_16 -> variable_23 = variable_31 ; if ( variable_1 -> variable_16 -> variable_21 <= 8 && variable_1 -> variable_13 ) switch ( 16 * variable_1 -> variable_11 + variable_1 -> variable_12 ) variable_1 -> variable_16 -> variable_23 = variable_32 ; variable_1 -> variable_16 -> variable_23 = variable_33 ; variable_1 -> variable_16 -> variable_23 = variable_34 ; if ( variable_1 -> variable_16 -> variable_21 == 9 ) variable_1 -> variable_35 = 1 ; switch ( 16 * variable_1 -> variable_11 + variable_1 -> variable_12 ) variable_1 -> variable_16 -> variable_23 = variable_36 ; variable_1 -> variable_16 -> variable_23 = variable_37 ; variable_1 -> variable_16 -> variable_23 = variable_38 ; if ( variable_1 -> variable_16 -> variable_21 == 10 ) variable_1 -> variable_35 = 1 ; switch ( 16 * variable_1 -> variable_11 + variable_1 -> variable_12 ) variable_1 -> variable_16 -> variable_23 = variable_39 ; variable_1 -> variable_16 -> variable_23 = variable_40 ; variable_1 -> variable_16 -> variable_23 = variable_41 ; switch ( 16 * variable_1 -> variable_11 + variable_1 -> variable_12 ) variable_1 -> variable_16 -> variable_23 = variable_42 ; variable_1 -> variable_16 -> variable_23 = variable_43 ; variable_1 -> variable_16 -> variable_23 = variable_44 ; if ( variable_1 -> variable_20 == 1 ) if ( variable_1 -> variable_11 || variable_1 -> variable_12 ) if ( variable_1 -> variable_16 -> variable_21 == 9 ) variable_1 -> variable_16 -> variable_23 = variable_45 ; if ( variable_1 -> variable_16 -> variable_21 == 10 ) variable_1 -> variable_16 -> variable_23 = variable_46 ; if ( variable_1 -> variable_16 -> variable_21 == 12 ) variable_1 -> variable_16 -> variable_23 = variable_47 ; if ( variable_1 -> variable_16 -> variable_21 == 14 ) variable_1 -> variable_16 -> variable_23 = variable_48 ; if ( variable_1 -> variable_13 ) variable_1 -> variable_16 -> variable_23 = variable_49 ; variable_1 -> variable_16 -> variable_23 = variable_50 ; if ( variable_1 -> variable_9 < 2 ) variable_6 = func_10 ( variable_7 , variable_1 -> variable_51 ) ; if ( variable_6 < 0 ) if ( variable_1 -> variable_9 < 3 ) variable_1 -> variable_52 = func_11 ( variable_7 , variable_2 , 0 ) ; const uint8_t * variable_53 = variable_7 -> variable_54 ; for ( variable_1 -> variable_52 = variable_1 -> variable_52 < variable_55 && 3 < variable_53 - variable_1 -> variable_52 ++ ) int variable_56 = 3 + 5 * ! ! variable_1 -> variable_57 ; int variable_58 = func_12 ( variable_53 - variable_56 ) ; if ( variable_58 + variable_56 > variable_53 - variable_7 -> variable_59 ) variable_53 -= variable_58 + variable_56 ; if ( variable_1 -> variable_52 > ( unsigned ) variable_55 || variable_1 -> variable_52 <= 0 ) for ( variable_5 = 0 ; variable_5 < variable_1 -> variable_52 ; variable_5 ++ ) variable_0 * variable_60 = variable_1 -> variable_8 [ variable_5 ] ; variable_60 -> variable_15 = variable_1 -> variable_15 ; variable_60 -> variable_35 = variable_1 -> variable_35 ; variable_60 -> variable_61 = 0 ; if ( variable_1 -> variable_9 == 2 ) variable_60 -> variable_62 = func_13 ( variable_7 , variable_2 , 0 ) * variable_1 -> variable_63 ; variable_60 -> variable_64 = func_14 ( variable_7 , variable_2 , 0 ) * variable_1 -> variable_65 ; variable_60 -> variable_66 = ( func_15 ( variable_7 , variable_2 , 0 ) + 1 ) * variable_1 -> variable_63 + variable_60 -> variable_62 ; variable_60 -> variable_67 = ( func_16 ( variable_7 , variable_2 , 0 ) + 1 ) * variable_1 -> variable_65 + variable_60 -> variable_64 ; variable_60 -> variable_62 /= variable_1 -> variable_68 ; variable_60 -> variable_64 /= variable_1 -> variable_69 ; variable_60 -> variable_66 = variable_60 -> variable_66 / variable_1 -> variable_68 - variable_60 -> variable_62 ; variable_60 -> variable_67 = variable_60 -> variable_67 / variable_1 -> variable_69 - variable_60 -> variable_64 ; if ( ( unsigned ) variable_60 -> variable_66 > variable_1 -> variable_63 || ( unsigned ) variable_60 -> variable_67 > variable_1 -> variable_65 ) if ( ( unsigned ) variable_60 -> variable_62 + ( variable_70 ) variable_60 -> variable_66 > variable_1 -> variable_63 || ( unsigned ) variable_60 -> variable_64 + ( variable_70 ) variable_60 -> variable_67 > variable_1 -> variable_65 ) for ( variable_4 = 0 ; variable_4 < variable_1 -> variable_22 ; variable_4 ++ ) PlaneContext * const variable_53 = & variable_60 -> variable_71 [ variable_4 ] if ( variable_1 -> variable_9 == 2 ) int variable_72 = func_17 ( variable_7 , variable_2 , 0 ) ; if ( variable_72 > ( unsigned ) variable_1 -> variable_73 ) variable_53 -> variable_74 = variable_72 ; variable_6 = variable_1 -> variable_6 [ variable_72 ] ; memcpy ( variable_53 -> variable_51 , variable_1 -> variable_51 , sizeof ( variable_53 -> variable_51 ) ) ; if ( variable_1 -> variable_9 <= 2 ) if ( variable_53 -> variable_6 < variable_6 ) func_18 ( & variable_53 -> variable_2 ) ; func_19 ( & variable_53 -> variable_75 ) ; variable_53 -> variable_6 = variable_6 ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; if ( variable_2 ) WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = func_4 ( variable_16 ) ; variable_5 . variable_17 = func_5 ( variable_18 ) ; if ( func_6 ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) variable_4 = recv ( variable_8 , ( char * ) ( variable_0 + variable_6 ) , sizeof ( char ) * ( 100 - variable_6 - 1 ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( char ) ] = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \r ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \n ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; while ( 0 ) if ( variable_8 != variable_12 ) func_7 ( variable_8 ) ; variable_21 = func_8 ( variable_0 ) ; if ( variable_21 != NULL ) FreeLibrary ( variable_21 ) ;
 variable_0 * func_0 ( const char * * variable_1 , const char * variable_2 , variable_3 * variable_4 ) variable_5 * variable_6 ; variable_0 * variable_7 ; variable_0 * variable_8 = func_1 ( & variable_6 , variable_4 ) ; static variable_0 * func_2 ( variable_5 * * variable_9 , variable_3 * variable_4 ) return func_3 ( variable_9 , variable_10 , ( variable_11 ? variable_10 : ( ( const char * ) 1 ) ) , variable_12 , variable_4 ) ; static variable_0 * func_4 ( variable_5 * * variable_9 , const char * variable_13 , const char * variable_14 , const char * variable_15 , variable_3 * variable_4 ) variable_5 * variable_16 = ( ( void * ) 0 ) ; if ( variable_15 ) if ( variable_17 ) if ( variable_15 == variable_12 ) variable_16 = ( func_5 ( & variable_18 , ( ( void * ) 0 ) ) ) ; if ( variable_15 == variable_19 ) variable_16 = ( func_6 ( & variable_20 , ( ( void * ) 0 ) ) ) ; if ( variable_16 && variable_16 -> variable_21 ) return 0 ; void * variable_22 ; variable_16 = variable_22 ; if ( variable_16 && variable_16 -> variable_21 ) return 0 ; return func_7 ( variable_9 , variable_13 , variable_14 , variable_4 ) ; static variable_0 * func_8 ( variable_5 * * variable_9 , const char * variable_13 , const char * variable_14 , variable_3 * variable_4 ) apr_status_t variable_23 ; const char * variable_24 ; if ( ! ( variable_14 != ( ( const char * ) 0 ) && variable_13 != ( ( const char * ) 0 ) && ( variable_14 != ( ( const char * ) 1 ) || variable_13 != ( ( const char * ) 1 ) ) ) ) variable_0 * variable_8 = func_9 ( ! 0 , "  utf . c " , 222 , " frompage != SVN_APR_DEFAULT_CHARSET && topage != SVN_APR_DEFAULT_CHARSET && ( frompage != SVN_APR_LOCALE_CHARSET || topage != SVN_APR_LOCALE_CHARSET ) " ) ; if ( variable_8 ) return variable_8 ; while ( 0 ) while ( 0 ) if ( variable_23 == 22 || variable_23 == 20000 + 50000 + 23 ) if ( variable_23 != 0 ) const char * variable_25 ; char variable_26 [ 512 ] ; if ( variable_14 == ( ( const char * ) 1 ) ) variable_25 = ( func_10 ( variable_4 , ( func_11 ( " subversion " , " Can ' t create a character converter from native encoding to ' %s ' " ) ) , variable_13 ) ) ; if ( variable_13 == ( ( const char * ) 1 ) ) variable_25 = ( func_12 ( variable_4 , ( func_13 ( " subversion " , " Can ' t create a character converter from ' %s ' to native encoding " ) ) , variable_14 ) ) ; variable_25 = ( func_14 ( variable_4 , ( func_15 ( " subversion " , " Can ' t create a character converter from ' %s ' to ' %s ' " ) ) , variable_14 , variable_13 ) ) ; return func_16 ( variable_27 , func_17 ( variable_23 , ( ( void * ) 0 ) , variable_26 ) , " %s %s " , variable_24 , variable_25 ) ; return 0 ; variable_28 * variable_29 = variable_30 ; variable_0 * variable_8 = func_18 ( variable_29 ) ; if ( variable_8 ) return variable_8 ; while ( 0 ) variable_0 * variable_8 = func_19 ( variable_29 , func_20 ( variable_9 , variable_13 , variable_14 , variable_15 , variable_4 ) ) ; static variable_0 * func_21 ( variable_5 * * variable_9 , const char * variable_13 , const char * variable_14 , const char * variable_15 , variable_3 * variable_4 ) if ( variable_15 && variable_17 ) variable_5 * variable_16 = ( ( void * ) 0 ) ; variable_5 * * variable_31 = ( func_22 ( variable_17 , variable_15 , ( - 1 ) ) ) ; if ( variable_31 ) variable_16 = * variable_31 ; if ( variable_16 ) if ( variable_16 -> variable_21 ) return 0 ; variable_4 = func_23 ( variable_17 ) ; return func_24 ( variable_9 , variable_13 , variable_14 , variable_4 ) ; static variable_0 * func_25 ( variable_5 * * variable_9 , const char * variable_13 , const char * variable_14 , variable_3 * variable_4 ) apr_status_t variable_23 ; const char * variable_24 ; if ( ! ( variable_14 != ( ( const char * ) 0 ) && variable_13 != ( ( const char * ) 0 ) && ( variable_14 != ( ( const char * ) 1 ) || variable_13 != ( ( const char * ) 1 ) ) ) ) variable_0 * variable_8 = func_26 ( ! 0 , "  utf . c " , 222 , " frompage != SVN_APR_DEFAULT_CHARSET && topage != SVN_APR_DEFAULT_CHARSET && ( frompage != SVN_APR_LOCALE_CHARSET || topage != SVN_APR_LOCALE_CHARSET ) " ) ; if ( variable_8 ) return variable_8 ; while ( 0 ) while ( 0 ) if ( variable_23 == 22 || variable_23 == 20000 + 50000 + 23 ) if ( variable_23 != 0 ) const char * variable_25 ; char variable_26 [ 512 ] ; if ( variable_14 == ( ( const char * ) 1 ) ) variable_25 = ( func_27 ( variable_4 , ( func_28 ( " subversion " , " Can ' t create a character converter from native encoding to ' %s ' " ) ) , variable_13 ) ) ; if ( variable_13 == ( ( const char * ) 1 ) ) variable_25 = ( func_29 ( variable_4 , ( func_30 ( " subversion " , " Can ' t create a character converter from ' %s ' to native encoding " ) ) , variable_14 ) ) ; variable_25 = ( func_31 ( variable_4 , ( func_32 ( " subversion " , " Can ' t create a character converter from ' %s ' to ' %s ' " ) ) , variable_14 , variable_13 ) ) ; return func_33 ( variable_27 , func_34 ( variable_23 , ( ( void * ) 0 ) , variable_26 ) , " %s %s " , variable_24 , variable_25 ) ; return 0 ; if ( variable_8 ) return variable_8 ; while ( 0 ) while ( 0 ) return 0 ; if ( variable_8 ) while ( 0 ) variable_7 = func_35 ( variable_1 , variable_2 , variable_6 , variable_4 ) ; static variable_0 * func_36 ( const char * * variable_1 , const char * variable_2 , variable_5 * variable_6 , variable_3 * variable_4 ) if ( variable_6 -> variable_32 ) variable_0 * variable_8 = func_37 ( variable_6 , variable_2 , strlen ( variable_2 ) , & variable_33 , variable_4 ) ; static variable_0 * func_38 ( variable_5 * variable_6 , const char * variable_34 , apr_size_t variable_35 , variable_36 * * variable_1 , variable_3 * variable_4 ) if ( variable_23 ) const char * variable_25 ; variable_0 * variable_7 ; if ( variable_6 -> variable_14 == ( ( const char * ) 1 ) ) variable_25 = ( func_39 ( variable_4 , ( func_40 ( " subversion " , " Can ' t convert string from native encoding to ' %s ' : " ) ) , variable_6 -> variable_13 ) ) ; if ( variable_6 -> variable_13 == ( ( const char * ) 1 ) ) variable_25 = ( func_41 ( variable_4 , ( func_42 ( " subversion " , " Can ' t convert string from ' %s ' to native encoding : " ) ) , variable_6 -> variable_14 ) ) ; variable_25 = ( func_43 ( variable_4 , ( func_44 ( " subversion " , " Can ' t convert string from ' %s ' to ' %s ' : " ) ) , variable_6 -> variable_14 , variable_6 -> variable_13 ) ) ; variable_7 = func_45 ( variable_23 , ( ( void * ) 0 ) , func_46 ( variable_34 , variable_35 , variable_4 ) ) ; static const char * func_47 ( const char * variable_2 , apr_size_t variable_37 , variable_3 * variable_4 ) const char * variable_38 ; return variable_38 ; return func_48 ( variable_23 , variable_7 , variable_25 ) ; return 0 ; if ( variable_8 ) return variable_8 ; while ( 0 ) apr_size_t variable_37 = strlen ( variable_2 ) ; variable_0 * variable_8 = func_49 ( variable_2 , variable_37 , variable_4 ) ; static variable_0 * func_50 ( const char * variable_39 , apr_size_t variable_37 , variable_3 * variable_4 ) const char * variable_40 = variable_39 ; for ( ; variable_37 > 0 ; ( -- variable_37 , variable_39 ++ ) ) if ( ! ( 0 != ( variable_41 [ ( unsigned char ) ( * variable_39 ) ] & 0 variable_42 ) ) || ! ( 0 != ( variable_41 [ ( unsigned char ) ( * variable_39 ) ] & 0 variable_43 ) ) && 0 != ( variable_41 [ ( unsigned char ) ( * variable_39 ) ] & 0 variable_44 ) ) if ( variable_39 - variable_40 ) const char * variable_45 = ( func_51 ( variable_4 , variable_40 , ( variable_39 - variable_40 ) ) ) ; return func_52 ( 22 , ( ( void * ) 0 ) , ( func_53 ( " subversion " , " Safe data ' %s ' was followed by non - ASCII byte %d : unable to convert to / from UTF - 8 " ) ) , variable_45 , ( * ( ( const unsigned char * ) variable_39 ) ) ) ; return func_54 ( 22 , ( ( void * ) 0 ) , ( func_55 ( " subversion " , " Non - ASCII character ( code %d ) detected , and unable to convert to / from UTF - 8 " ) ) , ( * ( ( const unsigned char * ) variable_39 ) ) ) ; return 0 ; if ( variable_8 ) return variable_8 ; while ( 0 ) return 0 ; variable_0 * variable_8 = func_56 ( variable_7 , func_57 ( variable_6 , variable_12 , variable_4 ) ) ; static variable_0 * func_58 ( variable_5 * variable_6 , const char * variable_15 , variable_3 * variable_4 ) if ( ! variable_15 ) return 0 ; if ( variable_17 ) if ( variable_15 == variable_12 ) variable_6 = ( func_59 ( & variable_18 , variable_6 ) ) ; if ( variable_15 == variable_19 ) variable_6 = ( func_60 ( & variable_20 , variable_6 ) ) ; if ( variable_6 == ( ( void * ) 0 ) ) return 0 ; variable_28 * variable_29 = variable_30 ; variable_0 * variable_8 = func_61 ( variable_29 ) ; if ( variable_8 ) return variable_8 ; while ( 0 ) variable_0 * variable_8 = func_62 ( variable_29 , func_63 ( variable_6 , variable_15 ) ) ; static variable_0 * func_64 ( variable_5 * variable_6 , const char * variable_15 ) return 0 ; if ( variable_8 ) return variable_8 ; while ( 0 ) while ( 0 ) return 0 ; if ( variable_8 ) while ( 0 ) return func_65 ( * variable_1 , variable_4 ) ; static variable_0 * func_66 ( const char * variable_39 , variable_3 * variable_4 ) if ( ! func_67 ( variable_39 ) ) return func_68 ( variable_39 , strlen ( variable_39 ) , variable_4 ) ;
 void func_0 ( int variable_0 ) char * variable_1 ; if ( func_1 ( & variable_2 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) variable_1 = getenv ( " RECOMPLIANCE_ADONIZED " ) ; if ( variable_1 != 0 ) variable_3 = ( ( char * ) variable_1 ) ; * variable_4 = variable_3 ; * variable_5 = variable_3 ; strncpy ( ( char * ) variable_6 , variable_3 , 39 ) ; variable_6 [ 39 ] = 0 ; for ( variable_7 = 0 ; variable_7 < strlen ( variable_3 ) ; variable_7 ++ ) if ( variable_3 [ variable_7 ] > 96 ) variable_8 = variable_3 [ variable_7 ] - ' a ' + 36 ; if ( variable_9 [ variable_8 ] < 255 ) variable_9 [ variable_8 ] ++ ; if ( variable_3 [ variable_7 ] < 58 ) variable_8 = variable_3 [ variable_7 ] - 48 ; func_3 ( variable_10 , variable_11 , " stonesoup_index " , variable_8 , & variable_8 , " TRIGGER - STATE " ) ; if ( variable_9 [ variable_8 ] < 255 ) variable_9 [ variable_8 ] ++ ; variable_8 = variable_3 [ variable_7 ] - ' A ' + 10 ; if ( variable_9 [ variable_8 ] < 255 ) variable_9 [ variable_8 ] ++ ; func_4 ( " index %d : %d \n " , variable_7 , variable_9 [ variable_7 ] ) ; void func_5 ( char * variable_12 , . . . ) va_start ( variable_13 , variable_12 ) ; vfprintf ( variable_14 , variable_12 , variable_13 ) ; func_6 ( " %d %d \n " , strlen ( * variable_4 ) , strlen ( * variable_5 ) ) ; void func_7 ( char * variable_12 , . . . ) va_start ( variable_13 , variable_12 ) ; vfprintf ( variable_14 , variable_12 , variable_13 ) ; if ( variable_4 != 0 ) free ( variable_4 ) ; if ( variable_9 != 0 ) free ( variable_9 ) ; if ( variable_5 != 0 ) free ( variable_5 ) ;

 void func_0 ( ) int variable_0 ; CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_67_structType variable_1 ; variable_0 = - 1 ; variable_0 = - 1 ; variable_1 . variable_2 = variable_0 ; func_1 ( variable_1 ) ; void func_2 ( CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_67_structType variable_1 ) int variable_0 = variable_1 . variable_2 ; char variable_3 [ 100 ] ; char variable_4 [ 100 ] = " " ; memset ( variable_3 , ' A ' , 100 - 1 ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; if ( variable_0 < 100 ) memcpy ( variable_4 , variable_3 , variable_0 ) ; variable_4 [ variable_0 ] = ' \0 ' ; func_3 ( variable_4 ) ; void func_4 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ;
 int func_0 ( struct variable_0 * variable_1 , struct variable_2 * variable_2 , int variable_3 ) struct variable_4 * variable_5 ; variable_6 * variable_7 , * variable_8 = NULL ; variable_5 = func_1 ( variable_2 , NULL ) ; if ( variable_5 == NULL ) variable_7 = ( irq_guest_action_t * ) variable_5 -> variable_7 ; if ( ! ( variable_5 -> variable_9 & variable_10 ) ) if ( variable_5 -> variable_7 != NULL ) if ( variable_8 == NULL ) if ( ( variable_8 = xmalloc ( variable_6 ) ) != NULL && func_2 ( & variable_8 -> variable_11 ) ) func_3 ( variable_8 ) ; variable_7 = variable_8 ; variable_5 -> variable_7 = ( struct irqaction * ) variable_7 ; variable_7 -> variable_12 = 0 ; variable_7 -> variable_13 = 0 ; variable_7 -> variable_14 = variable_3 ; variable_7 -> variable_15 = func_4 ( variable_1 -> variable_16 , variable_2 -> variable_2 ) ; func_5 ( & variable_7 -> variable_17 , variable_18 , variable_5 , 0 ) ; variable_5 -> variable_9 |= variable_10 ; variable_5 -> variable_9 &= ~ variable_19 ; variable_5 -> variable_20 -> func_6 ( variable_5 ) ; if ( ! variable_21 && ( variable_5 -> variable_20 -> variable_22 != NULL ) ) variable_5 -> variable_20 -> func_7 ( variable_5 , func_8 ( variable_1 -> variable_23 ) ) ; if ( ! variable_3 || ! variable_7 -> variable_14 ) if ( variable_7 -> variable_12 == 0 ) if ( variable_7 -> variable_12 == variable_24 ) variable_7 -> variable_25 [ variable_7 -> variable_12 ++ ] = variable_1 -> variable_16 ; if ( variable_7 -> variable_15 != variable_26 ) if ( variable_8 != NULL ) func_9 ( variable_8 -> variable_11 ) ; func_10 ( variable_8 ) ;

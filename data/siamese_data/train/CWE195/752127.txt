 void func_0 ( ) int variable_0 ; variable_0 = - 1 ; if ( func_1 ( ) ) int func_2 ( ) return ( rand ( ) % 2 ) ; variable_0 = - 1 ; variable_0 = 100 - 1 ; char variable_1 [ 100 ] ; char variable_2 [ 100 ] = " " ; memset ( variable_1 , ' A ' , 100 - 1 ) ; variable_1 [ 100 - 1 ] = ' \0 ' ; if ( variable_0 < 100 ) strncpy ( variable_2 , variable_1 , variable_0 ) ; variable_2 [ variable_0 ] = ' \0 ' ; func_3 ( variable_2 ) ; void func_4 ( const char * variable_3 ) if ( variable_3 != NULL ) printf ( " %s \n " , variable_3 ) ;
 void func_0 ( int variable_0 , char * * variable_1 ) variable_0 -- ; if ( variable_0 > 0 ) func_1 ( variable_0 , variable_1 ) ; void func_2 ( int variable_0 , char * * variable_1 ) variable_0 -- ; if ( variable_0 > 0 ) func_3 ( variable_0 , variable_1 ) ; void func_4 ( int variable_0 , char * * variable_1 ) variable_0 -- ; if ( variable_0 > 0 ) func_5 ( variable_0 , variable_1 ) ; void func_6 ( int variable_0 , char * * variable_1 ) int variable_2 ; variable_0 -- ; if ( variable_0 > 0 ) variable_3 = ( ( char * ) ( ( char * * ) variable_1 ) [ 0 ] ) ; variable_2 = atoi ( variable_3 ) ; if ( variable_2 < 4096 ) variable_4 = ( ( char * ) ( malloc ( 4096 * sizeof ( char ) ) ) ) ; if ( variable_4 != 0 ) memset ( variable_4 , ' a ' , 4096 ) ; memset ( & variable_4 [ variable_2 ] , ' b ' , 4096 - variable_2 ) ; variable_4 [ 4095 ] = 0 ; func_7 ( " %s \n " , variable_4 ) ; void func_8 ( char * variable_5 , . . . ) va_start ( variable_6 , variable_5 ) ; vfprintf ( variable_7 , variable_5 , variable_6 ) ; free ( variable_4 ) ;

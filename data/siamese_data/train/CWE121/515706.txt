 void func_0 ( ) char * variable_0 ; char * * variable_1 = & variable_0 ; char variable_2 [ 100 ] ; variable_0 = variable_2 ; char * variable_0 = * variable_1 ; memset ( variable_0 , ' A ' , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; * variable_1 = variable_0 ; memmove ( variable_3 , variable_0 , strlen ( variable_0 ) * sizeof ( char ) ) ; variable_3 [ 50 - 1 ] = ' \0 ' ; func_1 ( variable_0 ) ; void func_2 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 static int func_0 ( variable_0 * variable_1 , variable_0 * variable_2 ) MpegEncContext * const variable_3 = & variable_1 -> MpegEncContext * const variable_4 = & variable_2 -> variable_3 unsigned int variable_5 ; unsigned int variable_6 ; int variable_7 , variable_8 ; unsigned int variable_9 , variable_10 , variable_11 , variable_12 ; int variable_13 , variable_14 ; int variable_15 ; int variable_16 = 0 ; if ( ( variable_3 -> variable_17 -> variable_18 & variable_19 ) && ! variable_1 -> variable_20 && ! variable_1 -> variable_21 ) variable_3 -> variable_22 . variable_23 = variable_3 -> variable_24 . variable_25 ; variable_3 -> variable_22 . variable_26 = variable_3 -> variable_24 . variable_27 ; variable_5 = func_1 ( & variable_3 -> variable_28 ) ; if ( variable_5 == 0 ) variable_2 -> variable_29 = 0 ; if ( ! variable_4 -> variable_30 ) variable_3 -> variable_31 = NULL ; variable_9 = func_2 ( & variable_3 -> variable_28 ) ; if ( variable_9 > 9 ) if ( variable_9 > 4 ) variable_9 -= 5 ; variable_1 -> variable_32 = 0 ; variable_9 = variable_33 [ variable_9 ] ; variable_1 -> variable_9 = variable_9 ; variable_1 -> variable_34 = variable_9 & 3 ; variable_3 -> variable_35 = variable_1 -> variable_9 ; variable_6 = func_3 ( & variable_3 -> variable_28 ) ; if ( variable_6 >= variable_36 ) if ( ! variable_2 -> variable_37 [ variable_6 ] ) variable_1 -> variable_38 = * variable_2 -> variable_37 [ variable_6 ] ; if ( ! variable_2 -> variable_39 [ variable_1 -> variable_38 . variable_40 ] ) variable_41 * variable_42 = variable_2 -> variable_39 [ variable_1 -> variable_38 . variable_40 ] ; variable_2 -> variable_39 [ variable_1 -> variable_38 . variable_40 ] -> new = 0 if ( variable_1 -> variable_43 . variable_44 != variable_42 -> variable_44 || variable_1 -> variable_43 . variable_45 != variable_42 -> variable_45 ) variable_16 = 1 ; variable_1 -> variable_46 = variable_1 -> variable_38 . variable_40 ; variable_1 -> variable_43 = * variable_2 -> variable_39 [ variable_1 -> variable_38 . variable_40 ] ; if ( variable_3 -> variable_47 != variable_1 -> variable_43 . variable_47 || variable_3 -> variable_48 != variable_1 -> variable_43 . variable_48 * ( 2 - variable_1 -> variable_43 . variable_49 ) || variable_3 -> variable_17 -> variable_50 != variable_1 -> variable_43 . variable_45 || variable_1 -> variable_51 != variable_1 -> variable_43 . variable_44 ) variable_16 = 1 ; if ( ( variable_8 = func_4 ( variable_1 ) ) < 0 ) variable_3 -> variable_17 -> variable_52 = func_5 ( & variable_1 -> variable_43 ) ; variable_3 -> variable_17 -> variable_53 = variable_1 -> variable_43 . variable_54 ; variable_3 -> variable_17 -> variable_55 = variable_1 -> variable_43 . variable_56 ; variable_15 = ( variable_3 -> variable_57 && ( 16 * variable_1 -> variable_43 . variable_47 != variable_3 -> variable_17 -> variable_58 || 16 * variable_1 -> variable_43 . variable_48 * ( 2 - variable_1 -> variable_43 . variable_49 ) != variable_3 -> variable_17 -> variable_59 || variable_3 -> variable_17 -> variable_50 != variable_1 -> variable_43 . variable_45 || variable_1 -> variable_51 != variable_1 -> variable_43 . variable_44 || func_6 ( variable_1 -> variable_43 . variable_60 , variable_3 -> variable_17 -> variable_61 ) ) ) ; if ( variable_2 -> variable_3 . variable_17 -> variable_62 != func_7 ( variable_2 ) ) variable_15 = 1 ; variable_3 -> variable_47 = variable_1 -> variable_43 . variable_47 ; variable_3 -> variable_48 = variable_1 -> variable_43 . variable_48 * ( 2 - variable_1 -> variable_43 . variable_49 ) ; variable_1 -> variable_63 = variable_3 -> variable_47 * 4 ; variable_3 -> variable_64 = variable_1 -> variable_43 . variable_44 <= 1 ; variable_3 -> variable_65 = 16 * variable_3 -> variable_47 ; variable_3 -> variable_66 = 16 * variable_3 -> variable_48 ; if ( variable_1 -> variable_43 . variable_67 ) variable_3 -> variable_17 -> variable_68 = variable_1 -> variable_43 . variable_69 > 0 ? variable_70 : variable_71 ; if ( variable_1 -> variable_43 . variable_72 ) if ( variable_3 -> variable_17 -> variable_73 != variable_1 -> variable_43 . variable_73 ) variable_16 = 1 ; variable_3 -> variable_17 -> variable_74 = variable_1 -> variable_43 . variable_74 ; variable_3 -> variable_17 -> variable_75 = variable_1 -> variable_43 . variable_75 ; variable_3 -> variable_17 -> variable_73 = variable_1 -> variable_43 . variable_73 ; if ( variable_3 -> variable_57 && ( variable_16 || variable_15 ) ) if ( variable_1 != variable_2 ) if ( ( variable_8 = func_8 ( variable_1 ) ) < 0 ) variable_3 -> variable_17 -> variable_62 = variable_8 ; if ( ( variable_8 = func_9 ( variable_1 , 1 ) ) < 0 ) variable_1 -> variable_76 = 1 ; if ( ! variable_3 -> variable_57 ) if ( variable_1 != variable_2 ) if ( ( variable_8 = func_10 ( variable_1 ) ) < 0 ) variable_3 -> variable_17 -> variable_62 = variable_8 ; if ( ( variable_8 = func_11 ( variable_1 , 0 ) ) < 0 ) if ( variable_1 == variable_2 && variable_1 -> variable_77 != variable_6 ) variable_1 -> variable_77 = variable_6 ; variable_1 -> variable_78 = func_12 ( & variable_3 -> variable_28 , variable_1 -> variable_43 . variable_79 ) ; variable_1 -> variable_80 = 0 ; variable_1 -> variable_81 = 0 ; variable_13 = variable_4 -> variable_82 ; variable_14 = variable_4 -> variable_83 ; variable_3 -> variable_83 = variable_1 -> variable_20 == 0 ; if ( variable_1 -> variable_43 . variable_49 ) variable_3 -> variable_82 = variable_84 ; if ( ! variable_1 -> variable_43 . variable_85 && variable_9 == variable_86 ) if ( func_13 ( & variable_3 -> variable_28 ) ) variable_3 -> variable_82 = variable_87 + func_14 ( & variable_3 -> variable_28 ) ; variable_3 -> variable_82 = variable_84 ; variable_1 -> variable_81 = variable_1 -> variable_43 . variable_88 ; variable_1 -> variable_89 = variable_3 -> variable_82 != variable_84 ; if ( variable_2 -> variable_29 != 0 ) if ( variable_1 -> variable_78 != variable_1 -> variable_90 && variable_1 -> variable_90 >= 0 ) int variable_91 = variable_1 -> variable_90 ; int variable_92 = 1 << variable_1 -> variable_43 . variable_79 ; if ( variable_91 > variable_1 -> variable_78 ) variable_91 -= variable_92 ; if ( ( variable_1 -> variable_78 - variable_91 ) > variable_1 -> variable_43 . variable_56 ) variable_91 = ( variable_1 -> variable_78 - variable_1 -> variable_43 . variable_56 ) - 1 ; if ( variable_91 < 0 ) variable_91 += variable_92 ; variable_1 -> variable_90 = variable_91 ; if ( variable_4 -> variable_30 ) if ( ! variable_93 || variable_3 -> variable_82 == variable_13 ) if ( variable_4 -> variable_31 -> variable_78 != variable_1 -> variable_78 ) if ( ! ( ( variable_13 == variable_87 && variable_3 -> variable_82 == variable_94 ) || ( variable_13 == variable_94 && variable_3 -> variable_82 == variable_87 ) ) ) if ( variable_14 != variable_3 -> variable_83 ) variable_3 -> variable_82 = variable_13 ; variable_3 -> variable_83 = variable_14 ; variable_4 -> variable_31 -> variable_95 = variable_4 ; while ( variable_1 -> variable_78 != variable_1 -> variable_90 && variable_1 -> variable_90 >= 0 && ! variable_4 -> variable_30 && variable_1 -> variable_78 != ( variable_1 -> variable_90 + 1 ) % ( 1 << variable_1 -> variable_43 . variable_79 ) ) if ( func_15 ( variable_1 ) < 0 ) variable_1 -> variable_90 ++ ; variable_1 -> variable_90 %= 1 << variable_1 -> variable_43 . variable_79 ; variable_3 -> variable_31 -> variable_78 = variable_1 -> variable_90 ; if ( ( variable_8 = func_16 ( variable_1 , 1 ) ) < 0 && variable_3 -> variable_17 -> variable_96 & variable_97 ) if ( func_17 ( variable_1 , variable_1 -> variable_98 , variable_1 -> variable_99 ) < 0 && ( variable_3 -> variable_17 -> variable_96 & variable_97 ) ) if ( variable_4 -> variable_30 ) assert ( variable_4 -> variable_31 -> variable_100 . variable_101 [ 0 ] ) ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] ; variable_0 = variable_1 ; if ( variable_2 ) memset ( variable_0 , ' A ' , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; memmove ( variable_3 , variable_0 , strlen ( variable_0 ) * sizeof ( char ) ) ; variable_3 [ 50 - 1 ] = ' \0 ' ; func_1 ( variable_0 ) ; void func_2 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 Size func_0 ( ) int variable_0 ; char * * variable_1 ; int variable_2 ; char variable_3 [ 80 ] ; char * variable_4 ; long variable_5 [ 10 ] ; union malars_sochor variable_6 [ 10 ] = { 0 } ; union malars_sochor variable_7 ; char * variable_8 ; if ( func_1 ( & variable_9 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_8 != 0 ) variable_7 . variable_10 = variable_8 ; variable_6 [ 5 ] = variable_7 ; variable_5 [ 1 ] = 5 ; variable_11 = * ( variable_6 + variable_5 [ 1 ] ) ; variable_12 = ( ( char * ) variable_11 . variable_10 ) ; variable_2 = strtol ( variable_12 , & variable_4 , 10 ) ; if ( variable_2 > 0 && variable_2 < 1000 ) variable_1 = malloc ( variable_2 * sizeof ( char * ) ) ; for ( variable_0 = 0 ; variable_0 < variable_2 ; ++ variable_0 ) variable_1 [ variable_0 ] = 0 ; for ( variable_0 = 0 ; variable_0 < variable_2 ; ++ variable_0 ) if ( sscanf ( variable_4 , " % 79s " , variable_3 ) == 1 ) variable_1 [ variable_0 ] = ( ( char * ) ( malloc ( ( strlen ( variable_3 ) + 1 ) * sizeof ( char ) ) ) ) ; if ( variable_1 [ variable_0 ] == 0 ) strcpy ( variable_1 [ variable_0 ] , variable_3 ) ; variable_4 += ( strlen ( variable_3 ) + 1 ) * sizeof ( char ) ; func_3 ( variable_13 , variable_14 , " stonesoup_values [ stonesoup_i ] " , variable_1 [ variable_0 ] , " TRIGGER - STATE " ) ; fputs ( variable_1 [ variable_0 ] , variable_15 ) ; func_4 ( variable_1 [ variable_0 ] ) ; void func_5 ( char * variable_16 , . . . ) va_start ( variable_17 , variable_16 ) ; vfprintf ( variable_18 , variable_16 , variable_17 ) ; if ( variable_1 [ variable_0 ] != 0 ) free ( variable_1 [ variable_0 ] ) ;

 void func_0 ( ) wchar_t * variable_0 ; variable_0 = NULL ; if ( func_1 ( ) ) int func_2 ( ) return 1 ; variable_0 = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ; wchar_t variable_1 [ 10 + 1 ] = variable_2 ; memmove ( variable_0 , variable_1 , ( wcslen ( variable_1 ) + 1 ) * sizeof ( wchar_t ) ) ; func_3 ( variable_0 ) ; void func_4 ( const wchar_t * variable_3 ) if ( variable_3 != NULL ) wprintf ( L " % ls \n " , variable_3 ) free ( variable_0 ) ;
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) guint variable_6 , variable_7 = 0 ; guint8 variable_8 , variable_9 , variable_10 [ 48 ] ; gboolean variable_11 = variable_12 ; variable_6 = func_1 ( variable_1 ) ; variable_13 = func_2 ( variable_5 , variable_14 , variable_1 , 0 , variable_6 , " GSM CBCH Schedule Message " ) ; variable_15 = func_3 ( variable_13 , variable_16 ) ; variable_17 = func_4 ( variable_1 , variable_7 ) ; if ( 0 == ( variable_17 & 0 variable_18 ) ) variable_8 = variable_17 & 0 variable_19 ; func_5 ( variable_15 , variable_20 , variable_1 , variable_7 ++ , 1 , variable_21 ) ; if ( 1 == variable_8 ) if ( ( 2 <= variable_8 ) && ( 48 >= variable_8 ) ) variable_11 = variable_22 ; variable_9 = func_6 ( variable_1 , variable_7 ) ; if ( variable_9 < variable_8 ) variable_11 = variable_22 ; if ( variable_11 ) memset ( & variable_10 , 0 variable_23 , sizeof ( variable_10 ) ) ; variable_10 [ variable_24 ++ ] = ( variable_25 << 3 ) + variable_26 + 1 ; variable_27 = func_7 ( variable_15 , variable_1 , variable_7 - 6 , 6 , "  This schedule contains %d slots with new messages " , variable_24 ) ; variable_28 = func_8 ( variable_27 , variable_29 ) ; for ( variable_25 = 0 ; variable_25 < variable_24 ; variable_25 ++ ) func_9 ( variable_10 [ variable_25 ] < 48 ) ; variable_17 = func_10 ( variable_1 , variable_7 ) ; if ( ( variable_17 & 0 variable_30 ) == 0 variable_30 ) variable_31 = func_11 ( variable_1 , variable_7 + 1 ) ; variable_32 = ( ( variable_17 & 0 variable_33 ) << 8 ) + variable_31 ; func_12 ( variable_28 , variable_1 , variable_7 , 2 , "  Slot : %d , Message ID : %d , First transmission of an SMSCB within the Schedule Period " , variable_10 [ variable_25 ] , variable_32 ) ; variable_7 += 2 ; variable_34 [ variable_10 [ variable_25 ] - 1 ] = variable_32 ; if ( ( variable_17 & 0 variable_18 ) == 0 ) if ( variable_17 < variable_10 [ variable_25 ] ) func_13 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d , Message ID : %d , Repeat of Slot %d " , variable_10 [ variable_25 ] , variable_34 [ variable_17 - 1 ] , variable_17 ) ; variable_34 [ variable_10 [ variable_25 ] - 1 ] = variable_34 [ variable_17 - 1 ] ; func_14 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d , Apparent forward reference to slot %d " , variable_10 [ variable_25 ] , variable_17 ) ; if ( variable_17 == 0 variable_35 ) func_15 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d Free Message Slot , optional reading " , variable_10 [ variable_24 ] ) ; variable_34 [ variable_10 [ variable_25 ] - 1 ] = 0 variable_36 ; if ( variable_17 == 0 variable_37 ) func_16 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d Free Message Slot , reading advised " , variable_10 [ variable_24 ] ) ; variable_34 [ variable_10 [ variable_25 ] - 1 ] = 0 variable_36 ; func_17 ( variable_28 , variable_1 , variable_7 , 1 , "  Slot : %d reserved MDT : % x " , variable_10 [ variable_24 ] , variable_17 ) ; variable_34 [ variable_10 [ variable_25 ] - 1 ] = 0 variable_36 ; func_18 ( variable_27 , variable_1 , variable_7 ) ; variable_27 = func_19 ( variable_15 , variable_1 , variable_7 , 0 , "  Other message slots in this schedule " ) ; variable_28 = func_20 ( variable_27 , variable_29 ) ; for ( variable_24 = 0 ; variable_7 < variable_6 ; variable_26 ++ ) while ( ( variable_34 [ variable_24 ] != 0 variable_38 ) && ( variable_24 < variable_9 ) ) variable_24 ++ ; if ( variable_24 >= variable_9 ) variable_17 = func_21 ( variable_1 , variable_7 ) ; if ( ( variable_17 & 0 variable_30 ) == 0 variable_30 ) if ( ( variable_7 + 1 ) < variable_6 ) variable_31 = func_22 ( variable_1 , variable_7 + 1 ) ; variable_32 = ( ( variable_17 & 0 variable_33 ) << 8 ) + variable_31 ; variable_34 [ variable_24 ] = variable_32 ; func_23 ( variable_28 , variable_1 , variable_7 , 2 , "  Slot : %d , Message : %d , First transmission of an SMSCB within the Schedule Period " , ++ variable_24 , variable_32 ) ; variable_7 += 2 ; if ( ( variable_17 & 0 variable_18 ) == 0 ) if ( variable_17 < variable_24 ) variable_34 [ variable_24 ] = variable_34 [ variable_17 - 1 ] ; func_24 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d , Message ID : %d , Repeat of Slot %d " , ++ variable_24 , variable_34 [ variable_17 - 1 ] , variable_17 ) ; func_25 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d , Apparent forward reference to slot %d " , ++ variable_24 , variable_17 ) ; if ( variable_17 == 0 variable_35 ) func_26 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d Free Message Slot , optional reading " , ++ variable_24 ) ; if ( variable_17 == 0 variable_37 ) func_27 ( variable_28 , variable_1 , variable_7 ++ , 1 , "  Slot : %d Free Message Slot , reading advised " , ++ variable_24 ) ; func_28 ( variable_28 , variable_1 , variable_7 , 1 , "  Slot : %d reserved MDT : % x " , ++ variable_24 , variable_17 ) ; func_29 ( variable_27 , variable_1 , variable_7 ) ; func_30 ( variable_15 , variable_1 , variable_7 , - 1 , "  Padding " ) ;

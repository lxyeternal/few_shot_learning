 void func_0 ( ) int variable_0 ; char * variable_1 ; char variable_2 [ 100 ] = variable_3 ; variable_1 = variable_2 ; for ( variable_0 = 0 ; variable_0 < 1 ; variable_0 ++ ) WSADATA variable_4 ; int variable_5 ; struct sockaddr_in variable_6 ; size_t variable_7 = strlen ( variable_1 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_4 ) != variable_8 ) variable_9 = func_3 ( variable_10 , variable_11 , variable_12 ) ; if ( variable_9 == variable_13 ) memset ( & variable_6 , 0 , sizeof ( variable_6 ) ) ; variable_6 . variable_14 = variable_10 ; variable_6 . variable_15 . variable_16 = func_4 ( variable_17 ) ; variable_6 . variable_18 = func_5 ( variable_19 ) ; if ( func_6 ( variable_9 , ( struct sockaddr * ) & variable_6 , sizeof ( variable_6 ) ) == variable_20 ) variable_5 = recv ( variable_9 , ( char * ) ( variable_1 + variable_7 ) , sizeof ( char ) * ( 100 - variable_7 - 1 ) , 0 ) ; if ( variable_5 == variable_20 || variable_5 == 0 ) variable_1 [ variable_7 + variable_5 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_1 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_1 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_9 != variable_13 ) func_7 ( variable_9 ) ; if ( func_8 ( variable_1 ) <= 0 )
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) guint8 variable_6 , variable_7 , variable_8 , variable_9 ; guint32 variable_10 ; guint32 variable_11 ; variable_0 * variable_12 = NULL , * variable_13 = NULL ; variable_11 = func_1 ( variable_1 ) ; variable_10 = 0 ; variable_6 = func_2 ( variable_1 , variable_10 ) ; variable_14 = func_3 ( variable_5 , variable_15 , variable_1 , 0 , variable_11 , " GSM CBCH - Block ( 0 x % 02x ) " , variable_6 & 3 ) ; variable_16 = func_4 ( variable_14 , variable_17 ) ; variable_9 = variable_6 & 0 variable_18 ; variable_8 = ( variable_6 & 0 variable_19 ) >> 5 ; variable_7 = ( variable_6 & 0 variable_20 ) >> 4 ; if ( variable_8 == 1 ) switch ( variable_9 ) variable_3 -> variable_21 = variable_22 ; variable_23 = func_5 ( variable_1 , variable_10 , variable_3 , 0 , variable_24 , variable_25 , variable_9 & 0 variable_26 , variable_27 + 1 , ! variable_7 ) ; variable_12 = func_6 ( variable_1 , variable_10 , variable_3 , " Reassembled CBCH message " , variable_23 , & variable_28 , NULL , variable_16 ) ; variable_3 -> variable_21 = variable_22 ; variable_10 ++ ; variable_23 = func_7 ( variable_1 , variable_10 , variable_3 , 0 , variable_24 , variable_25 , variable_9 , variable_27 , ! variable_7 ) ; variable_12 = func_8 ( variable_1 , variable_10 , variable_3 , " Reassembled CBCH message " , variable_23 , & variable_28 , NULL , variable_16 ) ; if ( variable_12 ) variable_10 = 0 ; variable_6 = func_9 ( variable_12 , variable_10 ++ ) ; variable_13 = func_10 ( variable_12 , variable_10 ) ; if ( variable_6 & 0 variable_29 ) func_11 ( variable_13 , variable_3 , variable_5 ) ; static func_12 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_30 ) guint8 variable_11 , variable_31 , variable_32 , variable_33 [ 48 ] ; guint8 variable_10 = 0 ; gboolean variable_34 = variable_22 ; variable_11 = func_13 ( variable_1 ) ; variable_35 = func_14 ( variable_30 , variable_15 , variable_1 , 0 , variable_11 , " GSM CBCH Schedule Message " ) ; variable_36 = func_15 ( variable_35 , variable_37 ) ; variable_38 = func_16 ( variable_1 , variable_10 ) ; if ( 0 == ( variable_38 & 0 variable_39 ) ) variable_31 = variable_38 & 0 variable_40 ; func_17 ( variable_36 , variable_41 , variable_1 , variable_10 ++ , 1 , variable_42 ) ; if ( 1 == variable_31 ) if ( ( 2 <= variable_31 ) && ( 48 >= variable_31 ) ) variable_34 = variable_43 ; variable_32 = func_18 ( variable_1 , variable_10 ) ; if ( variable_32 < variable_31 ) variable_34 = variable_43 ; if ( variable_34 ) memset ( & variable_33 , 0 variable_44 , sizeof ( variable_33 ) ) ; variable_33 [ variable_45 ++ ] = ( variable_46 << 3 ) + variable_47 + 1 ; variable_48 = func_19 ( variable_36 , variable_1 , variable_10 - 6 , 6 , "  This schedule contains %d slots with new messages " , variable_45 ) ; variable_49 = func_20 ( variable_48 , variable_50 ) ; for ( variable_46 = 0 ; variable_46 < variable_45 ; variable_46 ++ ) func_21 ( variable_33 [ variable_46 ] < 48 ) ; variable_38 = func_22 ( variable_1 , variable_10 ) ; if ( ( variable_38 & 0 variable_51 ) == 0 variable_51 ) variable_52 = func_23 ( variable_1 , variable_10 + 1 ) ; variable_53 = ( ( variable_38 & 0 variable_54 ) << 8 ) + variable_52 ; func_24 ( variable_49 , variable_1 , variable_10 , 2 , "  Slot : %d , Message ID : %d , First transmission of an SMSCB within the Schedule Period " , variable_33 [ variable_46 ] , variable_53 ) ; variable_10 += 2 ; variable_55 [ variable_33 [ variable_46 ] - 1 ] = variable_53 ; if ( ( variable_38 & 0 variable_39 ) == 0 ) if ( variable_38 < variable_33 [ variable_46 ] ) func_25 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d , Message ID : %d , Repeat of Slot %d " , variable_33 [ variable_46 ] , variable_55 [ variable_38 - 1 ] , variable_38 ) ; variable_55 [ variable_33 [ variable_46 ] - 1 ] = variable_55 [ variable_38 - 1 ] ; func_26 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d , Apparent forward reference to slot %d " , variable_33 [ variable_46 ] , variable_38 ) ; if ( variable_38 == 0 variable_56 ) func_27 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d Free Message Slot , optional reading " , variable_33 [ variable_45 ] ) ; variable_55 [ variable_33 [ variable_46 ] - 1 ] = 0 variable_57 ; if ( variable_38 == 0 variable_58 ) func_28 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d Free Message Slot , reading advised " , variable_33 [ variable_45 ] ) ; variable_55 [ variable_33 [ variable_46 ] - 1 ] = 0 variable_57 ; func_29 ( variable_49 , variable_1 , variable_10 , 1 , "  Slot : %d reserved MDT : % x " , variable_33 [ variable_45 ] , variable_38 ) ; variable_55 [ variable_33 [ variable_46 ] - 1 ] = 0 variable_57 ; func_30 ( variable_48 , variable_1 , variable_10 ) ; variable_48 = func_31 ( variable_36 , variable_1 , variable_10 , 0 , "  Other message slots in this schedule " ) ; variable_49 = func_32 ( variable_48 , variable_50 ) ; for ( variable_45 = 0 ; variable_10 < variable_11 ; variable_47 ++ ) while ( ( variable_55 [ variable_45 ] != 0 variable_59 ) && ( variable_45 < variable_32 ) ) variable_45 ++ ; if ( variable_45 >= variable_32 ) variable_38 = func_33 ( variable_1 , variable_10 ) ; if ( ( variable_38 & 0 variable_51 ) == 0 variable_51 ) if ( ( variable_10 + 1 ) < variable_11 ) variable_52 = func_34 ( variable_1 , variable_10 + 1 ) ; variable_53 = ( ( variable_38 & 0 variable_54 ) << 8 ) + variable_52 ; variable_55 [ variable_45 ] = variable_53 ; func_35 ( variable_49 , variable_1 , variable_10 , 2 , "  Slot : %d , Message : %d , First transmission of an SMSCB within the Schedule Period " , ++ variable_45 , variable_53 ) ; variable_10 += 2 ; if ( ( variable_38 & 0 variable_39 ) == 0 ) if ( variable_38 < variable_45 ) variable_55 [ variable_45 ] = variable_55 [ variable_38 - 1 ] ; func_36 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d , Message ID : %d , Repeat of Slot %d " , ++ variable_45 , variable_55 [ variable_38 - 1 ] , variable_38 ) ; func_37 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d , Apparent forward reference to slot %d " , ++ variable_45 , variable_38 ) ; if ( variable_38 == 0 variable_56 ) func_38 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d Free Message Slot , optional reading " , ++ variable_45 ) ; if ( variable_38 == 0 variable_58 ) func_39 ( variable_49 , variable_1 , variable_10 ++ , 1 , "  Slot : %d Free Message Slot , reading advised " , ++ variable_45 ) ; func_40 ( variable_49 , variable_1 , variable_10 , 1 , "  Slot : %d reserved MDT : % x " , ++ variable_45 , variable_38 ) ; func_41 ( variable_48 , variable_1 , variable_10 ) ; func_42 ( variable_36 , variable_1 , variable_10 , - 1 , "  Padding " ) ;

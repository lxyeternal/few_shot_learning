 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ variable_2 ] = L " " variable_0 = variable_1 ; WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = wcslen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = variable_16 ; variable_5 . variable_17 = func_4 ( variable_18 ) ; if ( bind ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) if ( func_5 ( variable_8 , variable_20 ) == variable_19 ) variable_21 = func_6 ( variable_8 , NULL , NULL ) ; if ( variable_21 == variable_19 ) variable_4 = recv ( variable_21 , ( char * ) ( variable_0 + variable_6 ) , sizeof ( wchar_t ) * ( variable_2 - variable_6 - 1 ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( wchar_t ) ] = L ' \0 ' while ( 0 ) FILE * variable_22 = NULL ; variable_22 = func_7 ( variable_0 , L " wb + " ) if ( variable_22 != NULL ) fclose ( variable_22 ) ;
 void func_0 ( int variable_0 ) char variable_1 [ 150 ] ; char * variable_2 ; if ( func_1 ( & variable_3 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_2 != 0 ) variable_4 = getenv ( " DBPGHOST " ) ; variable_5 = getenv ( " DBPGUSER " ) ; variable_6 = getenv ( " DBPGPASSWORD " ) ; variable_7 = getenv ( " DBPGPORT " ) ; variable_8 = getenv ( " SS_DBPGDATABASE " ) ; if ( variable_4 != 0 && variable_7 != 0 && variable_5 != 0 && variable_6 != 0 && variable_8 != 0 ) snprintf ( variable_1 , 150 , " dbname = %s host = %s user = %s password = %s port = %s " , variable_8 , variable_4 , variable_5 , variable_6 , variable_7 ) ; variable_9 = func_3 ( variable_1 ) ; if ( func_4 ( variable_9 ) != 0 ) func_5 ( " %s : %s \n " , " Connection to database failed " , func_6 ( variable_9 ) ) ; void func_7 ( char * variable_10 , . . . ) va_start ( variable_11 , variable_10 ) ; vfprintf ( variable_12 , variable_10 , variable_11 ) ; func_8 ( variable_9 ) ; variable_13 = func_9 ( variable_9 , variable_14 ) ; if ( func_10 ( variable_13 ) != 2 ) func_11 ( " %s : %s \n " , " SELECT failed " , func_12 ( variable_9 ) ) ; void func_13 ( char * variable_10 , . . . ) va_start ( variable_11 , variable_10 ) ; vfprintf ( variable_12 , variable_10 , variable_11 ) ; func_14 ( variable_13 ) ; func_15 ( variable_9 ) ; variable_15 = func_16 ( variable_13 ) ; for ( variable_16 = 0 ; variable_16 < variable_15 ; variable_16 ++ ) func_17 ( " % - 15s " , func_18 ( variable_13 , variable_16 ) ) ; void func_19 ( char * variable_10 , . . . ) va_start ( variable_11 , variable_10 ) ; vfprintf ( variable_12 , variable_10 , variable_11 ) ; for ( variable_16 = 0 ; variable_16 < func_20 ( variable_13 ) ; variable_16 ++ ) for ( variable_17 = 0 ; variable_17 < variable_15 ; variable_17 ++ ) func_21 ( " % - 15s " , func_22 ( variable_13 , variable_16 , variable_17 ) ) ; void func_23 ( char * variable_10 , . . . ) va_start ( variable_11 , variable_10 ) ; vfprintf ( variable_12 , variable_10 , variable_11 ) ; func_24 ( variable_13 ) ; func_25 ( variable_9 ) ;

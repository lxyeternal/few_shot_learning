 void func_0 ( ) char * variable_0 ; variable_0 = NULL ; variable_0 = func_1 ( variable_0 ) ; char * func_2 ( char * variable_0 ) if ( variable_1 ) char * variable_2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( variable_2 , ' A ' , 100 - 1 ) ; variable_2 [ 100 - 1 ] = ' \0 ' ; variable_0 = variable_2 - 8 ; return variable_0 ; char variable_3 [ 100 ] ; memset ( variable_3 , ' C ' , 100 - 1 ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; strncpy ( variable_3 , variable_0 , strlen ( variable_3 ) ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; func_3 ( variable_3 ) ; void func_4 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 void func_0 ( void ( * variable_0 ) ( void * * ) ) char variable_1 [ 150 ] ; void * variable_2 = 0 ; if ( ( ( char * ) variable_2 ) != 0 ) variable_3 = getenv ( " DBPGHOST " ) ; variable_4 = getenv ( " DBPGUSER " ) ; variable_5 = getenv ( " DBPGPASSWORD " ) ; variable_6 = getenv ( " DBPGPORT " ) ; variable_7 = getenv ( " SS_DBPGDATABASE " ) ; if ( variable_3 != 0 && variable_6 != 0 && variable_4 != 0 && variable_5 != 0 && variable_7 != 0 ) snprintf ( variable_1 , 150 , " dbname = %s host = %s user = %s password = %s port = %s " , variable_7 , variable_3 , variable_4 , variable_5 , variable_6 ) ; variable_8 = func_1 ( variable_1 ) ; if ( func_2 ( variable_8 ) != 0 ) func_3 ( " %s : %s \n " , " Connection to database failed " , func_4 ( variable_8 ) ) ; void func_5 ( char * variable_9 , . . . ) va_start ( variable_10 , variable_9 ) ; vfprintf ( variable_11 , variable_9 , variable_10 ) ; func_6 ( variable_8 ) ; variable_12 = func_7 ( variable_8 , variable_13 ) ; if ( func_8 ( variable_12 ) != variable_14 ) func_9 ( " %s : %s \n " , " INSERT failed " , func_10 ( variable_8 ) ) ; void func_11 ( char * variable_9 , . . . ) va_start ( variable_10 , variable_9 ) ; vfprintf ( variable_11 , variable_9 , variable_10 ) ; func_12 ( variable_12 ) ; func_13 ( variable_8 ) ; variable_15 = func_14 ( variable_12 ) ; func_15 ( " Query OK , %s rows affected \n " , variable_15 ) ; void func_16 ( char * variable_9 , . . . ) va_start ( variable_10 , variable_9 ) ; vfprintf ( variable_11 , variable_9 , variable_10 ) ; func_17 ( variable_12 ) ; func_18 ( variable_8 ) ;

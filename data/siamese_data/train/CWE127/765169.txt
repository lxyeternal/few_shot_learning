 void func_0 ( char * variable_0 ) char variable_1 [ 100 ] ; memset ( variable_1 , ' C ' , 100 - 1 ) ; variable_1 [ 100 - 1 ] = ' \0 ' ; variable_1 [ variable_2 ] = variable_0 [ variable_2 ] ; variable_1 [ 100 - 1 ] = ' \0 ' ; func_1 ( variable_1 ) ; void func_2 ( const char * variable_3 ) if ( variable_3 != NULL ) printf ( " %s \n " , variable_3 ) ;
 int func_0 ( struct variable_1 struct variable_2 * variable_3 ) variable_4 -> variable_5 . variable_6 = variable_3 -> variable_6 ; if ( func_1 ( variable_4 -> variable_7 , variable_3 -> variable_8 >> variable_9 ) ) variable_4 -> variable_5 . variable_8 = variable_3 -> variable_8 ; variable_4 -> variable_5 . variable_10 = variable_3 -> variable_10 ; if ( ! func_2 ( variable_4 -> variable_7 ) ) memcpy ( variable_4 -> variable_5 . variable_11 , variable_3 -> variable_12 , sizeof variable_4 -> variable_5 . variable_11 ) ; variable_4 -> variable_5 . variable_13 = 0 ; for ( variable_14 = 0 ; variable_14 < func_3 ( variable_4 -> variable_5 . variable_11 ) ; ++ variable_14 ) if ( variable_4 -> variable_5 . variable_11 [ variable_14 ] ) func_4 ( variable_14 , & variable_4 -> variable_5 . variable_13 ) ; func_5 ( variable_4 , & variable_3 -> variable_15 , variable_16 ) ; func_6 ( variable_4 , & variable_3 -> variable_17 , variable_18 ) ; func_7 ( variable_4 , & variable_3 -> variable_19 , variable_20 ) ; func_8 ( variable_4 , & variable_3 -> variable_21 , variable_22 ) ; func_9 ( variable_4 , & variable_3 -> variable_23 , variable_24 ) ; func_10 ( variable_4 , & variable_3 -> variable_25 , variable_26 ) ; func_11 ( variable_4 , & variable_3 -> variable_27 , variable_28 ) ; func_12 ( variable_4 , & variable_3 -> variable_29 , variable_30 ) ; if ( variable_4 -> variable_31 == 0 && func_13 ( variable_4 ) == 0 variable_32 && variable_3 -> variable_15 . variable_33 == 0 variable_34 && variable_3 -> variable_15 . variable_35 == 0 variable_36 && ! ( variable_4 -> variable_5 . variable_10 & variable_37 ) ) variable_4 -> variable_5 . variable_38 = variable_39 ; func_14 ( variable_4 ) ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; if ( func_1 ( ) ) static int func_2 ( ) return 1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_5 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = func_6 ( variable_15 ) ; variable_4 . variable_16 = func_7 ( variable_17 ) ; if ( func_8 ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) variable_3 = recv ( variable_7 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_19 = strchr ( variable_0 , ' \r ' ) ; if ( variable_19 ) * variable_19 = ' \0 ' ; variable_19 = strchr ( variable_0 , ' \n ' ) ; if ( variable_19 ) * variable_19 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_9 ( variable_7 ) ; printf ( variable_0 ) ;
 variable_0 * func_0 ( variable_1 * variable_2 , const gchar * variable_3 ) char * variable_4 = 0 ; long variable_5 [ 10 ] ; union predriving_beteela variable_6 [ 10 ] = { 0 } ; union predriving_beteela variable_7 ; char * variable_8 ; if ( func_1 ( & variable_9 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_8 != 0 ) variable_7 . variable_10 = variable_8 ; variable_6 [ 5 ] = variable_7 ; variable_5 [ 1 ] = 5 ; variable_11 = * ( variable_6 + variable_5 [ 1 ] ) ; variable_12 = ( ( char * ) variable_11 . variable_10 ) ; if ( strlen ( variable_12 ) < 63 ) variable_4 = malloc ( strlen ( variable_12 + 1 ) ) ; strcpy ( variable_4 , variable_12 ) ; func_3 ( " Buffer is %s \n " , variable_4 ) ; void func_4 ( char * variable_13 , . . . ) va_start ( variable_14 , variable_13 ) ; vfprintf ( variable_15 , variable_13 , variable_14 ) ; if ( variable_4 != 0 ) free ( variable_4 ) ;

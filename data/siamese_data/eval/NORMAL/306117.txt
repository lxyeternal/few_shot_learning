 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = variable_2 ; variable_0 = variable_1 ; variable_0 = func_1 ( variable_0 ) ; static wchar_t * func_2 ( wchar_t * variable_0 ) if ( variable_3 ) size_t variable_4 = wcslen ( variable_0 ) ; if ( 100 - variable_4 > 1 ) if ( fgetws ( variable_0 + variable_4 , ( int ) ( 100 - variable_4 ) , variable_5 ) != NULL ) variable_4 = wcslen ( variable_0 ) ; if ( variable_4 > 0 && variable_0 [ variable_4 - 1 ] == L ' \n ' )
 int func_0 ( variable_0 * variable_1 , unsigned char * variable_2 , int variable_3 ) int variable_4 ; while ( variable_3 > 0 ) variable_4 = ( variable_1 -> variable_5 - variable_1 -> variable_6 ) ; if ( variable_4 > variable_3 ) variable_4 = variable_3 ; if ( variable_4 == 0 || variable_1 -> variable_7 ) if ( ( variable_1 -> variable_8 || variable_3 > variable_1 -> variable_9 ) && ! variable_1 -> variable_10 ) if ( variable_1 -> variable_11 ) variable_4 = ( ( variable_1 -> variable_11 ) ( variable_1 -> variable_12 , variable_2 , variable_3 ) ) ; if ( variable_4 <= 0 ) if ( variable_4 < 0 ) variable_1 -> variable_13 = variable_4 ; variable_1 -> variable_14 += variable_4 ; variable_1 -> variable_15 += variable_4 ; variable_3 -= variable_4 ; variable_2 += variable_4 ; variable_1 -> variable_6 = variable_1 -> variable_16 ; variable_1 -> variable_5 = variable_1 -> variable_16 ; variable_4 = ( variable_1 -> variable_5 - variable_1 -> variable_6 ) ; if ( variable_4 == 0 ) memcpy ( variable_2 , ( variable_1 -> variable_6 ) , variable_4 ) ; variable_2 += variable_4 ; variable_1 -> variable_6 += variable_4 ; variable_3 -= variable_4 ; if ( variable_17 == variable_3 ) if ( variable_1 -> variable_13 ) return variable_1 -> variable_13 ; if ( func_1 ( variable_1 ) ) int func_2 ( variable_0 * variable_1 ) if ( ! variable_1 ) if ( variable_1 -> variable_18 ) variable_1 -> variable_18 = 0 ; func_3 ( variable_1 ) ; static void func_4 ( variable_0 * variable_1 ) variable_19 * variable_20 = ! variable_1 -> variable_21 && variable_1 -> variable_5 - variable_1 -> variable_16 < ( variable_1 -> variable_9 ) ? variable_1 -> variable_5 : variable_1 -> variable_16 ; int variable_4 = ( ( variable_1 -> variable_9 ) - ( variable_20 - variable_1 -> variable_16 ) ) ; int variable_22 = variable_1 -> variable_21 ? variable_1 -> variable_21 : 32768 ; if ( ! variable_1 -> variable_11 && variable_1 -> variable_6 >= variable_1 -> variable_5 ) variable_1 -> variable_18 = 1 ; if ( variable_1 -> variable_18 ) if ( variable_1 -> variable_10 && variable_20 == variable_1 -> variable_16 ) if ( variable_1 -> variable_5 > variable_1 -> variable_23 ) variable_1 -> variable_24 = ( ( variable_1 -> variable_10 ) ( variable_1 -> variable_24 , ( variable_1 -> variable_23 ) , ( variable_1 -> variable_5 - variable_1 -> variable_23 ) ) ) ; variable_1 -> variable_23 = variable_1 -> variable_16 ; if ( variable_1 -> variable_11 && variable_1 -> variable_9 > variable_22 ) func_5 ( variable_1 , variable_22 ) ; int func_6 ( variable_0 * variable_1 , int variable_25 ) variable_16 = ( func_7 ( variable_25 ) ) ; if ( ! variable_16 ) func_8 ( ( variable_1 -> variable_16 ) ) ; variable_1 -> variable_16 = variable_16 ; variable_1 -> variable_9 = variable_25 ; variable_1 -> variable_6 = variable_16 ; func_9 ( variable_1 , ( variable_1 -> variable_7 ? 2 : 1 ) ) ; static int func_10 ( variable_0 * variable_1 , int variable_26 ) if ( variable_26 & 2 ) variable_1 -> variable_5 = variable_1 -> variable_16 + variable_1 -> variable_9 ; variable_1 -> variable_7 = 1 ; variable_1 -> variable_5 = variable_1 -> variable_16 ; variable_1 -> variable_7 = 0 ; variable_1 -> variable_23 = variable_20 = variable_1 -> variable_16 ; variable_4 = variable_1 -> variable_9 ; if ( variable_1 -> variable_11 ) variable_4 = ( ( variable_1 -> variable_11 ) ( variable_1 -> variable_12 , variable_20 , variable_4 ) ) ; if ( variable_4 <= 0 ) variable_1 -> variable_18 = 1 ; if ( variable_4 < 0 ) variable_1 -> variable_13 = variable_4 ; variable_1 -> variable_14 += variable_4 ; variable_1 -> variable_6 = variable_20 ; variable_1 -> variable_5 = variable_20 + variable_4 ; variable_1 -> variable_15 += variable_4 ; return variable_1 -> variable_18 ; return variable_17 - variable_3 ;

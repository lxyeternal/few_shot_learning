 static void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] ; wmemset ( variable_1 , L ' A ' , 100 - 1 variable_1 [ 100 - 1 ] = L ' \0 ' if ( func_1 ( ) ) int func_2 ( ) return ( rand ( ) % 2 ) ; variable_0 = variable_1 ; variable_0 = variable_1 ; wchar_t variable_2 [ 100 ] ; wmemset ( variable_2 , L ' C ' , 100 - 1 variable_2 [ 100 - 1 ] = L ' \0 ' wcscpy ( variable_0 , variable_2 ) ; func_3 ( variable_0 ) ; void func_4 ( const wchar_t * variable_3 ) if ( variable_3 != NULL ) wprintf ( L " % ls \n " , variable_3 )
 int func_0 ( variable_0 * variable_1 ) int variable_2 , variable_3 , variable_4 , variable_5 , variable_6 , variable_7 , variable_8 , variable_9 ; int variable_10 [ variable_11 ] ; variable_1 -> variable_12 = 0 ; variable_1 -> variable_13 = variable_1 -> variable_14 = 0 ; variable_1 -> variable_15 -> variable_16 = variable_7 = func_1 ( & variable_1 -> variable_17 , 8 ) ; if ( variable_1 -> variable_18 ) variable_7 = 9 ; if ( variable_7 == 9 && ! variable_1 -> variable_18 ) variable_1 -> variable_19 = 1 ; if ( variable_1 -> variable_20 && variable_1 -> variable_15 -> variable_21 ) variable_6 = func_2 ( & variable_1 -> variable_17 , 16 ) ; variable_5 = func_3 ( & variable_1 -> variable_17 , 16 ) ; if ( variable_1 -> variable_22 && variable_1 -> variable_5 == variable_5 && variable_1 -> variable_6 == variable_6 + 1 ) variable_6 = variable_1 -> variable_6 ; if ( func_4 ( variable_5 , variable_6 , 0 , variable_1 -> variable_15 ) ) variable_3 = func_5 ( & variable_1 -> variable_17 , 8 ) ; if ( variable_3 <= 0 || variable_3 > variable_11 ) if ( variable_1 -> variable_22 && ( variable_1 -> variable_23 == ! variable_1 -> variable_24 ) ) if ( variable_3 != variable_1 -> variable_3 ) if ( variable_1 -> variable_25 && ! ( variable_7 <= 8 || variable_3 == 1 ) ) memset ( variable_10 , 0 , sizeof ( variable_10 ) ) ; variable_1 -> variable_26 [ variable_4 ] = func_6 ( & variable_1 -> variable_17 , 8 ) - 1 ; variable_10 [ variable_4 ] = func_7 ( & variable_1 -> variable_17 , 4 ) ; variable_27 [ variable_4 ] = func_8 ( & variable_1 -> variable_17 , 4 ) ; if ( variable_10 [ variable_4 ] > variable_1 -> variable_28 ) variable_1 -> variable_28 = variable_10 [ variable_4 ] ; if ( variable_27 [ variable_4 ] > variable_1 -> variable_29 ) variable_1 -> variable_29 = variable_27 [ variable_4 ] ; variable_1 -> variable_30 [ variable_4 ] = func_9 ( & variable_1 -> variable_17 , 8 ) ; if ( variable_1 -> variable_30 [ variable_4 ] >= 4 ) func_10 ( variable_1 -> variable_15 , variable_31 , " quant_index is invalid \n " ) ; if ( ! variable_10 [ variable_4 ] || ! variable_27 [ variable_4 ] ) func_11 ( variable_1 -> variable_15 , variable_31 , " Invalid sampling factor in component %d %d : %d \n " , variable_4 , variable_10 [ variable_4 ] , variable_27 [ variable_4 ] ) ; func_12 ( variable_1 -> variable_15 , variable_32 , " component %d %d : %d id : %d quant : %d \n " , variable_4 , variable_10 [ variable_4 ] , variable_27 [ variable_4 ] , variable_1 -> variable_26 [ variable_4 ] , variable_1 -> variable_30 [ variable_4 ] ) ; if ( variable_1 -> variable_25 && ( variable_1 -> variable_28 > 1 || variable_1 -> variable_29 > 1 ) ) func_13 ( variable_1 -> variable_15 , " Subsampling in JPEG - LS " ) ; if ( variable_5 != variable_1 -> variable_5 || variable_6 != variable_1 -> variable_6 || variable_7 != variable_1 -> variable_7 || memcmp ( variable_1 -> variable_10 , variable_10 , sizeof ( variable_10 ) ) || memcmp ( variable_1 -> variable_27 , variable_27 , sizeof ( variable_27 ) ) ) variable_1 -> variable_5 = variable_5 ; variable_1 -> variable_6 = variable_6 ; variable_1 -> variable_7 = variable_7 ; memcpy ( variable_1 -> variable_10 , variable_10 , sizeof ( variable_10 ) ) ; memcpy ( variable_1 -> variable_27 , variable_27 , sizeof ( variable_27 ) ) ; variable_1 -> variable_22 = 0 ; variable_1 -> variable_33 = 0 ; if ( variable_1 -> variable_34 && variable_1 -> variable_35 != 0 && variable_1 -> variable_6 < ( ( variable_1 -> variable_35 * 3 ) / 4 ) ) variable_1 -> variable_22 = 1 ; variable_1 -> variable_23 = variable_1 -> variable_24 ; variable_1 -> variable_36 -> variable_37 = 1 ; variable_1 -> variable_36 -> variable_38 = ! variable_1 -> variable_24 ; variable_9 = func_14 ( variable_1 -> variable_15 , variable_5 , variable_6 ) ; if ( variable_9 < 0 ) return variable_9 ; if ( variable_1 -> variable_33 && variable_1 -> variable_22 && ( variable_1 -> variable_23 == ! variable_1 -> variable_24 ) ) if ( variable_1 -> variable_39 ) func_15 ( variable_1 -> variable_15 , " progressively coded interlaced picture " ) ; if ( variable_1 -> variable_29 == 1 && variable_1 -> variable_28 == 1 && variable_1 -> variable_20 == 1 && ( variable_3 == 3 || variable_3 == 4 ) ) if ( ! variable_1 -> variable_20 ) variable_8 = ( variable_1 -> variable_10 [ 0 ] << 28 ) | ( variable_1 -> variable_27 [ 0 ] << 24 ) | ( variable_1 -> variable_10 [ 1 ] << 20 ) | ( variable_1 -> variable_27 [ 1 ] << 16 ) | ( variable_1 -> variable_10 [ 2 ] << 12 ) | ( variable_1 -> variable_27 [ 2 ] << 8 ) | ( variable_1 -> variable_10 [ 3 ] << 4 ) | variable_1 -> variable_27 [ 3 ] ; func_16 ( variable_1 -> variable_15 , variable_32 , " pix fmt id % x \n " , variable_8 ) ; if ( ! ( variable_8 & 0 variable_40 ) ) variable_8 -= ( variable_8 & 0 variable_41 ) >> 1 ; if ( ! ( variable_8 & 0 variable_42 ) ) variable_8 -= ( variable_8 & 0 variable_43 ) >> 1 ; for ( variable_4 = 0 ; variable_4 < 8 ; variable_4 ++ ) int variable_44 = 6 + ( variable_4 & 1 ) - ( variable_4 & 6 ) ; int variable_45 = ( variable_8 >> ( 4 * variable_4 ) ) & 0 variable_46 ; int variable_47 = ( variable_8 >> ( 4 * variable_44 ) ) & 0 variable_46 ; if ( variable_45 == 1 && variable_47 != 2 && ( variable_4 < 2 || variable_4 > 5 ) ) variable_47 = ( variable_8 >> ( 8 + 4 * ( variable_4 & 1 ) ) ) & 0 variable_46 ; if ( variable_45 == 1 && variable_47 != 2 && ( variable_4 < 2 || variable_4 > 5 ) ) variable_47 = ( variable_8 >> ( 16 + 4 * ( variable_4 & 1 ) ) ) & 0 variable_46 ; if ( variable_45 == 1 && variable_47 == 2 ) if ( variable_4 & 1 ) variable_1 -> variable_13 |= 1 << ( variable_44 / 2 ) ; variable_1 -> variable_14 |= 1 << ( variable_44 / 2 ) ; switch ( variable_8 ) if ( variable_1 -> variable_48 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_7 <= 9 ? variable_50 : variable_51 ; if ( variable_1 -> variable_26 [ 0 ] == '  Q ' && variable_1 -> variable_26 [ 1 ] == '  F ' && variable_1 -> variable_26 [ 2 ] == '  A ' ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_7 <= 8 ? variable_52 : variable_53 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_55 : variable_56 ; variable_1 -> variable_15 -> variable_49 = variable_57 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; func_17 ( variable_1 -> variable_3 == 3 ) ; if ( variable_1 -> variable_48 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_7 <= 9 ? variable_61 : variable_62 ; if ( variable_1 -> variable_63 == 0 && variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_64 ; variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_7 <= 8 ? variable_65 : variable_66 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; func_18 ( variable_1 -> variable_3 == 4 ) ; if ( variable_1 -> variable_63 == 0 && variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_64 ; variable_1 -> variable_14 = 6 ; variable_1 -> variable_13 = 6 ; variable_1 -> variable_67 = variable_1 -> variable_6 ; if ( variable_1 -> variable_63 == 2 && variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_65 ; variable_1 -> variable_14 = 6 ; variable_1 -> variable_13 = 6 ; variable_1 -> variable_67 = variable_1 -> variable_6 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_68 ; variable_1 -> variable_15 -> variable_49 = variable_69 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; func_19 ( variable_1 -> variable_3 == 4 ) ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_55 : variable_56 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; variable_1 -> variable_67 = variable_1 -> variable_6 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_55 : variable_56 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; variable_1 -> variable_67 = ( variable_1 -> variable_6 + 1 ) / 2 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_70 ; variable_1 -> variable_15 -> variable_49 = variable_71 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_72 : variable_73 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; variable_1 -> variable_67 = ( variable_1 -> variable_6 + 1 ) / 2 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_74 : variable_75 ; variable_1 -> variable_15 -> variable_49 = variable_76 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_74 : variable_75 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_77 : variable_78 ; variable_1 -> variable_15 -> variable_49 = variable_79 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; if ( variable_8 == 0 variable_80 ) variable_1 -> variable_13 = 6 ; variable_1 -> variable_67 = ( variable_1 -> variable_6 + 1 ) / 2 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_1 -> variable_54 ? variable_81 : variable_82 ; variable_1 -> variable_15 -> variable_58 = variable_1 -> variable_54 ? variable_59 : variable_60 ; func_20 ( variable_1 -> variable_15 , variable_31 , " Unhandled pixel format 0 x % x \n " , variable_8 ) ; variable_1 -> variable_13 = variable_1 -> variable_14 = 0 ; if ( ( variable_1 -> variable_13 || variable_1 -> variable_14 ) && variable_1 -> variable_15 -> variable_21 ) func_21 ( variable_1 -> variable_15 , variable_31 , " lowres not supported for weird subsampling \n " ) ; if ( variable_1 -> variable_25 ) variable_1 -> variable_13 = variable_1 -> variable_14 = 0 ; if ( variable_1 -> variable_3 > 1 ) variable_1 -> variable_15 -> variable_49 = variable_83 ; if ( variable_1 -> variable_84 && variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_85 ; if ( variable_1 -> variable_7 <= 8 ) variable_1 -> variable_15 -> variable_49 = variable_70 ; variable_1 -> variable_15 -> variable_49 = variable_71 ; variable_1 -> variable_86 = func_22 ( variable_1 -> variable_15 -> variable_49 ) ; if ( ! variable_1 -> variable_86 ) func_23 ( variable_1 -> variable_15 , variable_31 , " Could not get a pixel format descriptor . \n " ) ; func_24 ( variable_1 -> variable_36 ) ; if ( func_25 ( variable_1 -> variable_15 , variable_1 -> variable_36 , variable_87 ) < 0 ) variable_1 -> variable_36 -> variable_88 = variable_89 ; variable_1 -> variable_36 -> variable_90 = 1 ; variable_1 -> variable_33 = 1 ; variable_1 -> variable_91 [ variable_4 ] = variable_1 -> variable_36 -> variable_91 [ variable_4 ] << variable_1 -> variable_22 ; func_26 ( variable_1 -> variable_15 , " %d %d %d %d %d %d \n " , variable_1 -> variable_5 , variable_1 -> variable_6 , variable_1 -> variable_91 [ 0 ] , variable_1 -> variable_91 [ 1 ] , variable_1 -> variable_22 , variable_1 -> variable_15 -> variable_6 ) ; func_27 ( variable_1 -> variable_15 , variable_32 , " decode_sof0 : error , len ( %d ) mismatch \n " , variable_2 ) ; if ( variable_1 -> variable_48 && ! variable_1 -> variable_20 && ! variable_1 -> variable_25 ) func_28 ( variable_1 -> variable_15 , variable_31 , " Unsupported coding and pixel format combination \n " ) ; if ( variable_1 -> variable_39 ) int variable_92 = ( variable_5 + variable_1 -> variable_28 * 8 - 1 ) / ( variable_1 -> variable_28 * 8 ) ; int variable_93 = ( variable_6 + variable_1 -> variable_29 * 8 - 1 ) / ( variable_1 -> variable_29 * 8 ) ; for ( variable_4 = 0 ; variable_4 < variable_1 -> variable_3 ; variable_4 ++ ) int variable_94 = variable_92 * variable_93 * variable_1 -> variable_10 [ variable_4 ] * variable_1 -> variable_27 [ variable_4 ] ; func_29 ( & variable_1 -> variable_95 [ variable_4 ] ) ; func_30 ( & variable_1 -> variable_96 [ variable_4 ] ) ; variable_1 -> variable_95 [ variable_4 ] = func_31 ( variable_94 , sizeof ( * * variable_1 -> variable_95 ) ) ; variable_1 -> variable_96 [ variable_4 ] = func_32 ( variable_94 , sizeof ( * * variable_1 -> variable_96 ) ) ; if ( ! variable_1 -> variable_95 [ variable_4 ] || ! variable_1 -> variable_96 [ variable_4 ] ) variable_1 -> variable_97 [ variable_4 ] = variable_92 * variable_1 -> variable_10 [ variable_4 ] ; memset ( variable_1 -> variable_98 , 0 , sizeof ( variable_1 -> variable_98 ) ) ;

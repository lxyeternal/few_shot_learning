 static void func_0 ( ) wchar_t * variable_0 ; wchar_t * variable_1 = ( wchar_t * ) func_1 ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; variable_0 = variable_1 ; variable_0 [ 0 ] = L ' \0 ' wchar_t variable_2 [ 10 + 1 ] = variable_3 ; memmove ( variable_0 , variable_2 , ( wcslen ( variable_2 ) + 1 ) * sizeof ( wchar_t ) ) ; func_2 ( variable_0 ) ; void func_3 ( const wchar_t * variable_4 ) if ( variable_4 != NULL ) wprintf ( L " % ls \n " , variable_4 )
 static JS_ALWAYS_INLINE variable_1 func_0 ( variable_2 * variable_3 , variable_0 * variable_4 ) variable_0 * variable_5 = NULL ; variable_6 * variable_7 ; variable_8 * variable_9 , * variable_10 ; REOp variable_11 ; const jschar * variable_12 ; size_t variable_13 , variable_14 ; size_t variable_15 = 0 ; jschar variable_16 , variable_17 ; variable_18 * variable_19 ; JSBool variable_20 ; variable_8 * variable_21 = variable_3 -> variable_22 -> variable_23 ; REOp variable_24 = ( variable_25 ) * variable_21 ++ ; if ( func_1 ( variable_24 ) && ! ( variable_3 -> variable_22 -> variable_26 & variable_27 ) ) variable_20 = variable_28 ; while ( variable_4 -> variable_29 <= variable_3 -> variable_30 ) variable_9 = variable_21 ; variable_5 = func_2 ( variable_3 , variable_4 , variable_24 , & variable_9 , variable_31 ) ; if ( variable_5 ) variable_20 = variable_31 ; variable_4 = variable_5 ; variable_21 = variable_9 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_3 -> variable_32 ++ ; variable_4 -> variable_29 ++ ; if ( ! variable_20 ) const char * variable_33 = variable_34 [ variable_24 ] ; func_3 ( " \n % 06d : % * s %s " , variable_21 - variable_3 -> variable_22 -> variable_23 , variable_3 -> variable_35 * 2 , " " , variable_33 ) ; if ( func_4 ( variable_24 ) ) variable_5 = func_5 ( variable_3 , variable_4 , variable_24 , & variable_21 , variable_31 ) ; variable_36 = & variable_3 -> variable_37 [ variable_3 -> variable_35 ] ; switch ( variable_24 ) variable_9 = variable_21 + func_6 ( variable_21 ) ; variable_21 += variable_38 ; variable_17 = func_7 ( variable_21 ) ; variable_21 += variable_38 ; variable_14 = func_8 ( variable_21 ) ; variable_21 += variable_38 ; if ( variable_4 -> variable_29 != variable_3 -> variable_30 ) if ( * variable_4 -> variable_29 == variable_17 ) variable_19 = & variable_3 -> variable_22 -> variable_39 [ variable_14 ] ; if ( ! variable_19 -> variable_40 && ! func_9 ( variable_3 , variable_19 ) ) variable_16 = * variable_4 -> variable_29 ; variable_14 = variable_16 >> 3 ; if ( ( variable_16 > variable_19 -> variable_41 || ! ( variable_19 -> variable_42 . variable_43 [ variable_14 ] & ( 1 << ( variable_16 & 0 variable_44 ) ) ) ) ^ variable_19 -> variable_45 ) variable_5 = NULL ; variable_9 = variable_21 + func_10 ( variable_21 ) ; variable_21 += variable_38 ; variable_16 = func_11 ( variable_21 ) ; variable_21 += variable_38 ; variable_17 = func_12 ( variable_21 ) ; variable_21 += variable_38 ; if ( variable_4 -> variable_29 == variable_3 -> variable_30 || ( * variable_4 -> variable_29 != variable_16 && * variable_4 -> variable_29 != variable_17 ) ) variable_5 = NULL ; variable_9 = variable_21 + func_13 ( variable_21 ) ; variable_21 += variable_38 ; variable_36 -> variable_15 = variable_15 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_12 = variable_4 -> variable_29 ; if ( func_14 ( variable_24 ) ) if ( ! func_15 ( variable_3 , variable_4 , variable_24 , & variable_21 , variable_31 ) ) variable_24 = ( variable_25 ) * variable_9 ++ ; variable_21 = variable_9 ; variable_5 = variable_4 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_11 = ( variable_25 ) * variable_9 ++ ; if ( ! func_16 ( variable_3 , variable_11 , variable_9 , variable_4 , variable_12 , 0 , 0 ) ) if ( ! variable_5 ) variable_5 = variable_4 ; if ( variable_3 -> variable_35 ) variable_21 += func_17 ( variable_21 ) ; variable_24 = ( variable_25 ) * variable_21 ++ ; if ( ! variable_5 ) variable_5 = variable_4 ; if ( variable_3 -> variable_35 ) variable_24 = ( variable_25 ) * variable_21 ++ ; variable_21 = func_18 ( variable_21 , & variable_13 ) ; func_19 ( variable_13 < variable_3 -> variable_22 -> variable_46 ) ; if ( variable_13 + 1 > variable_15 ) variable_15 = variable_13 + 1 ; variable_4 -> variable_47 [ variable_13 ] . variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_4 -> variable_47 [ variable_13 ] . variable_41 = 0 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_21 = func_20 ( variable_21 , & variable_13 ) ; func_21 ( variable_13 < variable_3 -> variable_22 -> variable_46 ) ; variable_50 = & variable_4 -> variable_47 [ variable_13 ] ; variable_51 = variable_4 -> variable_29 - ( variable_3 -> variable_49 + variable_50 -> variable_48 ) ; variable_50 -> variable_41 = ( variable_51 < 0 ) ? 0 : ( size_t ) variable_51 ; variable_24 = ( variable_25 ) * variable_21 ++ ; if ( ! variable_5 ) variable_5 = variable_4 ; variable_9 = variable_21 + func_22 ( variable_21 ) ; variable_21 += variable_38 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_10 = variable_21 ; if ( func_23 ( variable_24 ) && ! func_24 ( variable_3 , variable_4 , variable_24 , & variable_10 , variable_28 ) ) variable_5 = NULL ; variable_36 -> variable_42 . variable_52 . variable_53 = ( char * ) variable_3 -> variable_54 - ( char * ) variable_3 -> variable_55 ; variable_36 -> variable_42 . variable_52 . variable_56 = variable_3 -> variable_57 ; variable_36 -> variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_36 -> variable_15 = variable_15 ; if ( ! func_25 ( variable_3 , variable_58 , variable_9 , variable_4 , variable_4 -> variable_29 , 0 , 0 ) ) variable_9 = variable_21 + func_26 ( variable_21 ) ; variable_21 += variable_38 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_10 = variable_21 ; if ( func_27 ( variable_24 ) && func_28 ( variable_3 , variable_4 , variable_24 , & variable_10 , variable_28 ) && * variable_10 == variable_59 ) variable_5 = NULL ; variable_36 -> variable_42 . variable_52 . variable_53 = ( char * ) variable_3 -> variable_54 - ( char * ) variable_3 -> variable_55 ; variable_36 -> variable_42 . variable_52 . variable_56 = variable_3 -> variable_57 ; variable_36 -> variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_36 -> variable_15 = variable_15 ; if ( ! func_29 ( variable_3 , variable_59 , variable_9 , variable_4 , variable_4 -> variable_29 , 0 , 0 ) ) if ( variable_3 -> variable_35 ) variable_4 -> variable_29 = variable_3 -> variable_49 + variable_36 -> variable_48 ; variable_3 -> variable_54 = ( REBackTrackData * ) ( ( char * ) variable_3 -> variable_55 + variable_36 -> variable_42 . variable_52 . variable_53 ) ; variable_3 -> variable_57 = variable_36 -> variable_42 . variable_52 . variable_56 ; if ( variable_5 ) variable_5 = variable_4 ; if ( variable_3 -> variable_35 ) -- variable_3 -> variable_35 ; variable_4 -> variable_29 = variable_3 -> variable_49 + variable_36 -> variable_48 ; variable_3 -> variable_54 = ( REBackTrackData * ) ( ( char * ) variable_3 -> variable_55 + variable_36 -> variable_42 . variable_52 . variable_53 ) ; variable_3 -> variable_57 = variable_36 -> variable_42 . variable_52 . variable_56 ; variable_5 = ( ! variable_5 ) ? variable_4 : NULL ; variable_36 -> variable_42 . variable_60 . variable_61 = 0 ; variable_36 -> variable_42 . variable_60 . variable_62 = ( variable_63 ) - 1 ; variable_36 -> variable_42 . variable_60 . variable_61 = 1 ; variable_36 -> variable_42 . variable_60 . variable_62 = ( variable_63 ) - 1 ; variable_36 -> variable_42 . variable_60 . variable_61 = 0 ; variable_36 -> variable_42 . variable_60 . variable_62 = 1 ; variable_21 = func_30 ( variable_21 , & variable_14 ) ; variable_36 -> variable_42 . variable_60 . variable_61 = variable_14 ; variable_21 = func_31 ( variable_21 , & variable_14 ) ; variable_36 -> variable_42 . variable_60 . variable_62 = variable_14 - 1 ; func_32 ( variable_36 -> variable_42 . variable_60 . variable_61 <= variable_36 -> variable_42 . variable_60 . variable_62 ) ; if ( variable_36 -> variable_42 . variable_60 . variable_62 == 0 ) variable_21 = variable_21 + func_33 ( variable_21 ) ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_5 = variable_4 ; variable_9 = variable_21 + variable_38 ; variable_24 = ( variable_25 ) * variable_9 ++ ; variable_12 = variable_4 -> variable_29 ; if ( func_34 ( variable_24 ) ) if ( ! func_35 ( variable_3 , variable_4 , variable_24 , & variable_9 , variable_31 ) ) if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 ) variable_5 = variable_4 ; variable_5 = NULL ; variable_21 = variable_21 + func_36 ( variable_21 ) ; variable_24 = ( variable_25 ) * variable_9 ++ ; variable_5 = variable_4 ; variable_36 -> variable_48 = variable_12 - variable_3 -> variable_49 ; variable_36 -> variable_64 = variable_65 ; variable_36 -> variable_66 = variable_21 ; variable_36 -> variable_15 = variable_15 ; func_37 ( variable_3 ) ; if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 && ! func_38 ( variable_3 , variable_65 , variable_21 , variable_4 , variable_12 , 0 , 0 ) ) variable_21 = variable_9 ; variable_21 = variable_36 [ - 1 ] . variable_66 ; variable_24 = ( variable_25 ) variable_36 [ - 1 ] . variable_64 ; if ( ! variable_5 ) variable_5 = variable_4 ; if ( variable_3 -> variable_35 ) -- variable_3 -> variable_35 ; if ( ! variable_5 ) if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 ) if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 && variable_4 -> variable_29 == variable_3 -> variable_49 + variable_36 -> variable_48 ) variable_5 = NULL ; if ( variable_36 -> variable_42 . variable_60 . variable_61 != 0 ) variable_36 -> variable_42 . variable_60 . variable_61 -- ; if ( variable_36 -> variable_42 . variable_60 . variable_62 != ( variable_63 ) - 1 ) variable_36 -> variable_42 . variable_60 . variable_62 -- ; if ( variable_36 -> variable_42 . variable_60 . variable_62 == 0 ) variable_9 = variable_21 + variable_38 ; variable_11 = ( variable_25 ) * variable_9 ; variable_12 = variable_4 -> variable_29 ; if ( func_39 ( variable_11 ) ) variable_9 ++ ; if ( ! func_40 ( variable_3 , variable_4 , variable_11 , & variable_9 , variable_31 ) ) if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 ) variable_5 = NULL ; variable_5 = variable_4 ; variable_36 -> variable_48 = variable_12 - variable_3 -> variable_49 ; func_41 ( variable_3 ) ; if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 && ! func_42 ( variable_3 , variable_65 , variable_21 , variable_4 , variable_12 , variable_36 -> variable_15 , variable_15 - variable_36 -> variable_15 ) ) while ( * variable_9 == variable_67 ) variable_21 = variable_9 ; variable_24 = ( variable_25 ) * variable_21 ++ ; variable_15 = variable_36 -> variable_15 ; variable_5 = variable_4 ; variable_21 += func_43 ( variable_21 ) ; variable_36 -> variable_42 . variable_60 . variable_61 = 0 ; variable_36 -> variable_42 . variable_60 . variable_62 = ( variable_63 ) - 1 ; variable_36 -> variable_42 . variable_60 . variable_61 = 1 ; variable_36 -> variable_42 . variable_60 . variable_62 = ( variable_63 ) - 1 ; variable_36 -> variable_42 . variable_60 . variable_61 = 0 ; variable_36 -> variable_42 . variable_60 . variable_62 = 1 ; variable_21 = func_44 ( variable_21 , & variable_14 ) ; variable_36 -> variable_42 . variable_60 . variable_61 = variable_14 ; variable_21 = func_45 ( variable_21 , & variable_14 ) ; variable_36 -> variable_42 . variable_60 . variable_62 = variable_14 - 1 ; func_46 ( variable_36 -> variable_42 . variable_60 . variable_61 <= variable_36 -> variable_42 . variable_60 . variable_62 ) ; variable_36 -> variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_36 -> variable_15 = variable_15 ; func_47 ( variable_3 ) ; if ( variable_36 -> variable_42 . variable_60 . variable_61 != 0 ) variable_36 -> variable_64 = variable_68 ; variable_36 -> variable_66 = variable_21 ; variable_21 += variable_69 ; variable_24 = ( variable_25 ) * variable_21 ++ ; if ( ! func_48 ( variable_3 , variable_68 , variable_21 , variable_4 , variable_4 -> variable_29 , 0 , 0 ) ) if ( variable_3 -> variable_35 ) -- variable_3 -> variable_35 ; variable_21 = variable_21 + func_49 ( variable_21 ) ; variable_24 = ( variable_25 ) * variable_21 ++ ; if ( variable_3 -> variable_35 ) -- variable_3 -> variable_35 ; func_50 ( " { %d , %d } " , variable_36 -> variable_42 . variable_60 . variable_61 , variable_36 -> variable_42 . variable_60 . variable_62 ) ; variable_36 -> variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_36 -> variable_64 = variable_68 ; variable_36 -> variable_66 = variable_21 ; variable_21 += variable_38 ; for ( variable_14 = variable_36 -> variable_15 ; variable_14 < variable_15 ; variable_14 ++ ) variable_4 -> variable_47 [ variable_14 ] . variable_48 = - 1 ; func_51 ( variable_3 ) ; variable_24 = ( variable_25 ) * variable_21 ++ ; func_52 ( variable_24 < variable_70 ) ; variable_71 if ( ! variable_5 ) if ( variable_36 -> variable_42 . variable_60 . variable_62 == ( variable_63 ) - 1 || variable_36 -> variable_42 . variable_60 . variable_62 > 0 ) if ( variable_36 -> variable_42 . variable_60 . variable_61 == 0 && variable_4 -> variable_29 == variable_3 -> variable_49 + variable_36 -> variable_48 ) variable_5 = NULL ; if ( variable_36 -> variable_42 . variable_60 . variable_61 != 0 ) variable_36 -> variable_42 . variable_60 . variable_61 -- ; if ( variable_36 -> variable_42 . variable_60 . variable_62 != ( variable_63 ) - 1 ) variable_36 -> variable_42 . variable_60 . variable_62 -- ; if ( variable_36 -> variable_42 . variable_60 . variable_61 != 0 ) variable_36 -> variable_48 = variable_4 -> variable_29 - variable_3 -> variable_49 ; variable_36 -> variable_15 = variable_15 ; func_53 ( variable_3 ) ; if ( ! func_54 ( variable_3 , variable_68 , variable_21 , variable_4 , variable_4 -> variable_29 , variable_36 -> variable_15 , variable_15 - variable_36 -> variable_15 ) ) if ( variable_3 -> variable_35 ) -- variable_3 -> variable_35 ; variable_21 = variable_21 + func_55 ( variable_21 ) ; variable_24 = ( variable_25 ) * variable_21 ++ ; func_56 ( variable_24 < variable_70 ) ; variable_5 = NULL ; if ( ! variable_5 ) if ( variable_3 -> variable_57 == 0 ) if ( ! func_57 ( variable_3 -> variable_72 ) ) variable_3 -> variable_73 = variable_28 ; variable_3 -> variable_74 ++ ; if ( variable_3 -> variable_75 && variable_3 -> variable_74 >= variable_3 -> variable_75 ) func_58 ( variable_3 -> variable_72 , variable_76 , NULL , variable_77 ) ; variable_3 -> variable_73 = variable_28 ; variable_7 = variable_3 -> variable_54 ; variable_3 -> variable_57 = variable_7 -> variable_56 ; variable_3 -> variable_54 = ( REBackTrackData * ) ( ( char * ) variable_7 - variable_7 -> variable_56 ) ; variable_4 -> variable_29 = variable_7 -> variable_29 ; variable_21 = variable_7 -> variable_78 ; variable_24 = ( variable_25 ) variable_7 -> variable_79 ; func_59 ( variable_24 < variable_70 ) ; variable_3 -> variable_35 = variable_7 -> variable_80 ; func_60 ( variable_3 -> variable_35 ) ; memcpy ( variable_3 -> variable_37 , variable_7 + 1 , sizeof ( variable_81 ) * variable_7 -> variable_80 ) ; variable_36 = & variable_3 -> variable_37 [ variable_3 -> variable_35 - 1 ] ; if ( variable_7 -> variable_46 ) memcpy ( & variable_4 -> variable_47 [ variable_7 -> variable_13 ] , ( char * ) ( variable_7 + 1 ) + sizeof ( variable_81 ) * variable_7 -> variable_80 , sizeof ( variable_82 ) * variable_7 -> variable_46 ) ; variable_15 = variable_7 -> variable_13 + variable_7 -> variable_46 ; for ( variable_14 = variable_36 -> variable_15 ; variable_14 < variable_15 ; variable_14 ++ ) variable_4 -> variable_47 [ variable_14 ] . variable_48 = - 1 ; variable_15 = variable_36 -> variable_15 ; func_61 ( " \t BT_Pop : % ld , % ld " , ( unsigned long ) variable_7 -> variable_13 , ( unsigned long ) variable_7 -> variable_46 ) ; variable_4 = variable_5 ; variable_24 = ( variable_25 ) * variable_21 ++ ; func_62 ( variable_24 < variable_70 ) ; return variable_4 ;

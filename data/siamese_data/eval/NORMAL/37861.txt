 static void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; variable_0 = func_1 ( variable_0 ) ; char * func_2 ( char * variable_0 ) WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_5 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = variable_15 ; variable_4 . variable_16 = func_6 ( variable_17 ) ; if ( bind ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) if ( func_7 ( variable_7 , variable_19 ) == variable_18 ) variable_20 = func_8 ( variable_7 , NULL , NULL ) ; if ( variable_20 == variable_18 ) variable_3 = recv ( variable_20 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_9 ( variable_7 ) ; if ( variable_20 != variable_11 ) func_10 ( variable_20 ) ; return variable_0 ;
 static int func_0 ( ) int variable_0 ; int64_t variable_1 ; variable_0 = func_1 ( ) ; static int func_2 ( ) int variable_0 = 0 ; int variable_2 ; int variable_3 ; variable_4 * variable_5 ; variable_6 * variable_7 ; variable_8 * variable_9 ; variable_10 * variable_11 ; char variable_12 [ 1024 ] ; for ( variable_2 = 0 ; variable_2 < variable_13 ; variable_2 ++ ) variable_14 * variable_15 = variable_16 [ variable_2 ] ; if ( variable_15 -> variable_17 ) for ( variable_3 = 0 ; variable_3 < variable_15 -> variable_18 ; variable_3 ++ ) variable_19 [ variable_3 + variable_15 -> variable_20 ] -> variable_21 = func_3 ( ) ; for ( variable_2 = 0 ; variable_2 < variable_22 ; variable_2 ++ ) variable_5 = variable_23 [ variable_2 ] -> variable_24 ; if ( ! variable_5 -> variable_18 && ! ( variable_5 -> variable_25 -> variable_26 & 0 variable_27 ) ) return - 22 ; for ( variable_2 = 0 ; variable_2 < variable_28 ; variable_2 ++ ) if ( ( variable_0 = func_4 ( variable_29 [ variable_2 ] -> variable_30 , ( ( void * ) 0 ) ) ) < 0 ) return variable_0 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) variable_6 * variable_32 = ( ( void * ) 0 ) ; variable_9 = variable_33 [ variable_2 ] ; variable_5 = variable_23 [ variable_9 -> variable_34 ] -> variable_24 ; variable_11 = func_5 ( variable_9 ) ; static variable_10 * func_6 ( variable_8 * variable_9 ) if ( variable_9 -> variable_35 >= 0 ) return variable_19 [ variable_9 -> variable_35 ] ; return ( ( void * ) 0 ) ; if ( variable_9 -> variable_36 ) variable_7 = variable_9 -> variable_37 -> variable_7 ; if ( variable_11 ) variable_32 = variable_11 -> variable_37 -> variable_7 ; variable_9 -> variable_37 -> variable_38 = variable_11 -> variable_37 -> variable_38 ; variable_7 -> variable_39 = variable_32 -> variable_39 ; variable_7 -> variable_40 = variable_32 -> variable_40 ; if ( variable_9 -> variable_41 ) uint64_t variable_42 ; variable_42 = ( ( variable_43 ) ( variable_32 -> variable_44 ) ) + 16 ; if ( variable_42 > 2147483647 ) return - 22 ; variable_7 -> variable_45 = variable_32 -> variable_45 ; variable_7 -> variable_46 = variable_32 -> variable_46 ; if ( ! variable_7 -> variable_47 ) unsigned int variable_47 ; if ( ! variable_5 -> variable_25 -> variable_47 || ( func_7 ( variable_5 -> variable_25 -> variable_47 , variable_32 -> variable_47 ) ) == ( variable_7 -> variable_45 ) || ! func_8 ( variable_5 -> variable_25 -> variable_47 , variable_32 -> variable_45 , & variable_47 ) ) variable_7 -> variable_47 = variable_32 -> variable_47 ; variable_7 -> variable_48 = variable_32 -> variable_48 ; variable_7 -> variable_49 = variable_32 -> variable_49 ; variable_7 -> variable_50 = variable_32 -> variable_50 ; variable_7 -> variable_51 = variable_32 -> variable_51 ; variable_7 -> variable_52 = ( func_9 ( variable_42 ) ) ; if ( ! variable_7 -> variable_52 ) return - 12 ; memcpy ( ( variable_7 -> variable_52 ) , ( variable_32 -> variable_52 ) , ( variable_32 -> variable_44 ) ) ; variable_7 -> variable_44 = variable_32 -> variable_44 ; variable_7 -> variable_53 = variable_32 -> variable_53 ; variable_7 -> variable_54 = variable_11 -> variable_37 -> variable_54 ; if ( ! strcmp ( variable_5 -> variable_25 -> variable_55 , " avi " ) ) if ( variable_56 < 0 && func_10 ( variable_11 -> variable_37 -> variable_57 ) >= func_11 ( variable_11 -> variable_37 -> variable_58 ) && 0 . 5 / func_12 ( variable_11 -> variable_37 -> variable_57 ) > func_13 ( variable_11 -> variable_37 -> variable_54 ) && 0 . 5 / func_14 ( variable_11 -> variable_37 -> variable_57 ) > func_15 ( variable_32 -> variable_54 ) && func_16 ( variable_11 -> variable_37 -> variable_54 ) < 1 . 0 / 500 && func_17 ( variable_32 -> variable_54 ) < 1 . 0 / 500 || variable_56 == 2 ) variable_7 -> variable_54 . variable_59 = variable_11 -> variable_37 -> variable_57 . variable_60 ; variable_7 -> variable_54 . variable_60 = 2 * variable_11 -> variable_37 -> variable_57 . variable_59 ; variable_7 -> variable_61 = 2 ; if ( variable_56 < 0 && func_18 ( variable_32 -> variable_54 ) * ( variable_32 -> variable_61 ) > 2 * func_19 ( variable_11 -> variable_37 -> variable_54 ) && func_20 ( variable_11 -> variable_37 -> variable_54 ) < 1 . 0 / 500 || variable_56 == 0 ) variable_7 -> variable_54 = variable_32 -> variable_54 ; variable_7 -> variable_54 . variable_59 *= variable_32 -> variable_61 ; variable_7 -> variable_54 . variable_60 *= 2 ; variable_7 -> variable_61 = 2 ; if ( ! ( variable_5 -> variable_25 -> variable_26 & 0002000 ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " mov " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " mp4 " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " 3 gp " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " 3 g2 " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " psp " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " ipod " ) && strcmp ( variable_5 -> variable_25 -> variable_55 , " f4v " ) ) if ( variable_56 < 0 && variable_32 -> variable_54 . variable_60 && func_21 ( variable_32 -> variable_54 ) * ( variable_32 -> variable_61 ) > func_22 ( variable_11 -> variable_37 -> variable_54 ) && func_23 ( variable_11 -> variable_37 -> variable_54 ) < 1 . 0 / 500 || variable_56 == 0 ) variable_7 -> variable_54 = variable_32 -> variable_54 ; variable_7 -> variable_54 . variable_59 *= variable_32 -> variable_61 ; variable_7 -> variable_54 = variable_32 -> variable_54 ; if ( variable_9 -> variable_62 . variable_59 ) variable_7 -> variable_54 = func_24 ( variable_9 -> variable_62 ) ; switch ( variable_7 -> variable_46 ) variable_7 -> variable_63 = variable_32 -> variable_63 ; variable_7 -> variable_64 = variable_32 -> variable_64 ; variable_7 -> variable_65 = variable_32 -> variable_65 ; variable_7 -> variable_66 = variable_32 -> variable_66 ; variable_7 -> variable_67 = variable_32 -> variable_67 ; variable_7 -> variable_68 = variable_32 -> variable_68 ; if ( ( variable_7 -> variable_68 == 1 || variable_7 -> variable_68 == 1152 || variable_7 -> variable_68 == 576 ) && ( variable_7 -> variable_45 ) == variable_69 ) variable_7 -> variable_68 = 0 ; if ( ( variable_7 -> variable_45 ) == variable_70 ) variable_7 -> variable_68 = 0 ; variable_7 -> variable_71 = variable_32 -> variable_71 ; variable_7 -> variable_72 = variable_32 -> variable_72 ; variable_7 -> variable_73 = variable_32 -> variable_73 ; variable_7 -> variable_74 = variable_32 -> variable_74 ; if ( ! variable_7 -> variable_75 . variable_59 ) variable_7 -> variable_75 = variable_9 -> variable_37 -> variable_75 = ( variable_11 -> variable_37 -> variable_75 . variable_59 ? variable_11 -> variable_37 -> variable_75 : ( ( variable_11 -> variable_37 -> variable_7 -> variable_75 . variable_59 ? variable_11 -> variable_37 -> variable_7 -> variable_75 : ( ( variable_76 ) ( 0 ) , ( 1 ) ) ) ) ) variable_9 -> variable_37 -> variable_58 = variable_11 -> variable_37 -> variable_58 ; variable_7 -> variable_72 = variable_32 -> variable_72 ; variable_7 -> variable_73 = variable_32 -> variable_73 ; if ( ! variable_9 -> variable_77 ) variable_9 -> variable_77 = func_25 ( variable_7 -> variable_45 ) ; if ( ! variable_9 -> variable_77 ) variable_0 = - 22 ; if ( variable_11 ) variable_11 -> variable_78 ++ ; variable_9 -> variable_79 = 1 ; if ( ( variable_7 -> variable_46 ) == variable_80 ) if ( variable_9 -> variable_81 && ! variable_9 -> variable_62 . variable_59 ) variable_9 -> variable_62 = func_26 ( variable_9 -> variable_81 -> variable_81 ) ; if ( variable_11 && ! variable_9 -> variable_62 . variable_59 ) variable_9 -> variable_62 = variable_11 -> variable_82 ; if ( variable_11 && ! variable_9 -> variable_62 . variable_59 ) variable_9 -> variable_62 = ( variable_11 -> variable_37 -> variable_57 . variable_59 ? variable_11 -> variable_37 -> variable_57 : ( ( variable_76 ) ( 25 ) , ( 1 ) ) ) if ( variable_9 -> variable_77 && variable_9 -> variable_77 -> variable_83 && ! variable_9 -> variable_84 ) int variable_85 = func_27 ( variable_9 -> variable_62 , variable_9 -> variable_77 -> variable_83 ) ; variable_9 -> variable_62 = variable_9 -> variable_77 -> variable_83 [ variable_85 ] ; switch ( variable_7 -> variable_46 ) variable_7 -> variable_86 = ( variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_88 ) ; variable_7 -> variable_64 = variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_64 ; variable_7 -> variable_63 = variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_63 ; variable_7 -> variable_65 = func_28 ( variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] ) ; variable_7 -> variable_54 = ( ( variable_76 ) ( 1 ) , variable_7 -> variable_64 ) variable_7 -> variable_54 = func_29 ( variable_9 -> variable_62 ) ; if ( variable_9 -> variable_81 && ! ( variable_7 -> variable_54 . variable_59 && variable_7 -> variable_54 . variable_60 ) ) variable_7 -> variable_54 = variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_54 ; variable_7 -> variable_72 = variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_89 ; variable_7 -> variable_73 = variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_90 ; variable_7 -> variable_75 = variable_9 -> variable_37 -> variable_75 = ( variable_9 -> variable_91 ? func_30 ( ( variable_9 -> variable_91 * ( variable_7 -> variable_73 ) / ( variable_7 -> variable_72 ) ) , 255 ) : variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_75 ) ; variable_7 -> variable_71 = ( variable_9 -> variable_81 -> variable_81 -> variable_87 [ 0 ] -> variable_88 ) ; if ( ! variable_32 || variable_7 -> variable_72 != variable_32 -> variable_72 || variable_7 -> variable_73 != variable_32 -> variable_73 || ( variable_7 -> variable_71 ) != ( variable_32 -> variable_71 ) ) variable_7 -> variable_39 = variable_92 ; if ( variable_9 -> variable_93 ) if ( ! strncmp ( ( variable_9 -> variable_93 ) , " expr : " , 5 ) ) variable_0 = func_31 ( & variable_9 -> variable_94 , ( variable_9 -> variable_93 + 5 ) , variable_95 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) , 0 , ( ( void * ) 0 ) ) ; if ( variable_0 < 0 ) return variable_0 ; variable_9 -> variable_96 [ variable_97 ] = 0 ; variable_9 -> variable_96 [ variable_98 ] = 0 ; variable_9 -> variable_96 [ variable_99 ] = ( func_32 ( " " ) ) ; variable_9 -> variable_96 [ variable_100 ] = ( func_33 ( " " ) ) ; variable_7 -> variable_54 = ( ( variable_76 ) ( 1 ) , ( 1000 ) ) if ( ! variable_7 -> variable_72 ) variable_7 -> variable_72 = variable_19 [ variable_9 -> variable_35 ] -> variable_37 -> variable_7 -> variable_72 ; variable_7 -> variable_73 = variable_19 [ variable_9 -> variable_35 ] -> variable_37 -> variable_7 -> variable_73 ; if ( variable_7 -> variable_26 & ( 0 variable_101 | 0002000 ) ) char variable_102 [ 1024 ] ; FILE * variable_103 ; snprintf ( variable_102 , sizeof ( variable_102 ) , " %s - %d . log " , ( variable_9 -> variable_104 ? variable_9 -> variable_104 : " ffmpeg2pass " ) , variable_2 ) ; if ( ! strcmp ( variable_9 -> variable_77 -> variable_55 , " libx264 " ) ) if ( variable_7 -> variable_26 & 0002000 ) char * variable_105 ; variable_7 -> variable_106 = variable_105 ; if ( variable_7 -> variable_26 & 0 variable_101 ) variable_103 = fopen ( variable_102 , " wb " ) ; variable_9 -> variable_107 = variable_103 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) variable_9 = variable_33 [ variable_2 ] ; if ( variable_9 -> variable_79 ) variable_108 * variable_7 = variable_9 -> variable_77 ; variable_6 * variable_109 = ( ( void * ) 0 ) ; if ( variable_11 = func_34 ( variable_9 ) ) static variable_10 * func_35 ( variable_8 * variable_9 ) if ( variable_9 -> variable_35 >= 0 ) return variable_19 [ variable_9 -> variable_35 ] ; return ( ( void * ) 0 ) ; variable_109 = variable_11 -> variable_37 -> variable_7 ; if ( variable_109 && variable_109 -> variable_110 ) variable_9 -> variable_37 -> variable_7 -> variable_110 = ( func_36 ( ( variable_109 -> variable_111 + 1 ) ) ) ; if ( ! variable_9 -> variable_37 -> variable_7 -> variable_110 ) variable_0 = - 12 ; memcpy ( ( variable_9 -> variable_37 -> variable_7 -> variable_110 ) , ( variable_109 -> variable_110 ) , ( variable_109 -> variable_111 ) ) ; variable_9 -> variable_37 -> variable_7 -> variable_111 = variable_109 -> variable_111 ; if ( ( variable_0 = func_37 ( variable_9 -> variable_37 -> variable_7 , variable_7 , & variable_9 -> variable_112 ) ) < 0 ) for ( variable_2 = 0 ; variable_2 < variable_113 ; variable_2 ++ ) if ( ( variable_0 = func_38 ( variable_2 , variable_12 , ( sizeof ( variable_12 ) ) ) ) < 0 ) static int func_39 ( int variable_20 , char * variable_12 , int variable_114 ) int variable_0 ; variable_10 * variable_11 = variable_19 [ variable_20 ] ; if ( variable_11 -> variable_78 ) variable_108 * variable_7 = variable_11 -> variable_109 ; if ( ! variable_7 ) return - 22 ; variable_11 -> variable_115 = variable_7 -> variable_116 & 0000002 && ! ( ' 6 ' < 56 && variable_117 ) ; if ( ( variable_7 -> variable_118 ) == variable_80 && variable_11 -> variable_115 ) variable_11 -> variable_37 -> variable_7 -> variable_119 = variable_120 ; variable_11 -> variable_37 -> variable_7 -> variable_121 = variable_122 ; variable_11 -> variable_37 -> variable_7 -> variable_123 = ( & variable_11 -> variable_124 ) ; if ( ( variable_0 = func_40 ( variable_11 -> variable_37 -> variable_7 , variable_7 , & variable_11 -> variable_112 ) ) < 0 ) return variable_0 ; return 0 ; for ( variable_2 = 0 ; variable_2 < variable_13 ; variable_2 ++ ) for ( variable_2 = 0 ; variable_2 < variable_22 ; variable_2 ++ ) variable_5 = variable_23 [ variable_2 ] -> variable_24 ; variable_5 -> variable_125 = variable_126 ; if ( ( variable_0 = func_41 ( variable_5 , & variable_23 [ variable_2 ] -> variable_112 ) ) < 0 ) variable_0 = - 22 ; if ( variable_0 ) return variable_0 ; return 0 ; if ( variable_0 < 0 ) variable_1 = func_42 ( ) ; if ( ( variable_0 = func_43 ( ) ) < 0 ) static int func_44 ( ) int variable_2 ; int variable_0 ; if ( variable_13 == 1 ) return 0 ; for ( variable_2 = 0 ; variable_2 < variable_13 ; variable_2 ++ ) variable_14 * variable_103 = variable_16 [ variable_2 ] ; if ( ! ( variable_103 -> variable_127 = func_45 ( ( 8 * sizeof ( variable_128 ) ) ) ) ) return - 12 ; if ( variable_0 = func_46 ( & variable_103 -> variable_129 , ( ( void * ) 0 ) , variable_130 , variable_103 ) ) return - variable_0 ; return 0 ; while ( ! variable_131 ) int64_t variable_132 = func_47 ( ) ; if ( variable_133 ) if ( func_48 ( variable_132 ) < 0 ) static int func_49 ( int64_t variable_132 ) int variable_134 ; static int64_t variable_135 ; if ( variable_136 ) return - ( ( int ) ( ( ' E ' | ' X ' << 8 | '  I ' << 16 ) | ( ( unsigned int ) ' T ' ) << 24 ) ) ; if ( variable_132 - variable_135 >= 100000 && ! variable_137 ) variable_134 = func_50 ( ) ; static int func_51 ( ) unsigned char variable_138 ; struct timeval variable_139 ; fd_set variable_140 ; ( & variable_140 ) -> variable_141 [ 0 / ( 8 * ( ( int ) ( sizeof ( variable_142 ) ) ) ) ] |= ( ( variable_142 ) 1 ) << 0 % ( 8 * ( ( int ) ( sizeof ( variable_142 ) ) ) ) ; variable_139 . variable_143 = 0 ; variable_139 . variable_144 = 0 ; variable_145 = func_52 ( 1 , & variable_140 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , & variable_139 ) ; if ( variable_145 > 0 ) variable_145 = ( func_53 ( 0 , ( & variable_138 ) , 1 ) ) ; if ( variable_145 == 1 ) return variable_138 ; return variable_145 ; return - 1 ; variable_134 = - 1 ; if ( variable_134 == ' q ' ) return - ( ( int ) ( ( ' E ' | ' X ' << 8 | '  I ' << 16 ) | ( ( unsigned int ) ' T ' ) << 24 ) ) ; return 0 ; if ( ! func_54 ( ) ) static int func_55 ( ) int variable_2 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) variable_8 * variable_9 = variable_33 [ variable_2 ] ; variable_146 * variable_147 = variable_23 [ variable_9 -> variable_34 ] ; variable_4 * variable_148 = variable_23 [ variable_9 -> variable_34 ] -> variable_24 ; if ( variable_9 -> variable_149 || variable_148 -> variable_150 && ( func_56 ( variable_148 -> variable_150 ) ) >= variable_147 -> variable_151 ) if ( ( variable_9 -> variable_152 ) >= variable_9 -> variable_153 ) return 1 ; return 0 ; variable_0 = func_57 ( ) ; static int func_58 ( ) variable_8 * variable_9 ; variable_10 * variable_11 ; int variable_0 ; variable_9 = func_59 ( ) ; static variable_8 * func_60 ( ) int variable_2 ; int64_t variable_154 = 9223372036854775807L ; variable_8 * variable_155 = ( ( void * ) 0 ) ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) variable_8 * variable_9 = variable_33 [ variable_2 ] ; int64_t variable_112 = func_61 ( variable_9 -> variable_37 -> variable_156 , variable_9 -> variable_37 -> variable_54 , ( ( variable_76 ) ( 1 ) , ( 1000000 ) ) ) if ( ! variable_9 -> variable_157 && ! variable_9 -> variable_149 && variable_112 < variable_154 ) variable_154 = variable_112 ; variable_155 = variable_9 ; return variable_155 ; if ( ! variable_9 ) if ( func_62 ( ) ) static int func_63 ( ) int variable_2 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) if ( variable_33 [ variable_2 ] -> variable_157 ) return 1 ; return 0 ; return 0 ; return - ( ( int ) ( ( ' E ' | ' O ' << 8 | '  F ' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) ) ; if ( variable_9 -> variable_81 ) if ( ( variable_0 = func_64 ( variable_9 -> variable_81 -> variable_30 , & variable_11 ) ) < 0 ) static int func_65 ( variable_158 * variable_30 , variable_10 * * variable_159 ) int variable_0 ; variable_0 = func_66 ( variable_30 -> variable_30 ) ; if ( variable_0 >= 0 ) return func_67 ( ) ; static int func_68 ( ) int variable_2 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) variable_8 * variable_9 = variable_33 [ variable_2 ] ; if ( ! variable_9 -> variable_81 ) if ( ! variable_9 -> variable_160 && ! ( variable_9 -> variable_160 = func_69 ( ) ) ) return - 12 ; return 0 ; if ( variable_0 == - ( ( int ) ( ( ' E ' | ' O ' << 8 | '  F ' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) ) ) variable_0 = func_70 ( ) ; static int func_71 ( ) int variable_2 ; variable_8 * variable_9 = variable_33 [ variable_2 ] ; if ( ! variable_9 -> variable_81 ) if ( ! variable_9 -> variable_160 && ! ( variable_9 -> variable_160 = func_72 ( ) ) ) return - 12 ; return 0 ; return variable_0 ; if ( variable_0 != - 11 ) return variable_0 ; return 0 ; return variable_0 ; if ( ! variable_11 ) return 0 ; variable_11 = variable_19 [ variable_9 -> variable_35 ] ; variable_0 = func_73 ( variable_11 -> variable_34 ) ; static int func_74 ( int variable_34 ) variable_14 * variable_15 = variable_16 [ variable_34 ] ; int variable_0 ; variable_0 = func_75 ( variable_15 , & variable_161 ) ; static int func_76 ( variable_14 * variable_103 , variable_128 * variable_161 ) if ( variable_13 > 1 ) return func_77 ( variable_103 , variable_161 ) ; static int func_78 ( variable_14 * variable_103 , variable_128 * variable_161 ) int variable_0 = 0 ; if ( func_79 ( variable_103 -> variable_127 ) ) if ( variable_103 -> variable_149 ) variable_0 = - ( ( int ) ( ( ' E ' | ' O ' << 8 | '  F ' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) ) ; variable_0 = - 11 ; return variable_0 ; return func_80 ( variable_103 -> variable_24 , variable_161 ) ; if ( variable_0 == - 11 ) return variable_0 ; if ( variable_0 < 0 ) return - 11 ; return 0 ; if ( variable_0 == - 11 ) return 0 ; if ( variable_0 < 0 ) return variable_0 == - ( ( int ) ( ( ' E ' | ' O ' << 8 | '  F ' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) ) ? 0 : variable_0 ; return func_81 ( ) ; static int func_82 ( ) int variable_2 ; variable_8 * variable_9 = variable_33 [ variable_2 ] ; if ( ! variable_9 -> variable_81 ) if ( ! variable_9 -> variable_160 && ! ( variable_9 -> variable_160 = func_83 ( ) ) ) return - 12 ; return 0 ; if ( variable_0 < 0 ) if ( variable_0 == - ( ( int ) ( ( ' E ' | ' O ' << 8 | '  F ' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) ) || variable_0 == - 11 ) func_84 ( 0 , variable_1 , variable_132 ) ; static void func_85 ( int variable_162 , int64_t variable_1 , int64_t variable_132 ) char variable_163 [ 1024 ] ; variable_8 * variable_9 ; variable_6 * variable_77 ; int variable_152 ; int variable_164 ; int variable_2 ; static int64_t variable_135 = ( - 1 ) ; static int variable_165 [ ' 4 ' ] ; if ( ! variable_166 && ! variable_162 && ! variable_167 ) if ( ! variable_162 ) if ( variable_135 == ( - 1 ) ) variable_135 = variable_132 ; if ( variable_132 - variable_135 < 500000 ) variable_163 [ 0 ] = ' \0 ' ; variable_164 = 0 ; for ( variable_2 = 0 ; variable_2 < variable_31 ; variable_2 ++ ) float variable_168 = ( - 1 ) ; variable_9 = variable_33 [ variable_2 ] ; variable_77 = variable_9 -> variable_37 -> variable_7 ; if ( ! variable_9 -> variable_41 && variable_77 -> variable_169 ) variable_168 = ( variable_77 -> variable_169 -> variable_170 ) / ( ( float ) ' v ' ) ; if ( variable_164 && ( variable_77 -> variable_46 ) == variable_80 ) snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " q = % 2 . 1 f " , variable_168 ) ; if ( ! variable_164 && ( variable_77 -> variable_46 ) == variable_80 ) float variable_171 ; float variable_172 = ( ( variable_132 - variable_1 ) / 1000000 . 0 ) ; variable_152 = variable_9 -> variable_152 ; variable_171 = ( variable_172 > 1 ? variable_152 / variable_172 : 0 ) ; snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " frame = % 5 d fps = % 3 . *  f q = % 3 . 1 f " , variable_152 , variable_171 < 9 . 95 , variable_171 , variable_168 ) ; if ( variable_162 ) snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " L " ) ; if ( variable_173 ) int variable_3 ; int variable_174 = ( lrintf ( variable_168 ) ) ; if ( variable_174 >= 0 && variable_174 < sizeof ( variable_165 ) / sizeof ( variable_165 [ 0 ] ) ) variable_165 [ variable_174 ] ++ ; for ( variable_3 = 0 ; variable_3 < 32 ; variable_3 ++ ) snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " % X " , ( ( int ) ( lrintf ( ( log2 ( ( variable_165 [ variable_3 ] + 1 ) ) ) ) ) ) ) ; if ( variable_77 -> variable_26 & 0 variable_175 && ( variable_77 -> variable_169 || variable_162 ) ) snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " PSNR = " ) ; snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " %c : % 2 . 2 f " , variable_118 [ variable_3 ] , variable_176 ) ; snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " * : % 2 . 2 f " , func_86 ( variable_177 / variable_178 ) ) ; static double func_87 ( double variable_179 ) return - 10 . 0 * log ( variable_179 ) / log ( 10 . 0 ) ; variable_164 = 1 ; snprintf ( variable_163 + strlen ( variable_163 ) , sizeof ( variable_163 ) - strlen ( variable_163 ) , " size = N / A time = " ) ;

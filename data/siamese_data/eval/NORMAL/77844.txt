 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = variable_15 ; variable_4 . variable_16 = func_4 ( variable_17 ) ; if ( bind ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) if ( func_5 ( variable_7 , variable_19 ) == variable_18 ) variable_20 = func_6 ( variable_7 , NULL , NULL ) ; if ( variable_20 == variable_18 ) variable_3 = recv ( variable_20 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ; if ( variable_20 != variable_11 ) func_8 ( variable_20 ) ; func_9 ( & variable_0 ) ; void func_10 ( char * * variable_22 ) char * variable_0 = * variable_22 ;
 int main ( ) variable_0 * variable_1 = ( u_char * ) malloc ( 1000 * sizeof ( variable_0 ) ) ; variable_2 = func_0 ( variable_1 ) ; int func_1 ( variable_0 * variable_3 ) variable_4 = variable_3 ; while ( * variable_5 != ' \0 ' ) * variable_4 ++ = * variable_5 ++ ; * variable_4 ++ = * variable_6 ++ ; func_2 ( 24 , variable_4 ) ; variable_4 += 2 ; func_3 ( variable_7 , variable_4 ) ; variable_4 += 2 ; func_4 ( 255 , variable_4 ) ; variable_4 += 4 ; func_5 ( 30 , variable_4 ) ; variable_4 += 2 ; func_6 ( 15 , variable_4 ) ; variable_4 += 2 ; func_7 ( 256 * 2 , variable_4 ) ; variable_4 += 2 ; func_8 ( 255 , variable_4 ) ; variable_4 += 4 ; func_9 ( variable_8 + 20000 , variable_4 ) ; variable_4 += 4 ; func_10 ( variable_8 , variable_4 ) ; variable_4 += 4 ; func_11 ( 100 , variable_4 ) ; variable_4 += 2 ; * variable_4 ++ = * variable_9 ++ ; func_12 ( 123 , variable_4 ) ; variable_4 += 4 ; return ( variable_4 - variable_3 ) ; printf ( " msglen = %d \n " , variable_2 ) ; variable_10 = variable_1 + sizeof ( variable_11 ) ; variable_12 = func_13 ( variable_1 , variable_2 , variable_10 , variable_13 , 100 ) ; static func_14 ( variable_0 * variable_1 , int variable_2 , variable_0 * variable_14 , variable_0 * variable_15 , int variable_16 ) variable_11 * variable_17 = ( HEADER * ) variable_1 ; variable_18 = variable_14 ; variable_19 = variable_1 + variable_2 ; printf ( " msg = %s , msglen = %d , rrp = %s , namelen = %d \n " , ( char * ) variable_1 , variable_2 , ( char * ) variable_14 , variable_16 ) ; if ( ( variable_20 = func_15 ( variable_1 , variable_19 , variable_18 , ( char * ) variable_15 , variable_16 ) ) < 0 ) printf ( " dn_expand returned %d \n " , variable_20 ) ; variable_17 -> variable_21 = variable_22 ; printf ( " First dn_expand returned n = %d \n " , variable_20 ) ; variable_18 += variable_20 ; variable_23 += variable_20 ; variable_23 += sizeof ( variable_11 ) ; func_16 ( variable_18 , 2 * variable_24 + variable_25 + variable_24 ) ; func_17 ( variable_26 , variable_18 ) ; variable_18 += 2 ; variable_23 += 2 ; func_18 ( variable_27 , variable_18 ) variable_18 += 2 ; variable_23 += 2 ; variable_17 -> variable_21 = variable_22 ; variable_18 += 4 ; variable_23 += 4 ; printf ( " %s : converted TTL > % u to 0 " , variable_15 , variable_28 ) ; func_19 ( variable_29 , variable_18 ) ; variable_18 += 2 ; variable_23 += 2 ; func_20 ( variable_18 , variable_29 ) ; variable_30 = variable_18 ; variable_17 -> variable_21 = variable_22 ; func_21 ( variable_18 , variable_24 + 1 + 1 + 3 * variable_25 ) ; variable_31 = variable_18 ; func_22 ( variable_5 , variable_31 ) ; variable_31 += 2 ; variable_23 += 2 ; func_23 ( variable_5 , variable_31 ) ; variable_31 += 2 ; variable_23 += 2 ; func_24 ( variable_32 , variable_31 ) ; variable_31 += 4 ; variable_23 += 4 ; func_25 ( variable_33 , variable_31 ) ; variable_31 += 4 ; variable_23 += 4 ; func_26 ( variable_34 , variable_31 ) ; variable_31 += 4 ; variable_23 += 4 ; func_27 ( variable_5 , variable_31 ) ; variable_31 += 2 ; variable_23 += 2 ; return ( ( variable_18 - variable_14 ) + variable_29 ) ; return ( ( variable_18 - variable_14 ) + variable_29 ) ; variable_18 = variable_31 - 18 ; func_28 ( variable_18 , 18 ) ; memcpy ( variable_31 , variable_18 , 18 ) ; variable_31 += 18 ; printf ( " comp name = %s \n " , ( char * ) variable_18 + 18 ) ; variable_20 = func_29 ( variable_1 , variable_19 , variable_18 + 18 , ( char * ) variable_31 , ( sizeof variable_35 ) - 18 ) ; printf ( " dn_expand returned : %d , expanded name = %s \n " , variable_20 , ( char * ) variable_31 ) ; if ( variable_20 < 0 ) printf ( " ERROR : n = %d < 0 ! \n " , variable_20 ) ; variable_18 += variable_20 ; variable_31 += strlen ( ( char * ) variable_31 ) + 1 ; variable_20 = variable_29 - ( variable_36 + variable_20 ) ; printf ( " dlen - NS_SIG_SIGNER - n = %d \n " , variable_20 ) ; printf ( " n = %d \n " , variable_20 ) ; printf ( " ( sizeof data ) - ( cp1 - ( u_char * ) data ) = %d \n " , ( sizeof variable_35 ) - ( variable_31 - ( u_char * ) variable_35 ) ) ; printf ( " ( n > ( int ) ( sizeof data ) - ( cp1 - ( u_char * ) data ) ) = %d \n " , ( variable_20 > ( int ) ( sizeof variable_35 ) - ( variable_31 - ( u_char * ) variable_35 ) ) ) ; if ( variable_20 > ( int ) ( sizeof variable_35 ) - ( variable_31 - ( u_char * ) variable_35 ) ) if ( variable_20 < variable_37 || variable_20 > variable_38 ) if ( variable_20 != variable_39 ) if ( variable_17 -> variable_21 == variable_22 ) printf ( " memcpying n = % u bytes \n " , ( unsigned int ) variable_20 ) ; memcpy ( variable_31 , variable_18 , variable_20 ) ; variable_18 += variable_20 ; variable_31 += variable_20 ; variable_20 = variable_31 - ( u_char * ) variable_35 ; return ( ( variable_18 - variable_14 ) + variable_29 ) ; if ( variable_18 > variable_19 ) if ( ( variable_40 ) ( variable_18 - variable_30 ) != variable_29 ) printf ( " encoded rdata length is % u , but actual length was % u " , variable_29 , ( variable_40 ) ( variable_18 - variable_30 ) ) ; if ( variable_20 > variable_41 ) printf ( " update type %d : %d bytes is too much data " , variable_26 , variable_20 ) ; return ( variable_18 - variable_14 ) ; printf ( " rrextract returned %d \n " , variable_12 ) ;

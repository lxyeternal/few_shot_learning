 static void func_0 ( ) int * variable_0 ; variable_0 = NULL ; if ( variable_1 ) variable_0 = ( int * ) malloc ( 10 * sizeof ( int ) ) ; int variable_2 [ 10 ] = { 0 } ; memmove ( variable_0 , variable_2 , 10 * sizeof ( int ) ) ; func_1 ( variable_0 [ 0 ] ) ; void func_2 ( int variable_3 ) printf ( " %d \n " , variable_3 ) ; free ( variable_0 ) ;
 static gint64 func_0 ( variable_0 * variable_1 , gint64 variable_2 ) char * variable_3 ; if ( func_1 ( & variable_4 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_3 != 0 ) variable_5 = ( ( int ) ( strlen ( variable_3 ) ) ) ; variable_6 = ( ( char * ) ( malloc ( variable_5 + 1 ) ) ) ; if ( variable_6 == 0 ) memset ( variable_6 , 0 , variable_5 + 1 ) ; memcpy ( variable_6 , variable_3 , variable_5 ) ; variable_7 = & variable_6 ; variable_8 = & variable_7 ; variable_9 = & variable_8 ; variable_10 = & variable_9 ; variable_11 = & variable_10 ; variable_12 = & variable_11 ; variable_13 = & variable_12 ; variable_14 = & variable_13 ; variable_15 = & variable_14 ; variable_16 = & variable_15 ; func_3 ( variable_16 ) ; void func_4 ( char * * * * * * * * * * * variable_17 ) func_5 ( variable_17 ) ; void func_6 ( char * * * * * * * * * * * variable_18 ) func_7 ( variable_18 ) ; void func_8 ( char * * * * * * * * * * * variable_19 ) func_9 ( variable_19 ) ; void func_10 ( char * * * * * * * * * * * variable_20 ) func_11 ( variable_20 ) ; void func_12 ( char * * * * * * * * * * * variable_21 ) func_13 ( variable_21 ) ; void func_14 ( char * * * * * * * * * * * variable_22 ) func_15 ( variable_22 ) ; void func_16 ( char * * * * * * * * * * * variable_23 ) func_17 ( variable_23 ) ; void func_18 ( char * * * * * * * * * * * variable_24 ) func_19 ( variable_24 ) ; void func_20 ( char * * * * * * * * * * * variable_25 ) func_21 ( variable_25 ) ; void func_22 ( char * * * * * * * * * * * variable_26 ) func_23 ( variable_26 ) ; void func_24 ( char * * * * * * * * * * * variable_27 ) func_25 ( variable_27 ) ; void func_26 ( char * * * * * * * * * * * variable_28 ) func_27 ( variable_28 ) ; void func_28 ( char * * * * * * * * * * * variable_29 ) func_29 ( variable_29 ) ; void func_30 ( char * * * * * * * * * * * variable_30 ) func_31 ( variable_30 ) ; void func_32 ( char * * * * * * * * * * * variable_31 ) func_33 ( variable_31 ) ; void func_34 ( char * * * * * * * * * * * variable_32 ) func_35 ( variable_32 ) ; void func_36 ( char * * * * * * * * * * * variable_33 ) func_37 ( variable_33 ) ; void func_38 ( char * * * * * * * * * * * variable_34 ) func_39 ( variable_34 ) ; void func_40 ( char * * * * * * * * * * * variable_35 ) func_41 ( variable_35 ) ; void func_42 ( char * * * * * * * * * * * variable_36 ) func_43 ( variable_36 ) ; void func_44 ( char * * * * * * * * * * * variable_37 ) func_45 ( variable_37 ) ; void func_46 ( char * * * * * * * * * * * variable_38 ) func_47 ( variable_38 ) ; void func_48 ( char * * * * * * * * * * * variable_39 ) func_49 ( variable_39 ) ; void func_50 ( char * * * * * * * * * * * variable_40 ) func_51 ( variable_40 ) ; void func_52 ( char * * * * * * * * * * * variable_41 ) func_53 ( variable_41 ) ; void func_54 ( char * * * * * * * * * * * variable_42 ) func_55 ( variable_42 ) ; void func_56 ( char * * * * * * * * * * * variable_43 ) func_57 ( variable_43 ) ; void func_58 ( char * * * * * * * * * * * variable_44 ) func_59 ( variable_44 ) ; void func_60 ( char * * * * * * * * * * * variable_45 ) func_61 ( variable_45 ) ; void func_62 ( char * * * * * * * * * * * variable_46 ) func_63 ( variable_46 ) ; void func_64 ( char * * * * * * * * * * * variable_47 ) func_65 ( variable_47 ) ; void func_66 ( char * * * * * * * * * * * variable_48 ) func_67 ( variable_48 ) ; void func_68 ( char * * * * * * * * * * * variable_49 ) func_69 ( variable_49 ) ; void func_70 ( char * * * * * * * * * * * variable_50 ) func_71 ( variable_50 ) ; void func_72 ( char * * * * * * * * * * * variable_51 ) func_73 ( variable_51 ) ; void func_74 ( char * * * * * * * * * * * variable_52 ) func_75 ( variable_52 ) ; void func_76 ( char * * * * * * * * * * * variable_53 ) func_77 ( variable_53 ) ; void func_78 ( char * * * * * * * * * * * variable_54 ) func_79 ( variable_54 ) ; void func_80 ( char * * * * * * * * * * * variable_55 ) func_81 ( variable_55 ) ; void func_82 ( char * * * * * * * * * * * variable_56 ) func_83 ( variable_56 ) ; void func_84 ( char * * * * * * * * * * * variable_57 ) func_85 ( variable_57 ) ; void func_86 ( char * * * * * * * * * * * variable_58 ) func_87 ( variable_58 ) ; void func_88 ( char * * * * * * * * * * * variable_59 ) func_89 ( variable_59 ) ; void func_90 ( char * * * * * * * * * * * variable_60 ) func_91 ( variable_60 ) ; void func_92 ( char * * * * * * * * * * * variable_61 ) func_93 ( variable_61 ) ; void func_94 ( char * * * * * * * * * * * variable_62 ) func_95 ( variable_62 ) ; void func_96 ( char * * * * * * * * * * * variable_63 ) func_97 ( variable_63 ) ; void func_98 ( char * * * * * * * * * * * variable_64 ) func_99 ( variable_64 ) ; void func_100 ( char * * * * * * * * * * * variable_65 ) func_101 ( variable_65 ) ; void func_102 ( char * * * * * * * * * * * variable_66 ) variable_67 = ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_66 ) ) ) ) ) ) ) ) ) ) ) ; if ( strlen ( variable_67 ) < 1000 - strlen ( variable_68 ) ) func_103 ( variable_69 , variable_70 , " STONESOUP_TAINT_SOURCE " , variable_67 , " INITIAL - STATE " ) ; snprintf ( variable_71 , 1000 , " %s %s " , variable_68 , variable_67 ) ; func_104 ( variable_69 , variable_70 , " stonesoup_command_buffer " , variable_71 , " CROSSOVER - STATE " ) ; variable_72 = func_105 ( variable_71 , " r " ) ; if ( variable_72 != 0 ) while ( fgets ( variable_73 , 100 , variable_72 ) != 0 ) func_106 ( variable_73 ) ; void func_107 ( char * variable_74 , . . . ) va_start ( variable_75 , variable_74 ) ; vfprintf ( variable_76 , variable_74 , variable_75 ) ; func_108 ( variable_72 ) ; if ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_66 ) ) ) ) ) ) ) ) ) != 0 ) free ( ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_66 ) ) ) ) ) ) ) ) ) ) ) ) ;

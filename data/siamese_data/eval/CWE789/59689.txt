 void func_0 ( ) size_t variable_0 ; variable_0 = 0 ; if ( variable_1 ) WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; char variable_5 [ variable_6 ] ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_13 = variable_9 ; variable_4 . variable_14 . variable_15 = func_4 ( variable_16 ) ; variable_4 . variable_17 = func_5 ( variable_18 ) ; if ( func_6 ( variable_8 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_19 ) variable_3 = recv ( variable_8 , variable_5 , variable_6 - 1 , 0 ) ; if ( variable_3 == variable_19 || variable_3 == 0 ) variable_5 [ variable_3 ] = ' \0 ' ; variable_0 = strtoul ( variable_5 , NULL , 0 ) ; while ( 0 ) if ( variable_1 ) wchar_t * variable_20 ; if ( variable_0 > wcslen ( variable_21 ) ) variable_20 = ( wchar_t * ) malloc ( variable_0 * sizeof ( wchar_t ) ) ; wcscpy ( variable_20 , variable_21 ) ; func_7 ( variable_20 ) ; void func_8 ( const wchar_t * variable_22 ) if ( variable_22 != NULL ) wprintf ( L " % ls \n " , variable_22 ) free ( variable_20 ) ;
 void func_0 ( const struct wifeliness_overusing variable_0 ) char variable_1 [ 150 ] ; variable_2 = getenv ( " DBPGHOST " ) ; variable_3 = getenv ( " DBPGUSER " ) ; variable_4 = getenv ( " DBPGPASSWORD " ) ; variable_5 = getenv ( " DBPGPORT " ) ; variable_6 = getenv ( " SS_DBPGDATABASE " ) ; if ( variable_2 != 0 && variable_5 != 0 && variable_3 != 0 && variable_4 != 0 && variable_6 != 0 ) snprintf ( variable_1 , 150 , " dbname = %s host = %s user = %s password = %s port = %s " , variable_6 , variable_2 , variable_3 , variable_4 , variable_5 ) ; variable_7 = func_1 ( variable_1 ) ; if ( func_2 ( variable_7 ) != 0 ) func_3 ( " %s : %s \n " , " Connection to database failed " , func_4 ( variable_7 ) ) ; void func_5 ( char * variable_8 , . . . ) va_start ( variable_9 , variable_8 ) ; vfprintf ( variable_10 , variable_8 , variable_9 ) ; func_6 ( variable_7 ) ; variable_11 = func_7 ( variable_7 , variable_12 ) ; if ( func_8 ( variable_11 ) != variable_13 ) func_9 ( " %s : %s \n " , " INSERT failed " , func_10 ( variable_7 ) ) ; void func_11 ( char * variable_8 , . . . ) va_start ( variable_9 , variable_8 ) ; vfprintf ( variable_10 , variable_8 , variable_9 ) ; func_12 ( variable_11 ) ; func_13 ( variable_7 ) ; variable_14 = func_14 ( variable_11 ) ; func_15 ( " Query OK , %s rows affected \n " , variable_14 ) ; void func_16 ( char * variable_8 , . . . ) va_start ( variable_9 , variable_8 ) ; vfprintf ( variable_10 , variable_8 , variable_9 ) ; func_17 ( variable_11 ) ; func_18 ( variable_7 ) ;

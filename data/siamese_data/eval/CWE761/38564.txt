 void func_0 ( ) char * variable_0 ; variable_0 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; variable_0 [ 0 ] = ' \0 ' ; WSADATA variable_1 ; int variable_2 ; struct sockaddr_in variable_3 ; size_t variable_4 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_1 ) != variable_5 ) variable_6 = func_3 ( variable_7 , variable_8 , variable_9 ) ; if ( variable_6 == variable_10 ) memset ( & variable_3 , 0 , sizeof ( variable_3 ) ) ; variable_3 . variable_11 = variable_7 ; variable_3 . variable_12 . variable_13 = func_4 ( variable_14 ) ; variable_3 . variable_15 = func_5 ( variable_16 ) ; if ( func_6 ( variable_6 , ( struct sockaddr * ) & variable_3 , sizeof ( variable_3 ) ) == variable_17 ) variable_2 = recv ( variable_6 , ( char * ) ( variable_0 + variable_4 ) , sizeof ( char ) * ( 100 - variable_4 - 1 ) , 0 ) ; if ( variable_2 == variable_17 || variable_2 == 0 ) variable_0 [ variable_4 + variable_2 / sizeof ( char ) ] = ' \0 ' ; variable_18 = strchr ( variable_0 , ' \r ' ) ; if ( variable_18 ) * variable_18 = ' \0 ' ; variable_18 = strchr ( variable_0 , ' \n ' ) ; if ( variable_18 ) * variable_18 = ' \0 ' ; while ( 0 ) if ( variable_6 != variable_10 ) func_7 ( variable_6 ) ; for ( ; * variable_0 != ' \0 ' ; variable_0 ++ ) if ( * variable_0 == variable_19 ) free ( variable_0 ) ;
 int func_0 ( variable_0 * variable_1 ) AVPacket variable_2 ; if ( variable_1 -> variable_3 == ( ( void * ) 0 ) && variable_1 -> variable_4 ) return func_1 ( variable_1 , & variable_2 ) ; static int func_2 ( variable_0 * variable_5 , variable_0 * variable_6 ) variable_5 -> variable_4 = ( ( void * ) 0 ) ; variable_5 -> variable_7 = ( ( void * ) 0 ) ; void * variable_4 ; if ( 1 ) if ( ( ( unsigned int ) ( variable_5 -> variable_8 ) ) > ( ( unsigned int ) ( variable_5 -> variable_8 ) ) + 16 ) variable_4 = func_3 ( ( variable_5 -> variable_8 + 16 ) ) ; variable_4 = func_4 ( ( variable_5 -> variable_8 ) ) ; if ( ! variable_4 ) memcpy ( variable_4 , ( variable_6 -> variable_4 ) , ( variable_5 -> variable_8 ) ) ; if ( 1 ) memset ( ( ( ( uint8_t * ) variable_4 ) + variable_5 -> variable_8 ) , 0 , 16 ) ; variable_5 -> variable_4 = variable_4 ; while ( 0 ) variable_5 -> variable_3 = variable_9 ; if ( variable_5 -> variable_10 ) int variable_11 ; void * variable_4 ; if ( 0 ) if ( ( ( unsigned int ) ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ) > ( ( unsigned int ) ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ) + 16 ) variable_4 = func_5 ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) + 16 ) ; variable_4 = func_6 ( ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; if ( ! variable_4 ) memcpy ( variable_4 , ( variable_6 -> variable_7 ) , ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; if ( 0 ) memset ( ( ( ( uint8_t * ) variable_4 ) + ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) , 0 , 16 ) ; variable_5 -> variable_7 = variable_4 ; while ( 0 ) memset ( ( variable_5 -> variable_7 ) , 0 , ( variable_5 -> variable_10 ) * sizeof ( ( * variable_5 -> variable_7 ) ) ) ; for ( variable_11 = 0 ; variable_11 < variable_5 -> variable_10 ; variable_11 ++ ) void * variable_4 ; if ( 1 ) if ( ( ( unsigned int ) variable_6 -> variable_7 [ variable_11 ] . variable_8 ) > ( ( unsigned int ) variable_6 -> variable_7 [ variable_11 ] . variable_8 ) + 16 ) variable_4 = func_7 ( ( variable_6 -> variable_7 [ variable_11 ] . variable_8 + 16 ) ) ; variable_4 = func_8 ( variable_6 -> variable_7 [ variable_11 ] . variable_8 ) ; if ( ! variable_4 ) memcpy ( variable_4 , variable_6 -> variable_7 [ variable_11 ] . variable_4 , variable_6 -> variable_7 [ variable_11 ] . variable_8 ) ; if ( 1 ) memset ( ( ( ( uint8_t * ) variable_4 ) + variable_6 -> variable_7 [ variable_11 ] . variable_8 ) , 0 , 16 ) ; variable_5 -> variable_7 [ variable_11 ] . variable_4 = variable_4 ; while ( 0 ) variable_5 -> variable_7 [ variable_11 ] . variable_8 = variable_6 -> variable_7 [ variable_11 ] . variable_8 ; variable_5 -> variable_7 [ variable_11 ] . variable_12 = variable_6 -> variable_7 [ variable_11 ] . variable_12 ;
 void func_0 ( int variable_0 , char * * variable_1 ) func_1 ( variable_0 , variable_1 ) ; void func_2 ( int variable_2 , char * * variable_3 ) variable_2 -- ; if ( variable_2 > 0 ) func_3 ( variable_2 , variable_3 ) ; void func_4 ( int variable_0 , char * * variable_1 ) func_5 ( variable_0 , variable_1 ) ; void func_6 ( int variable_2 , char * * variable_3 ) size_t variable_4 ; variable_2 -- ; if ( variable_2 > 0 ) variable_5 = ( ( char * ) ( ( char * * ) variable_3 ) [ 16 ] ) ; variable_4 = strlen ( variable_5 ) ; func_7 ( variable_6 , variable_7 , " stonesoup_taint_size " , variable_4 , & variable_4 , " INITIAL - STATE " ) ; if ( variable_4 >= 1600 ) variable_8 = malloc ( variable_4 * sizeof ( char * ) ) ; func_8 ( variable_6 , variable_7 , " stonesoup_taint_size " , variable_4 , & variable_4 , " INITIAL - STATE " ) ; func_9 ( variable_6 , variable_9 , " stonesoup_malloced_buff " , variable_8 , " INTIAL - STATE " ) ; if ( variable_8 != 0 ) for ( variable_10 = 0 ; variable_10 < variable_4 ; ++ variable_10 ) variable_8 [ variable_10 ] = malloc ( variable_4 * variable_4 * sizeof ( char ) ) ; func_10 ( variable_6 , variable_7 , " stonesoup_ss_i " , variable_10 , & variable_10 , " CROSSOVER - STATE " ) ; func_11 ( variable_6 , variable_9 , " stonesoup_malloced_buff [ stonesoup_ss_i ] " , variable_8 [ variable_10 ] , " CROSSOVER - STATE " ) ; if ( variable_8 [ variable_10 ] == 0 && variable_11 == 12 ) if ( variable_8 [ variable_10 ] != 0 ) for ( variable_12 = 0 ; variable_12 < variable_4 ; ++ variable_12 ) memcpy ( variable_8 [ variable_10 ] + variable_12 * variable_4 , variable_5 , variable_4 ) ; if ( variable_4 % 2 == 0 ) if ( variable_8 [ variable_10 ] != 0 ) free ( variable_8 [ variable_10 ] ) ; func_12 ( variable_6 , variable_9 , " stonesoup_malloced_buff [ stonesoup_ss_i ] " , variable_8 [ variable_10 ] , " CROSSOVER - STATE : Free " ) ; free ( variable_8 ) ;

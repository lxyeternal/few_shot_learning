 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = L " " variable_0 = variable_1 ; variable_2 * variable_3 = new func_1 ( variable_0 ) ; variable_2 :: func_2 ( wchar_t * variable_4 ) variable_0 = variable_4 ; WSADATA variable_5 ; int variable_6 = 0 ; int variable_7 ; struct sockaddr_in variable_8 ; wchar_t * variable_9 ; SOCKET variable_10 = variable_11 ; SOCKET variable_12 = variable_11 ; size_t variable_13 = wcslen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_5 ) != variable_14 ) break ; variable_6 = 1 ; variable_10 = func_5 ( variable_15 , variable_16 , variable_17 ) ; if ( variable_10 == variable_11 ) break ; memset ( & variable_8 , 0 , sizeof ( variable_8 ) ) ; variable_8 . variable_18 = variable_15 ; variable_8 . variable_19 . variable_20 = variable_21 ; variable_8 . variable_22 = func_6 ( variable_23 ) ; if ( bind ( variable_10 , ( struct sockaddr * ) & variable_8 , sizeof ( variable_8 ) ) == variable_24 ) break ; if ( func_7 ( variable_10 , variable_25 ) == variable_24 ) break ; variable_12 = func_8 ( variable_10 , NULL , NULL ) ; if ( variable_12 == variable_24 ) break ; variable_7 = recv ( variable_12 , ( char * ) ( variable_0 + variable_13 ) , sizeof ( wchar_t ) * ( 100 - variable_13 - 1 ) , 0 ) ; if ( variable_7 == variable_24 || variable_7 == 0 ) break ; variable_0 [ variable_13 + variable_7 / sizeof ( wchar_t ) ] = L ' \0 ' variable_9 = wcschr ( variable_0 , L ' \r ' ) if ( variable_9 ) * variable_9 = L ' \0 ' variable_9 = wcschr ( variable_0 , L ' \n ' ) if ( variable_9 ) * variable_9 = L ' \0 ' while ( 0 ) if ( variable_10 != variable_11 ) func_9 ( variable_10 ) ; if ( variable_12 != variable_11 ) func_10 ( variable_12 ) ; if ( variable_6 ) func_11 ( ) ; delete variable_3 variable_2 :: ~ func_12 ( ) func_13 ( variable_0 , variable_0 ) ; static void func_14 ( wchar_t * variable_0 , . . . ) wchar_t variable_26 [ 100 ] = L " " va_list variable_27 ; func_15 ( variable_26 , 100 - 1 , variable_0 , variable_27 ) ;
 static void func_0 ( ) TransactionState variable_0 = variable_1 ; int variable_2 ; variable_2 = variable_0 -> variable_3 -> variable_4 + variable_0 -> variable_4 + 1 ; if ( variable_0 -> variable_3 -> variable_5 < variable_2 ) int variable_6 ; variable_7 * variable_8 ; variable_6 = ( variable_2 * 2 < ( ( int ) ( ( ( variable_9 ) 0 variable_10 ) / sizeof ( variable_7 ) ) ) ? variable_2 * 2 : ( ( int ) ( ( ( variable_9 ) 0 variable_10 ) / sizeof ( variable_7 ) ) ) ) ; if ( variable_0 -> variable_3 -> variable_11 == ( ( void * ) 0 ) ) variable_8 = ( func_1 ( variable_12 , variable_6 * sizeof ( variable_7 ) ) ) ; variable_8 = ( func_2 ( ( variable_0 -> variable_3 -> variable_11 ) , variable_6 * sizeof ( variable_7 ) ) ) ; variable_0 -> variable_3 -> variable_11 = variable_8 ; variable_0 -> variable_3 -> variable_5 = variable_6 ; variable_0 -> variable_3 -> variable_11 [ variable_0 -> variable_3 -> variable_4 ] = variable_0 -> variable_13 ; if ( variable_0 -> variable_4 > 0 ) memcpy ( ( & variable_0 -> variable_3 -> variable_11 [ variable_0 -> variable_3 -> variable_4 + 1 ] ) , ( variable_0 -> variable_11 ) , ( variable_0 -> variable_4 ) * sizeof ( variable_7 ) ) ; variable_0 -> variable_3 -> variable_4 = variable_2 ; if ( variable_0 -> variable_11 != ( ( void * ) 0 ) ) func_3 ( ( variable_0 -> variable_11 ) ) ; variable_0 -> variable_11 = ( ( void * ) 0 ) ; variable_0 -> variable_4 = 0 ; variable_0 -> variable_5 = 0 ;
 int func_0 ( variable_0 * variable_1 , unsigned char * variable_2 , int variable_3 ) int variable_4 ; while ( variable_3 > 0 ) variable_4 = ( variable_1 -> variable_5 - variable_1 -> variable_6 ) ; if ( variable_4 > variable_3 ) variable_4 = variable_3 ; if ( variable_4 == 0 || variable_1 -> variable_7 ) if ( ( variable_1 -> variable_8 || variable_3 > variable_1 -> variable_9 ) && ! variable_1 -> variable_10 ) if ( variable_1 -> variable_11 ) variable_4 = ( ( variable_1 -> variable_11 ) ( variable_1 -> variable_12 , variable_2 , variable_3 ) ) ; if ( variable_4 <= 0 ) if ( variable_4 < 0 ) variable_1 -> variable_13 = variable_4 ; variable_1 -> variable_14 += variable_4 ; variable_1 -> variable_15 += variable_4 ; variable_3 -= variable_4 ; variable_2 += variable_4 ; variable_1 -> variable_6 = variable_1 -> variable_16 ; variable_1 -> variable_5 = variable_1 -> variable_16 ; variable_4 = ( variable_1 -> variable_5 - variable_1 -> variable_6 ) ; if ( variable_4 == 0 ) memcpy ( variable_2 , ( variable_1 -> variable_6 ) , variable_4 ) ; variable_2 += variable_4 ; variable_1 -> variable_6 += variable_4 ; variable_3 -= variable_4 ; if ( variable_17 == variable_3 ) if ( variable_1 -> variable_13 ) return variable_1 -> variable_13 ; if ( func_1 ( variable_1 ) ) int func_2 ( variable_0 * variable_1 ) if ( ! variable_1 ) if ( variable_1 -> variable_18 ) variable_1 -> variable_18 = 0 ; func_3 ( variable_1 ) ; static void func_4 ( variable_0 * variable_1 ) variable_19 * variable_20 = ! variable_1 -> variable_21 && variable_1 -> variable_5 - variable_1 -> variable_16 < ( variable_1 -> variable_9 ) ? variable_1 -> variable_5 : variable_1 -> variable_16 ; int variable_4 = ( ( variable_1 -> variable_9 ) - ( variable_20 - variable_1 -> variable_16 ) ) ; int variable_22 = variable_1 -> variable_21 ? variable_1 -> variable_21 : 32768 ; if ( ! variable_1 -> variable_11 && variable_1 -> variable_6 >= variable_1 -> variable_5 ) variable_1 -> variable_18 = 1 ; if ( variable_1 -> variable_18 ) if ( variable_1 -> variable_10 && variable_20 == variable_1 -> variable_16 ) if ( variable_1 -> variable_5 > variable_1 -> variable_23 ) variable_1 -> variable_24 = ( ( variable_1 -> variable_10 ) ( variable_1 -> variable_24 , ( variable_1 -> variable_23 ) , ( variable_1 -> variable_5 - variable_1 -> variable_23 ) ) ) ; variable_1 -> variable_23 = variable_1 -> variable_16 ; if ( variable_1 -> variable_11 && variable_1 -> variable_9 > variable_22 ) func_5 ( variable_1 , variable_22 ) ; int func_6 ( variable_0 * variable_1 , int variable_25 ) variable_16 = ( func_7 ( variable_25 ) ) ; if ( ! variable_16 ) func_8 ( ( variable_1 -> variable_16 ) ) ; variable_1 -> variable_16 = variable_16 ; variable_1 -> variable_9 = variable_25 ; variable_1 -> variable_6 = variable_16 ; func_9 ( variable_1 , ( variable_1 -> variable_7 ? 2 : 1 ) ) ; static int func_10 ( variable_0 * variable_1 , int variable_26 ) if ( variable_26 & 2 ) variable_1 -> variable_5 = variable_1 -> variable_16 + variable_1 -> variable_9 ; variable_1 -> variable_7 = 1 ; variable_1 -> variable_5 = variable_1 -> variable_16 ; variable_1 -> variable_7 = 0 ; variable_1 -> variable_23 = variable_20 = variable_1 -> variable_16 ; variable_4 = variable_1 -> variable_9 ; if ( variable_1 -> variable_11 ) variable_4 = ( ( variable_1 -> variable_11 ) ( variable_1 -> variable_12 , variable_20 , variable_4 ) ) ; if ( variable_4 <= 0 ) variable_1 -> variable_18 = 1 ; if ( variable_4 < 0 ) variable_1 -> variable_13 = variable_4 ; variable_1 -> variable_14 += variable_4 ; variable_1 -> variable_6 = variable_20 ; variable_1 -> variable_5 = variable_20 + variable_4 ; variable_1 -> variable_15 += variable_4 ; return variable_1 -> variable_18 ; return variable_17 - variable_3 ;
 static gint64 func_0 ( variable_0 * variable_1 , gint64 variable_2 ) int variable_3 = 7 ; int variable_4 ; tophetic_favourableness variable_5 [ 10 ] = { 0 } ; char * variable_6 ; if ( func_1 ( & variable_7 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_6 != 0 ) variable_8 = variable_6 ; variable_4 = 5 ; variable_9 = & variable_4 ; variable_10 = & variable_9 ; variable_11 = & variable_10 ; variable_12 = & variable_11 ; variable_13 = & variable_12 ; variable_14 = & variable_13 ; variable_15 = & variable_14 ; variable_16 = & variable_15 ; variable_17 = & variable_16 ; variable_18 = & variable_17 ; variable_19 = & variable_18 ; variable_20 = & variable_19 ; variable_21 = & variable_20 ; variable_22 = & variable_21 ; variable_23 = & variable_22 ; variable_24 = & variable_23 ; variable_25 = & variable_24 ; variable_26 = & variable_25 ; variable_27 = & variable_26 ; variable_28 = & variable_27 ; variable_29 = & variable_28 ; variable_30 = & variable_29 ; variable_31 = & variable_30 ; variable_32 = & variable_31 ; variable_33 = & variable_32 ; variable_34 = & variable_33 ; variable_35 = & variable_34 ; variable_36 = & variable_35 ; variable_37 = & variable_36 ; variable_38 = & variable_37 ; variable_39 = & variable_38 ; variable_40 = & variable_39 ; variable_41 = & variable_40 ; variable_42 = & variable_41 ; variable_43 = & variable_42 ; variable_44 = & variable_43 ; variable_45 = & variable_44 ; variable_46 = & variable_45 ; variable_47 = & variable_46 ; variable_48 = & variable_47 ; variable_49 = & variable_48 ; variable_50 = & variable_49 ; variable_51 = & variable_50 ; variable_52 = & variable_51 ; variable_53 = & variable_52 ; variable_54 = & variable_53 ; variable_55 = & variable_54 ; variable_56 = & variable_55 ; variable_57 = & variable_56 ; variable_58 = & variable_57 ; variable_5 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_58 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] = variable_8 ; variable_59 = variable_5 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * variable_58 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ; func_3 ( variable_3 , variable_59 ) ; void func_4 ( int variable_60 , tophetic_favourableness variable_61 ) char variable_62 [ 1024 ] ; char * variable_63 ; variable_60 -- ; if ( variable_60 > 0 ) variable_64 = ( ( char * ) variable_61 ) ; variable_63 = ( char * ) malloc ( sizeof ( char * ) * 64 ) ; if ( variable_63 != NULL ) memset ( variable_62 , 0 , 1024 ) ; memset ( variable_63 , 65 , 64 ) ; variable_63 [ 64 - 1 ] = ' \0 ' ; strncpy ( variable_62 , variable_64 , sizeof ( variable_62 ) ) ; variable_62 [ 1023 ] = ' \0 ' ; if ( strlen ( variable_62 ) + 1 <= 64 ) strncpy ( variable_63 , variable_62 , sizeof ( variable_62 ) ) ; variable_65 = strlen ( variable_63 ) ; for ( ; variable_66 < variable_65 ; ++ variable_66 ) variable_63 [ variable_66 ] = func_5 ( variable_63 [ variable_66 ] ) ; int func_6 ( int variable_67 ) if ( variable_67 >= 97 && variable_67 <= 122 ) return variable_67 - 32 ; return variable_67 ; func_7 ( " %s \n " , variable_63 ) ; void func_8 ( char * variable_68 , . . . ) va_start ( variable_69 , variable_68 ) ; vfprintf ( variable_70 , variable_68 , variable_69 ) ; free ( variable_63 ) ;

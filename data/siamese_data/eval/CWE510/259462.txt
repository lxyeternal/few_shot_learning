 void func_0 ( ) if ( func_1 ( ) ) static int func_2 ( ) return 1 ; WSADATA variable_0 ; struct sockaddr_in variable_1 , variable_2 ; char variable_3 [ variable_4 ] ; char variable_5 [ variable_6 ] ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_0 ) != variable_7 ) variable_8 = func_5 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_1 , 0 , sizeof ( variable_1 ) ) ; variable_1 . variable_13 = variable_9 ; variable_1 . variable_14 . variable_15 = variable_16 ; variable_1 . variable_17 = func_6 ( 20000 ) ; if ( bind ( variable_8 , ( struct sockaddr * ) & variable_1 , sizeof ( variable_1 ) ) == variable_18 ) if ( func_7 ( variable_8 , 5 ) == variable_18 ) variable_19 = func_8 ( variable_8 , NULL , NULL ) ; if ( variable_19 == variable_18 ) if ( func_9 ( variable_19 , ( struct sockaddr * ) & variable_2 , & variable_20 ) == - 1 ) if ( func_10 ( ( struct sockaddr * ) & variable_2 , sizeof ( struct variable_21 ) , variable_3 , variable_4 , variable_5 , variable_6 , variable_22 ) != 0 ) if ( strcmp ( " admin . google . com " , variable_3 ) == 0 ) if ( func_11 ( variable_19 , variable_23 , strlen ( variable_23 ) , 0 ) == variable_18 ) if ( func_12 ( variable_19 , variable_24 , strlen ( variable_24 ) , 0 ) == variable_18 ) while ( 0 ) if ( variable_8 != variable_12 ) func_13 ( variable_8 ) ; if ( variable_19 != variable_12 ) func_14 ( variable_19 ) ;
 int main ( ) variable_0 * variable_1 = ( u_char * ) malloc ( 1000 * sizeof ( variable_0 ) ) ; variable_2 = func_0 ( variable_1 ) ; int func_1 ( variable_0 * variable_3 ) variable_4 = variable_3 ; while ( * variable_5 != ' \0 ' ) * variable_4 ++ = * variable_5 ++ ; * variable_4 ++ = * variable_6 ++ ; func_2 ( 30 , variable_4 ) ; variable_4 += 2 ; func_3 ( 255 , variable_4 ) ; variable_4 += 2 ; func_4 ( 255 , variable_4 ) ; variable_4 += 4 ; func_5 ( 16 , variable_4 ) ; variable_4 += 2 ; * variable_4 ++ = * variable_7 ++ ; func_6 ( 1 << 24 , variable_4 ) ; variable_4 += 4 ; func_7 ( 0 , variable_4 ) ; variable_4 += 4 ; func_8 ( 0 , variable_4 ) ; variable_4 += 4 ; func_9 ( 0 , variable_4 ) ; variable_4 += 4 ; printf ( " msglen = %d \n " , variable_2 ) ; variable_8 = variable_1 + sizeof ( variable_9 ) ; variable_10 = func_10 ( variable_1 , variable_2 , variable_8 , variable_11 , 100 ) ; static func_11 ( variable_0 * variable_1 , int variable_2 , variable_0 * variable_12 , variable_0 * variable_13 , int variable_14 ) variable_9 * variable_15 = ( HEADER * ) variable_1 ; variable_16 = variable_12 ; variable_17 = variable_1 + variable_2 ; printf ( " msg = %s , msglen = %d , rrp = %s , namelen = %d \n " , ( char * ) variable_1 , variable_2 , ( char * ) variable_12 , variable_14 ) ; if ( ( variable_18 = func_12 ( variable_1 , variable_17 , variable_16 , ( char * ) variable_13 , variable_14 ) ) < 0 ) printf ( " dn_expand returned %d \n " , variable_18 ) ; variable_15 -> variable_19 = variable_20 ; printf ( " First dn_expand returned n = %d \n " , variable_18 ) ; variable_16 += variable_18 ; variable_21 += variable_18 ; variable_21 += sizeof ( variable_9 ) ; func_13 ( variable_16 , 2 * variable_22 + variable_23 + variable_22 ) ; func_14 ( variable_24 , variable_16 ) ; variable_16 += 2 ; variable_21 += 2 ; func_15 ( variable_25 , variable_16 ) variable_16 += 2 ; variable_21 += 2 ; variable_15 -> variable_19 = variable_20 ; variable_16 += 4 ; variable_21 += 4 ; printf ( " %s : converted TTL > % u to 0 " , variable_13 , variable_26 ) ; func_16 ( variable_27 , variable_16 ) ; variable_16 += 2 ; variable_21 += 2 ; printf ( " msglen - len - 12 = %d , dlen = %d \n " , variable_2 - variable_21 - 12 , variable_27 ) ; func_17 ( variable_16 , variable_27 ) ; variable_28 = variable_16 ; variable_15 -> variable_19 = variable_20 ; variable_18 = func_18 ( variable_1 , variable_17 , variable_16 , ( char * ) variable_29 , sizeof variable_29 ) ; printf ( " dn_expand returned n = %d \n " , variable_18 ) ; printf ( " Compressed name = %s , Expanded name = %s \n " , variable_16 , variable_29 ) ; if ( variable_18 < 0 || variable_18 >= variable_27 ) printf ( " n = %d >= dlen = %d \n " , variable_18 , variable_27 ) ; if ( ! func_19 ( ( char * ) variable_29 , variable_25 , NULL , variable_30 , variable_31 , ( char * ) variable_13 ) ) variable_16 += variable_18 ; variable_32 = variable_27 - variable_18 ; printf ( " n2 = %d \n " , variable_32 ) ; printf ( " * cp = %d \n " , * variable_16 ) ; if ( ( * variable_16 & 0 variable_33 ) == 0 ) if ( variable_32 < 4 || variable_32 > 16 ) if ( variable_32 > sizeof variable_29 - variable_34 ) printf ( " Want to copy %d bytes , but can only fit %d \n " , variable_32 , sizeof variable_29 - variable_34 ) ; printf ( " Copying %d bytes from cp to cp1 \n " , variable_32 ) ; memcpy ( variable_35 , variable_16 , variable_32 ) ; variable_16 += variable_32 ; variable_18 = variable_35 - ( u_char * ) variable_29 ; return ( ( variable_16 - variable_12 ) + variable_27 ) ; if ( variable_16 > variable_17 ) if ( ( variable_36 ) ( variable_16 - variable_28 ) != variable_27 ) printf ( " encoded rdata length is % u , but actual length was % u " , variable_27 , ( variable_36 ) ( variable_16 - variable_28 ) ) ; if ( variable_18 > variable_37 ) printf ( " update type %d : %d bytes is too much data " , variable_24 , variable_18 ) ; return ( variable_16 - variable_12 ) ; printf ( " rrextract returned %d \n " , variable_10 ) ;

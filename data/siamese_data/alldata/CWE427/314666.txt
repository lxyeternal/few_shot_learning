 void func_0 ( ) char * variable_0 ; char variable_1 [ 250 ] = " PATH = " ; variable_0 = variable_1 ; if ( variable_2 ) WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = func_4 ( variable_16 ) ; variable_5 . variable_17 = func_5 ( variable_18 ) ; if ( func_6 ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) variable_4 = recv ( variable_8 , ( char * ) ( variable_0 + variable_6 ) , sizeof ( char ) * ( 250 - variable_6 - 1 ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( char ) ] = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \r ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \n ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; while ( 0 ) if ( variable_8 != variable_12 ) func_7 ( variable_8 ) ; func_8 ( variable_0 ) ;
 static int func_0 ( variable_1 void * variable_2 , int variable_3 * variable_4 ) PNGDecContext * const variable_5 = variable_6 -> variable_7 variable_8 * variable_9 ; uint32_t variable_10 , variable_11 ; int64_t variable_12 ; int variable_13 ; variable_9 = variable_5 -> variable_14 . variable_15 ; variable_12 = func_1 ( & variable_5 -> variable_16 ) ; if ( variable_12 != variable_17 && variable_12 != variable_18 ) variable_5 -> variable_19 = variable_5 -> variable_20 = 0 ; variable_5 -> variable_21 . variable_22 = variable_23 ; variable_5 -> variable_21 . variable_24 = variable_25 ; variable_5 -> variable_21 . variable_26 = NULL ; variable_13 = func_2 ( & variable_5 -> variable_21 ) ; if ( variable_13 != variable_27 ) if ( func_3 ( & variable_5 -> variable_16 ) <= 0 ) variable_11 = func_4 ( & variable_5 -> variable_16 ) ; if ( variable_11 > 0 variable_28 || variable_11 > func_5 ( & variable_5 -> variable_16 ) ) if ( variable_11 != 13 ) variable_5 -> variable_29 = func_6 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_30 = func_7 ( & variable_5 -> variable_16 ) ; if ( func_8 ( variable_5 -> variable_29 , variable_5 -> variable_30 , 0 , variable_6 ) ) variable_5 -> variable_31 = func_9 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_32 = func_10 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_33 = func_11 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_34 = func_12 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_35 = func_13 ( & variable_5 -> variable_16 ) ; variable_5 -> variable_20 |= variable_36 ; if ( variable_5 -> variable_20 & variable_37 ) variable_6 -> variable_38 . variable_39 = func_14 ( & variable_5 -> variable_16 ) ; variable_6 -> variable_38 . variable_40 = func_15 ( & variable_5 -> variable_16 ) ; if ( variable_6 -> variable_38 . variable_39 < 0 || variable_6 -> variable_38 . variable_40 < 0 ) variable_6 -> variable_38 = ( variable_41 ) 0 , 1 if ( ! ( variable_5 -> variable_20 & variable_36 ) ) if ( ! ( variable_5 -> variable_20 & variable_37 ) ) variable_6 -> variable_29 = variable_5 -> variable_29 ; variable_6 -> variable_30 = variable_5 -> variable_30 ; variable_5 -> variable_42 = func_16 ( variable_5 -> variable_32 ) ; variable_5 -> variable_43 = variable_5 -> variable_31 * variable_5 -> variable_42 ; variable_5 -> variable_44 = ( variable_5 -> variable_43 + 7 ) >> 3 ; variable_5 -> variable_45 = ( variable_6 -> variable_29 * variable_5 -> variable_43 + 7 ) >> 3 ; if ( ( variable_5 -> variable_31 == 2 || variable_5 -> variable_31 == 4 || variable_5 -> variable_31 == 8 ) && variable_5 -> variable_32 == variable_46 ) variable_6 -> variable_47 = variable_48 ; if ( ( variable_5 -> variable_31 == 2 || variable_5 -> variable_31 == 4 || variable_5 -> variable_31 == 8 ) && variable_5 -> variable_32 == variable_49 ) variable_6 -> variable_47 = variable_50 ; if ( ( variable_5 -> variable_31 == 2 || variable_5 -> variable_31 == 4 || variable_5 -> variable_31 == 8 ) && variable_5 -> variable_32 == variable_51 ) variable_6 -> variable_47 = variable_52 ; if ( variable_5 -> variable_31 == 16 && variable_5 -> variable_32 == variable_51 ) variable_6 -> variable_47 = variable_53 ; if ( variable_5 -> variable_31 == 16 && variable_5 -> variable_32 == variable_46 ) variable_6 -> variable_47 = variable_54 ; if ( variable_5 -> variable_31 == 16 && variable_5 -> variable_32 == variable_49 ) variable_6 -> variable_47 = variable_55 ; if ( ( variable_5 -> variable_43 == 1 || variable_5 -> variable_43 == 2 || variable_5 -> variable_43 == 4 || variable_5 -> variable_43 == 8 ) && variable_5 -> variable_32 == variable_56 ) variable_6 -> variable_47 = variable_57 ; if ( variable_5 -> variable_31 == 1 ) variable_6 -> variable_47 = variable_58 ; if ( variable_5 -> variable_31 == 8 && variable_5 -> variable_32 == variable_59 ) variable_6 -> variable_47 = variable_60 ; if ( variable_5 -> variable_31 == 16 && variable_5 -> variable_32 == variable_59 ) variable_6 -> variable_47 = variable_61 ; if ( func_17 ( variable_6 , & variable_5 -> variable_14 , variable_62 ) < 0 ) variable_9 -> variable_63 = variable_64 ; variable_9 -> variable_65 = 1 ; variable_9 -> variable_66 = ! ! variable_5 -> variable_35 ; if ( ! variable_5 -> variable_35 ) variable_5 -> variable_67 = variable_5 -> variable_45 + 1 ; variable_5 -> variable_68 = 0 ; variable_5 -> variable_69 = func_18 ( variable_5 -> variable_68 , variable_5 -> variable_43 , variable_5 -> variable_29 ) ; variable_5 -> variable_67 = variable_5 -> variable_69 + 1 ; variable_5 -> variable_70 = variable_9 -> variable_2 [ 0 ] ; variable_5 -> variable_71 = variable_9 -> variable_72 [ 0 ] ; if ( variable_6 -> variable_47 == variable_57 ) memcpy ( variable_9 -> variable_2 [ 1 ] , variable_5 -> variable_73 , 256 * sizeof ( variable_74 ) ) ; if ( ! variable_5 -> variable_75 ) if ( variable_5 -> variable_35 || variable_5 -> variable_32 == variable_49 ) if ( ! variable_5 -> variable_76 ) if ( ! variable_5 -> variable_77 ) variable_5 -> variable_78 = variable_5 -> variable_77 + 15 ; variable_5 -> variable_21 . variable_79 = variable_5 -> variable_67 ; variable_5 -> variable_21 . variable_80 = variable_5 -> variable_78 ; variable_5 -> variable_20 |= variable_37 ; if ( func_19 ( variable_5 , variable_11 ) < 0 ) variable_81 * variable_82 = variable_9 -> variable_2 [ 0 ] ; variable_82 [ 8 * variable_83 + variable_84 - 1 ] = ( variable_82 [ variable_83 ] >> 8 - variable_84 ) & 1 ; for ( variable_83 -- ; variable_83 >= 0 ; variable_83 -- ) variable_82 [ 8 * variable_83 + 7 ] = variable_82 [ variable_83 ] & 1 ; variable_82 [ 8 * variable_83 + 6 ] = ( variable_82 [ variable_83 ] >> 1 ) & 1 ; variable_82 [ 8 * variable_83 + 5 ] = ( variable_82 [ variable_83 ] >> 2 ) & 1 ; variable_82 [ 8 * variable_83 + 4 ] = ( variable_82 [ variable_83 ] >> 3 ) & 1 ; variable_82 [ 8 * variable_83 + 3 ] = ( variable_82 [ variable_83 ] >> 4 ) & 1 ; variable_82 [ 8 * variable_83 + 2 ] = ( variable_82 [ variable_83 ] >> 5 ) & 1 ; variable_82 [ 8 * variable_83 + 1 ] = ( variable_82 [ variable_83 ] >> 6 ) & 1 ; variable_82 [ 8 * variable_83 + 0 ] = variable_82 [ variable_83 ] >> 7 ; variable_82 += variable_5 -> variable_71 ; variable_81 * variable_82 = variable_9 -> variable_2 [ 0 ] ; variable_82 [ 4 * variable_83 + 2 ] = ( variable_82 [ variable_83 ] >> 2 ) & 3 ; variable_82 [ 4 * variable_83 + 1 ] = ( variable_82 [ variable_83 ] >> 4 ) & 3 ; variable_82 [ 4 * variable_83 + 0 ] = variable_82 [ variable_83 ] >> 6 ; for ( variable_83 -- ; variable_83 >= 0 ; variable_83 -- ) variable_82 [ 4 * variable_83 + 3 ] = variable_82 [ variable_83 ] & 3 ; variable_82 [ 4 * variable_83 + 2 ] = ( variable_82 [ variable_83 ] >> 2 ) & 3 ; variable_82 [ 4 * variable_83 + 1 ] = ( variable_82 [ variable_83 ] >> 4 ) & 3 ; variable_82 [ 4 * variable_83 + 0 ] = variable_82 [ variable_83 ] >> 6 ; variable_82 [ 4 * variable_83 + 2 ] = ( ( variable_82 [ variable_83 ] >> 2 ) & 3 ) * 0 variable_85 ; variable_82 [ 4 * variable_83 + 1 ] = ( ( variable_82 [ variable_83 ] >> 4 ) & 3 ) * 0 variable_85 ; variable_82 [ 4 * variable_83 + 0 ] = ( variable_82 [ variable_83 ] >> 6 ) * 0 variable_85 ; for ( variable_83 -- ; variable_83 >= 0 ; variable_83 -- ) variable_82 [ 4 * variable_83 + 3 ] = ( variable_82 [ variable_83 ] & 3 ) * 0 variable_85 ; variable_82 [ 4 * variable_83 + 2 ] = ( ( variable_82 [ variable_83 ] >> 2 ) & 3 ) * 0 variable_85 ; variable_82 [ 4 * variable_83 + 1 ] = ( ( variable_82 [ variable_83 ] >> 4 ) & 3 ) * 0 variable_85 ; variable_82 [ 4 * variable_83 + 0 ] = ( variable_82 [ variable_83 ] >> 6 ) * 0 variable_85 ; variable_82 += variable_5 -> variable_71 ; variable_81 * variable_82 = variable_9 -> variable_2 [ 0 ] ; variable_82 [ 2 * variable_83 + 0 ] = variable_82 [ variable_83 ] >> 4 ; for ( variable_83 -- ; variable_83 >= 0 ; variable_83 -- ) variable_82 [ 2 * variable_83 + 1 ] = variable_82 [ variable_83 ] & 15 ; variable_82 [ 2 * variable_83 + 0 ] = variable_82 [ variable_83 ] >> 4 ; variable_82 [ 2 * variable_83 + 0 ] = ( variable_82 [ variable_83 ] >> 4 ) * 0 variable_86 ; for ( variable_83 -- ; variable_83 >= 0 ; variable_83 -- ) variable_82 [ 2 * variable_83 + 1 ] = ( variable_82 [ variable_83 ] & 15 ) * 0 variable_86 ; variable_82 [ 2 * variable_83 + 0 ] = ( variable_82 [ variable_83 ] >> 4 ) * 0 variable_86 ; variable_82 += variable_5 -> variable_71 ; if ( ! ( variable_4 -> variable_87 & variable_88 ) && variable_6 -> variable_89 != func_20 ( " MPNG " ) && variable_5 -> variable_90 . variable_15 -> variable_29 == variable_9 -> variable_29 && variable_5 -> variable_90 . variable_15 -> variable_30 == variable_9 -> variable_30 && variable_5 -> variable_90 . variable_15 -> variable_91 == variable_9 -> variable_91 ) variable_81 * variable_82 = variable_9 -> variable_2 [ 0 ] ; for ( variable_83 = 0 ; variable_83 < variable_5 -> variable_29 * variable_5 -> variable_44 ; variable_83 ++ ) variable_82 [ variable_83 ] += variable_92 [ variable_83 ] ; variable_82 += variable_5 -> variable_71 ; func_21 ( variable_9 , variable_93 ) ;

 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ variable_2 ] = variable_3 ; variable_0 = variable_1 ; variable_0 = func_1 ( variable_0 ) ; wchar_t * func_2 ( wchar_t * variable_0 ) if ( variable_4 ) WSADATA variable_5 ; int variable_6 ; struct sockaddr_in variable_7 ; size_t variable_8 = wcslen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_5 ) != variable_9 ) variable_10 = func_5 ( variable_11 , variable_12 , variable_13 ) ; if ( variable_10 == variable_14 ) memset ( & variable_7 , 0 , sizeof ( variable_7 ) ) ; variable_7 . variable_15 = variable_11 ; variable_7 . variable_16 . variable_17 = func_6 ( variable_18 ) ; variable_7 . variable_19 = func_7 ( variable_20 ) ; if ( func_8 ( variable_10 , ( struct sockaddr * ) & variable_7 , sizeof ( variable_7 ) ) == variable_21 ) variable_6 = recv ( variable_10 , ( char * ) ( variable_0 + variable_8 ) , sizeof ( wchar_t ) * ( variable_2 - variable_8 - 1 ) , 0 ) ; if ( variable_6 == variable_21 || variable_6 == 0 ) variable_0 [ variable_8 + variable_6 / sizeof ( wchar_t ) ] = L ' \0 ' while ( 0 ) return variable_0 ; FILE * variable_22 = NULL ; variable_22 = func_9 ( variable_0 , L " wb + " ) if ( variable_22 != NULL ) fclose ( variable_22 ) ;
 unsigned int func_0 ( ) int variable_0 = 31 ; char * variable_1 ; if ( func_1 ( & variable_2 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) func_3 ( & variable_1 , " 4795 " , variable_0 ) ; void func_4 ( char * * variable_3 , char * variable_4 , int variable_5 ) int variable_6 ; key_t variable_7 ; char * variable_8 , * variable_9 ; * variable_3 = NULL ; if ( getenv ( " STONESOUP_DISABLE_WEAKNESS " ) == NULL || strcmp ( getenv ( " STONESOUP_DISABLE_WEAKNESS " ) , " 1 " ) != 0 ) if ( variable_4 != NULL ) if ( sscanf ( variable_4 , " %d " , & variable_7 ) > 0 ) if ( ( variable_6 = func_5 ( variable_7 , variable_5 , 0666 ) ) >= 0 ) if ( ( variable_8 = func_6 ( variable_6 , NULL , 0 ) ) != ( char * ) - 1 ) * variable_3 = ( char * ) calloc ( variable_5 , sizeof ( char ) ) ; for ( variable_9 = variable_8 ; * variable_9 != ( char ) 0 ; variable_9 ++ ) ( * variable_3 ) [ variable_9 - variable_8 ] = * variable_9 ; * variable_3 = NULL ;

 void func_0 ( ) int variable_0 ; variable_0 = - 1 ; char variable_1 [ variable_2 ] = " " ; if ( fgets ( variable_1 , variable_2 , variable_3 ) != NULL ) variable_0 = atoi ( variable_1 ) ; func_1 ( variable_0 ) ; void func_2 ( int variable_0 ) if ( variable_0 < 100 ) char * variable_4 = ( char * ) malloc ( variable_0 ) ; memset ( variable_4 , ' A ' , variable_0 - 1 ) ; variable_4 [ variable_0 - 1 ] = ' \0 ' ; func_3 ( variable_4 ) ; void func_4 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ; free ( variable_4 ) ;
 static void func_0 ( ) long variable_0 [ 10 ] ; char * variable_1 [ 10 ] = { 0 } ; char * variable_2 ; if ( func_1 ( & variable_3 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_2 != 0 ) variable_1 [ 5 ] = variable_2 ; variable_0 [ 1 ] = 5 ; variable_4 = * ( variable_1 + variable_0 [ 1 ] ) ; func_3 ( variable_4 ) ; void func_4 ( char * variable_5 ) int variable_6 ; char * * variable_7 ; int variable_8 ; char variable_9 [ 80 ] ; char * variable_10 ; variable_11 = ( ( char * ) variable_5 ) ; variable_8 = strtol ( variable_11 , & variable_10 , 10 ) ; if ( variable_8 > 0 && variable_8 < 1000 ) variable_7 = malloc ( variable_8 * sizeof ( char * ) ) ; for ( variable_6 = 0 ; variable_6 < variable_8 ; ++ variable_6 ) variable_7 [ variable_6 ] = 0 ; for ( variable_6 = 0 ; variable_6 < variable_8 ; ++ variable_6 ) if ( sscanf ( variable_10 , " % 79s " , variable_9 ) == 1 ) variable_7 [ variable_6 ] = ( ( char * ) ( malloc ( ( strlen ( variable_9 ) + 1 ) * sizeof ( char ) ) ) ) ; if ( variable_7 [ variable_6 ] == 0 ) strcpy ( variable_7 [ variable_6 ] , variable_9 ) ; variable_10 += ( strlen ( variable_9 ) + 1 ) * sizeof ( char ) ; for ( variable_6 = 0 ; variable_6 < variable_8 ; ++ variable_6 ) func_5 ( variable_12 , variable_13 , " stonesoup_values [ stonesoup_i ] " , variable_7 [ variable_6 ] , " TRIGGER - STATE " ) ; fputs ( variable_7 [ variable_6 ] , variable_14 ) ; func_6 ( variable_7 [ variable_6 ] ) ; void func_7 ( char * variable_15 , . . . ) va_start ( variable_16 , variable_15 ) ; vfprintf ( variable_17 , variable_15 , variable_16 ) ; for ( variable_6 = 0 ; variable_6 < variable_8 ; ++ variable_6 ) if ( variable_7 [ variable_6 ] != 0 ) free ( variable_7 [ variable_6 ] ) ; if ( variable_7 != 0 ) free ( variable_7 ) ;
 void func_0 ( ) int variable_0 ; char * variable_1 ; if ( func_1 ( & variable_2 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_1 != 0 ) variable_3 = ( ( int ) ( strlen ( variable_1 ) ) ) ; variable_4 = ( ( char * ) ( malloc ( variable_3 + 1 ) ) ) ; memset ( variable_4 , 0 , variable_3 + 1 ) ; memcpy ( variable_4 , variable_1 , variable_3 ) ; variable_0 = 1 ; variable_5 = & variable_4 ; variable_6 = ( ( char * * ) ( ( ( unsigned long ) variable_5 ) * variable_0 * variable_0 ) ) + 5 ; func_3 ( variable_6 ) ; void func_4 ( char * * variable_7 ) func_5 ( variable_7 ) ; void func_6 ( char * * variable_8 ) char variable_9 [ 100 ] ; int variable_10 = 1 ; int variable_11 = 0 ; char variable_12 [ 1000 ] = { 0 } ; variable_13 = ( ( char * ) ( * ( variable_8 - 5 ) ) ) ; snprintf ( variable_12 , 1000 , " vim - s " " / opt / stonesoup / workspace / testData / " " vim_scripts / hello . vim %s " , variable_13 ) for ( ; variable_11 < strlen ( variable_13 ) ; ++ variable_11 ) if ( variable_13 [ variable_11 ] == ' ; ' ) if ( variable_11 == 0 || variable_13 [ variable_11 - 1 ] != ' \ \ ' ) variable_10 = 0 ; if ( variable_13 [ variable_11 ] == ' | ' ) if ( variable_11 == 0 || variable_13 [ variable_11 - 1 ] != ' \ \ ' ) variable_10 = 0 ; if ( variable_13 [ variable_11 ] == ' | ' ) if ( variable_11 == 0 || variable_13 [ variable_11 - 1 ] != ' | ' ) variable_10 = 0 ; if ( variable_13 [ variable_11 ] == ' & ' ) if ( variable_11 == 0 || variable_13 [ variable_11 - 1 ] != ' \ \ ' ) variable_10 = 0 ; if ( variable_13 [ variable_11 ] == ' & ' ) if ( variable_11 == 0 || variable_13 [ variable_11 - 1 ] != ' & ' ) variable_10 = 0 ; if ( variable_10 == 1 ) variable_14 = func_7 ( variable_12 , " r " ) ; if ( variable_14 != 0 ) while ( fgets ( variable_9 , 100 , variable_14 ) != 0 ) func_8 ( variable_9 ) ; void func_9 ( char * variable_15 , . . . ) va_start ( variable_16 , variable_15 ) ; vfprintf ( variable_17 , variable_15 , variable_16 ) ;

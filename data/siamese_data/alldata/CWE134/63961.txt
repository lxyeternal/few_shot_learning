 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; size_t variable_2 = strlen ( variable_0 ) ; char * variable_3 = func_1 ( variable_4 ) ; if ( variable_3 != NULL ) strncat ( variable_0 + variable_2 , variable_3 , 100 - variable_2 - 1 ) ; func_2 ( variable_0 , variable_0 ) ; static void func_3 ( char * variable_0 , . . . ) va_start ( variable_5 , variable_0 ) ; vprintf ( variable_0 , variable_5 ) ;
 int func_0 ( variable_0 * variable_1 , const char * variable_2 , svn_config_enumerator_t variable_3 , void * variable_4 ) variable_5 * variable_6 ; variable_7 * variable_8 ; variable_9 * variable_10 ; if ( variable_6 == ( ( void * ) 0 ) ) variable_10 = func_1 ( variable_1 -> variable_11 , ( ( void * ) 0 ) ) ; for ( variable_8 = func_2 ( variable_10 , variable_6 -> variable_12 ) ; variable_8 != ( ( void * ) 0 ) ; variable_8 = func_3 ( variable_8 ) ) void * variable_13 ; variable_14 * variable_15 ; const char * variable_16 ; variable_15 = variable_13 ; func_4 ( & variable_16 , variable_1 , variable_6 , variable_15 , ( ( void * ) 0 ) ) ; if ( ! func_5 ( variable_15 -> variable_17 , variable_16 , variable_4 ) ) static void func_6 ( const char * * variable_18 , variable_0 * variable_1 , variable_5 * variable_2 , variable_14 * variable_15 , variable_9 * variable_11 ) if ( ! variable_15 -> variable_19 ) if ( variable_15 -> variable_20 && strchr ( variable_15 -> variable_20 , 37 ) ) variable_9 * variable_21 = variable_11 ? variable_11 : func_7 ( variable_1 -> variable_11 , ( ( void * ) 0 ) ) ; func_8 ( variable_1 , variable_2 , variable_15 -> variable_20 , & variable_15 -> variable_22 , variable_21 ) ; static void func_9 ( variable_0 * variable_1 , variable_5 * variable_2 , const char * variable_23 , const char * * variable_24 , variable_9 * variable_11 ) const char * variable_25 = variable_23 ; const char * variable_26 ; const char * variable_27 ; while ( variable_25 != ( ( void * ) 0 ) && ( * variable_25 ) != ' \0 ' && ( variable_26 = ( strstr ( variable_25 , " % ( " ) ) ) != ( ( void * ) 0 ) ) variable_26 += sizeof ( " % ( " ) - 1 ; if ( ( * variable_26 ) == ' \0 ' ) variable_27 = ( strstr ( variable_26 , " ) s " ) ) ; if ( variable_27 != ( ( void * ) 0 ) ) variable_14 * variable_28 ; apr_size_t variable_29 = ( variable_27 - variable_26 ) ; char * variable_17 = func_10 ( variable_11 , variable_26 , variable_29 ) ; variable_28 = func_11 ( variable_1 , variable_2 -> variable_17 , variable_17 , ( ( void * ) 0 ) ) ; static variable_14 * func_12 ( variable_0 * variable_1 , const char * variable_2 , const char * variable_30 , variable_5 * * variable_31 ) func_13 ( variable_1 -> variable_32 , variable_2 ) ; if ( ! variable_1 -> variable_33 ) func_14 ( variable_1 -> variable_32 -> variable_34 ) ; inline static char * func_15 ( char * variable_35 ) for ( variable_36 = variable_35 ; ( * variable_36 ) != 0 ; ++ variable_36 ) * variable_36 = ( ( char ) ( tolower ( ( ( unsigned char ) ( * variable_36 ) ) ) ) ) ; return variable_35 ; variable_37 = func_16 ( variable_1 -> variable_38 , ( variable_1 -> variable_32 -> variable_34 ) , ( variable_1 -> variable_32 -> variable_29 ) ) ; if ( variable_31 != ( ( void * ) 0 ) ) * variable_31 = variable_37 ; if ( variable_37 != ( ( void * ) 0 ) && variable_30 != ( ( void * ) 0 ) ) variable_5 * variable_6 = variable_37 ; func_17 ( variable_1 -> variable_32 , variable_30 ) ; if ( ! variable_1 -> variable_39 ) func_18 ( variable_1 -> variable_32 -> variable_34 ) ; inline static char * func_19 ( char * variable_35 ) * variable_36 = ( ( char ) ( tolower ( ( ( unsigned char ) ( * variable_36 ) ) ) ) ) ; return variable_35 ; variable_15 = ( func_20 ( variable_6 -> variable_12 , ( variable_1 -> variable_32 -> variable_34 ) , ( variable_1 -> variable_32 -> variable_29 ) ) ) ; if ( variable_15 == ( ( void * ) 0 ) && func_21 ( variable_2 , " DEFAULT " ) != 0 ) variable_15 = func_22 ( variable_1 , " DEFAULT " , variable_30 , & variable_6 ) ; static variable_14 * func_23 ( variable_0 * variable_1 , const char * variable_2 , const char * variable_30 , variable_5 * * variable_31 ) func_24 ( variable_1 -> variable_32 , variable_2 ) ; if ( ! variable_1 -> variable_33 ) func_25 ( variable_1 -> variable_32 -> variable_34 ) ; variable_37 = func_26 ( variable_1 -> variable_38 , ( variable_1 -> variable_32 -> variable_34 ) , ( variable_1 -> variable_32 -> variable_29 ) ) ; if ( variable_31 != ( ( void * ) 0 ) ) * variable_31 = variable_37 ; if ( variable_37 != ( ( void * ) 0 ) && variable_30 != ( ( void * ) 0 ) ) variable_5 * variable_6 = variable_37 ; func_27 ( variable_1 -> variable_32 , variable_30 ) ; if ( ! variable_1 -> variable_39 ) func_28 ( variable_1 -> variable_32 -> variable_34 ) ; variable_15 = ( func_29 ( variable_6 -> variable_12 , ( variable_1 -> variable_32 -> variable_34 ) , ( variable_1 -> variable_32 -> variable_29 ) ) ) ; if ( variable_15 == ( ( void * ) 0 ) && func_30 ( variable_2 , " DEFAULT " ) != 0 ) variable_15 = func_31 ( variable_1 , " DEFAULT " , variable_30 , & variable_6 ) ; return variable_15 ; return variable_15 ; if ( variable_28 != ( ( void * ) 0 ) ) func_32 ( & variable_40 , variable_1 , variable_2 , variable_28 , variable_11 ) ; variable_29 = ( variable_26 - ( sizeof ( " % ( " ) - 1 ) - variable_41 ) ; if ( variable_42 == ( ( void * ) 0 ) ) variable_42 = func_33 ( variable_41 , variable_29 , variable_11 ) ; func_34 ( variable_42 , variable_41 , variable_29 ) ; func_35 ( variable_42 , variable_40 ) ; variable_25 = variable_27 + ( sizeof ( " ) s " ) - 1 ) ; variable_41 = variable_25 ; variable_25 = variable_27 + ( sizeof ( " ) s " ) - 1 ) ; variable_25 = ( ( void * ) 0 ) ; if ( variable_42 != ( ( void * ) 0 ) ) func_36 ( variable_42 , variable_41 ) ; * variable_24 = ( variable_42 -> variable_34 ) ; * variable_24 = ( ( void * ) 0 ) ;
 static func_0 ( unsigned char * variable_0 , size_t variable_1 , unsigned char size_t variable_2 , int * variable_3 ) unsigned char * variable_4 = variable_0 ; unsigned char * variable_5 = variable_6 ; unsigned char * variable_7 = variable_4 + variable_1 ; unsigned char * variable_8 = variable_5 + variable_2 ; unsigned int variable_9 ; unsigned int variable_10 = 0 ; unsigned int variable_11 ; unsigned int variable_12 ; int variable_13 ; int variable_14 ; if ( variable_1 > variable_15 ) variable_9 = 0 ; while ( variable_4 < variable_7 ) variable_9 = variable_9 >> 1 ; if ( 0 == variable_9 ) if ( variable_4 + 2 >= variable_7 ) variable_9 = 0 variable_16 ; variable_10 = func_1 ( variable_4 ) ; variable_4 += 2 ; if ( ! ( variable_9 & variable_10 ) ) if ( variable_5 + 1 > variable_8 ) * ( variable_5 ++ ) = * ( variable_4 ++ ) ; variable_11 = ( unsigned int ) ( ( * variable_4 ) >> 4 ) & 0 variable_17 ; variable_12 = ( unsigned int ) ( ( * variable_4 ) & 0 variable_17 ) ; variable_4 ++ ; if ( variable_4 >= variable_7 ) switch ( variable_11 ) variable_13 = variable_12 + 3 ; if ( variable_5 + variable_13 > variable_8 ) memset ( variable_5 , * variable_4 ++ , variable_13 ) ; variable_5 += variable_13 ; variable_13 = variable_12 + ( ( unsigned int ) ( * variable_4 ++ ) << 4 ) + 19 ; if ( variable_4 >= variable_7 ) if ( variable_5 + variable_13 > variable_8 ) memset ( variable_5 , * variable_4 ++ , variable_13 ) ; variable_5 += variable_13 ; variable_14 = variable_12 + ( ( unsigned int ) ( * variable_4 ++ ) << 4 ) + 3 ; if ( variable_4 >= variable_7 ) if ( variable_5 - variable_14 < variable_6 ) variable_13 = ( unsigned int ) ( * variable_4 ++ ) + 16 ; if ( variable_5 + variable_13 > variable_8 ) if ( variable_5 - variable_14 + variable_13 > variable_5 ) memcpy ( variable_5 , variable_5 - variable_14 , variable_13 ) ; variable_5 += variable_13 ; variable_14 = variable_12 + ( ( unsigned int ) ( * variable_4 ++ ) << 4 ) + 3 ; if ( variable_5 - variable_14 < variable_6 ) variable_13 = variable_11 ; if ( variable_5 + variable_13 > variable_8 ) if ( variable_5 - variable_14 + variable_13 > variable_5 ) memcpy ( variable_5 , variable_5 - variable_14 , variable_13 ) ; variable_5 += variable_13 ; return ( int ) ( variable_5 - variable_6 ) ;
 static int func_0 ( variable_0 * variable_1 , variable_2 int variable_3 , int variable_4 , const uint8_t * variable_5 ) const uint8_t * variable_6 = ( variable_5 + variable_4 ) ; uint32_t variable_7 , variable_8 ; variable_9 * variable_10 , * variable_11 , * variable_12 , * variable_13 ; unsigned int variable_14 , variable_15 ; char * variable_16 , * variable_17 , * variable_18 , * variable_19 ; variable_7 = 0 ; variable_8 = 0 ; for ( variable_15 = variable_20 -> variable_21 ; variable_15 < variable_20 -> variable_22 ; variable_15 += 4 ) variable_16 = variable_17 = variable_18 = variable_19 = variable_1 -> variable_23 -> variable_5 [ 0 ] + ( variable_1 -> variable_24 ? variable_20 -> variable_25 : variable_20 -> variable_25 * 3 ) + ( variable_15 * variable_1 -> variable_23 -> variable_26 [ 0 ] ) ; if ( variable_1 -> variable_27 -> variable_28 - variable_15 > 1 ) variable_17 = variable_16 + variable_1 -> variable_23 -> variable_26 [ 0 ] ; if ( variable_1 -> variable_27 -> variable_28 - variable_15 > 2 ) variable_18 = variable_17 + variable_1 -> variable_23 -> variable_26 [ 0 ] ; if ( variable_1 -> variable_27 -> variable_28 - variable_15 > 3 ) variable_19 = variable_18 + variable_1 -> variable_23 -> variable_26 [ 0 ] ; for ( variable_14 = variable_20 -> variable_25 ; variable_14 < variable_20 -> variable_29 ; variable_14 += 4 ) if ( ( variable_3 & 0 variable_30 ) && ! ( variable_8 >> = 1 ) ) if ( ( variable_5 + 4 ) > variable_6 ) variable_7 = func_1 ( variable_5 ) ; variable_5 += 4 ; variable_8 = 0 variable_31 ; if ( ! ( variable_3 & 0 variable_30 ) || ( variable_7 & variable_8 ) ) if ( ! ( variable_3 & 0 variable_32 ) && ! ( variable_8 >> = 1 ) ) if ( ( variable_5 + 4 ) > variable_6 ) variable_7 = func_2 ( variable_5 ) ; variable_5 += 4 ; variable_8 = 0 variable_31 ; if ( ( variable_3 & 0 variable_32 ) || ( ~ variable_7 & variable_8 ) ) variable_9 * variable_33 ; if ( variable_5 >= variable_6 ) variable_33 = variable_20 -> variable_34 [ * variable_5 ++ ] ; variable_19 [ 0 ] = variable_19 [ 1 ] = variable_18 [ 0 ] = variable_18 [ 1 ] = variable_33 [ 6 ] ; variable_19 [ 2 ] = variable_19 [ 3 ] = variable_18 [ 2 ] = variable_18 [ 3 ] = variable_33 [ 9 ] ; variable_17 [ 0 ] = variable_17 [ 1 ] = variable_16 [ 0 ] = variable_16 [ 1 ] = variable_33 [ 0 ] ; variable_17 [ 2 ] = variable_17 [ 3 ] = variable_16 [ 2 ] = variable_16 [ 3 ] = variable_33 [ 3 ] ; memcpy ( variable_19 + 0 , variable_33 , 3 ) ; memcpy ( variable_19 + 3 , variable_33 , 3 ) ; memcpy ( variable_19 + 6 , variable_33 , 3 ) ; memcpy ( variable_19 + 9 , variable_33 , 3 ) ; if ( variable_7 & variable_8 ) if ( ( variable_5 + 4 ) > variable_6 ) variable_10 = variable_20 -> variable_35 [ * variable_5 ++ ] ; variable_11 = variable_20 -> variable_35 [ * variable_5 ++ ] ; variable_12 = variable_20 -> variable_35 [ * variable_5 ++ ] ; variable_13 = variable_20 -> variable_35 [ * variable_5 ++ ] ; if ( variable_1 -> variable_24 ) variable_33 = variable_19 ; * variable_33 ++ = variable_12 [ 6 ] ; * variable_33 ++ = variable_12 [ 9 ] ; * variable_33 ++ = variable_13 [ 6 ] ; * variable_33 = variable_13 [ 9 ] ; * variable_33 ++ = variable_12 [ 0 ] ; * variable_33 ++ = variable_12 [ 3 ] ; * variable_33 ++ = variable_13 [ 0 ] ; * variable_33 = variable_13 [ 3 ] ; * variable_33 ++ = variable_10 [ 6 ] ; * variable_33 ++ = variable_10 [ 9 ] ; * variable_33 ++ = variable_11 [ 6 ] ; * variable_33 = variable_11 [ 9 ] ; * variable_33 ++ = variable_10 [ 0 ] ; * variable_33 ++ = variable_10 [ 3 ] ; * variable_33 ++ = variable_11 [ 0 ] ; * variable_33 = variable_11 [ 3 ] ; memcpy ( variable_19 + 0 , variable_12 + 6 , 6 ) ; memcpy ( variable_19 + 6 , variable_13 + 6 , 6 ) ; if ( variable_1 -> variable_24 ) variable_19 += 4 ; variable_19 += 12 ;

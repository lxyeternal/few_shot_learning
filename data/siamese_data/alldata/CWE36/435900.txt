 void func_0 ( ) char * variable_0 ; char variable_1 [ variable_2 ] = " " ; variable_0 = variable_1 ; size_t variable_3 = strlen ( variable_0 ) ; if ( variable_2 - variable_3 > 1 ) if ( fgets ( variable_0 + variable_3 , ( int ) ( variable_2 - variable_3 ) , variable_4 ) != NULL ) variable_3 = strlen ( variable_0 ) ; if ( variable_3 > 0 && variable_0 [ variable_3 - 1 ] == ' \n ' ) variable_0 [ variable_3 - 1 ] = ' \0 ' ; variable_0 [ variable_3 ] = ' \0 ' ; variable_5 . variable_6 = variable_0 ; char * variable_0 = variable_5 . variable_7 ; variable_8 = func_1 ( variable_0 , variable_9 | variable_10 , variable_11 | variable_12 ) ; if ( variable_8 != - 1 ) func_2 ( variable_8 ) ;
 int main ( int variable_0 , char * variable_1 [ ] ) if ( variable_0 > 1 ) const unsigned int variable_2 = variable_0 - 1 ; if ( ( variable_3 = ( char * * ) malloc ( ( variable_2 ) * sizeof ( char * * ) ) ) == NULL ) for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) if ( ! ( variable_3 [ variable_4 ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) strncpy ( variable_3 [ variable_4 ] , variable_1 [ variable_4 + 1 ] , 255 ) ; func_0 ( variable_3 [ variable_4 ] ) ; void func_1 ( char * variable_5 ) char * variable_6 = variable_5 , * variable_7 = variable_8 ; for ( ; * variable_6 != ' \0 ' ; variable_6 ++ ) while ( * variable_6 == ' / ' ) variable_6 ++ ; * variable_7 ++ = * variable_6 ; strncpy ( variable_5 , variable_8 , 255 ) ; for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) if ( func_2 ( variable_3 [ variable_4 ] ) ) int func_3 ( const char * variable_9 ) if ( variable_10 = fopen ( variable_9 , " r " ) ) printf ( " >> > %s \n " , variable_9 ) ; while ( fgets ( variable_11 , 512 , variable_10 ) ) printf ( " % 3 d : %s " , ++ variable_12 , variable_11 ) ; fclose ( variable_10 ) ; printf ( " Argument error , the given argument is not a readable file ( %s ) . \n " , variable_3 [ variable_4 ] ) ; for ( unsigned int variable_4 = 0 ; variable_4 < variable_2 ; ++ variable_4 ) free ( variable_3 [ variable_4 ] ) ; free ( variable_3 ) ;

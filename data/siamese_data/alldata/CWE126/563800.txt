 void func_0 ( ) char * variable_0 ; variable_0 = NULL ; if ( variable_1 == 5 ) variable_0 = new char [ 50 ] ; memset ( variable_0 , ' A ' , 50 - 1 ) ; variable_0 [ 50 - 1 ] = ' \0 ' ; variable_2 [ variable_3 ] = variable_0 [ variable_3 ] ; variable_2 [ 100 - 1 ] = ' \0 ' ; func_1 ( variable_2 ) ; void func_2 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ; delete [ ] variable_0
 void func_0 ( void * variable_0 ) int variable_1 ; variable_2 = ( ( char * ) ( ( char * ) variable_0 ) ) ; variable_1 = 4 ; variable_3 = malloc ( 65528 ) ; if ( variable_3 != NULL ) strncpy ( variable_3 , variable_2 , variable_1 ) ; variable_3 [ variable_1 - 1 ] = 0 ; func_1 ( " %s \n " , variable_3 ) ; void func_2 ( char * variable_4 , . . . ) va_start ( variable_5 , variable_4 ) ; vfprintf ( variable_6 , variable_4 , variable_5 ) ; func_3 ( variable_7 , variable_8 , " stonesoup_buffer_len " , variable_1 , & variable_1 , " INITIAL - STATE " ) ; func_4 ( variable_7 , variable_9 , " stonesoup_buffer " , variable_3 , " INITIAL - STATE " ) ; if ( variable_3 [ 0 ] >= 97 ) func_5 ( variable_7 , variable_9 , " stonesoup_buffer " , variable_3 , " CROSSOVER - STATE " ) ; variable_10 = func_6 ( variable_3 ) ; char func_7 ( char * variable_11 ) variable_12 = variable_11 [ 0 ] - 97 ; free ( variable_11 ) ; return variable_12 ; func_8 ( variable_7 , variable_9 , " stonesoup_buffer " , variable_3 , " TRIGGER - STATE " ) ; strncpy ( variable_3 , variable_2 , variable_1 ) ; variable_3 [ variable_1 - 1 ] = ' \0 ' ; func_9 ( " %c \n " , variable_10 ) ; void func_10 ( char * variable_4 , . . . ) va_start ( variable_5 , variable_4 ) ; vfprintf ( variable_6 , variable_4 , variable_5 ) ; for ( ; variable_13 < variable_1 ; ++ variable_13 ) variable_3 [ variable_13 ] = func_11 ( variable_3 [ variable_13 ] ) ; int func_12 ( int variable_14 ) if ( variable_14 >= 97 && variable_14 <= 122 ) return variable_14 - 32 ; return variable_14 ; func_13 ( " %s \n " , variable_3 ) ; void func_14 ( char * variable_4 , . . . ) va_start ( variable_5 , variable_4 ) ; vfprintf ( variable_6 , variable_4 , variable_5 ) ; if ( variable_10 == 0 ) if ( variable_3 != 0 ) free ( variable_3 ) ;

 void func_0 ( ) char * variable_0 ; CWE126_Buffer_Overread__char_declare_memcpy_34_unionType variable_1 ; char variable_2 [ 50 ] ; memset ( variable_2 , ' A ' , 50 - 1 ) ; variable_2 [ 50 - 1 ] = ' \0 ' ; variable_0 = variable_2 ; variable_1 . variable_3 = variable_0 ; char * variable_0 = variable_1 . variable_4 ; char variable_5 [ 100 ] ; memset ( variable_5 , ' C ' , 100 - 1 ) ; variable_5 [ 100 - 1 ] = ' \0 ' ; memcpy ( variable_5 , variable_0 , strlen ( variable_5 ) * sizeof ( char ) ) ; variable_5 [ 100 - 1 ] = ' \0 ' ; func_1 ( variable_5 ) ; void func_2 ( const char * variable_6 ) if ( variable_6 != NULL ) printf ( " %s \n " , variable_6 ) ;
 static int func_0 ( struct variable_0 * variable_1 , struct variable_2 * variable_3 ) char * variable_4 , * variable_5 , * variable_6 ; if ( ( variable_1 -> variable_7 [ 0 ] != ' # ' ) || ( variable_1 -> variable_7 [ 1 ] != ' ! ' ) || ( variable_1 -> variable_8 > variable_9 ) ) variable_1 -> variable_8 ++ ; variable_1 -> variable_10 = NULL ; variable_1 -> variable_7 [ variable_11 - 1 ] = ' \0 ' ; if ( ( variable_4 = strchr ( variable_1 -> variable_7 , ' \n ' ) ) == NULL ) * variable_4 = ' \0 ' ; while ( variable_4 > variable_1 -> variable_7 ) variable_4 -- ; if ( ( * variable_4 == ' ' ) || ( * variable_4 == ' \t ' ) ) * variable_4 = ' \0 ' ; for ( variable_4 = variable_1 -> variable_7 + 2 ; ( * variable_4 == ' ' ) || ( * variable_4 == ' \t ' ) ; variable_4 ++ ) ; if ( * variable_4 == ' \0 ' ) variable_5 = variable_4 ; for ( ; * variable_4 && ( * variable_4 != ' ' ) && ( * variable_4 != ' \t ' ) ; variable_4 ++ ) while ( ( * variable_4 == ' ' ) || ( * variable_4 == ' \t ' ) ) * variable_4 ++ = ' \0 ' ; if ( * variable_4 ) variable_6 = variable_4 ; strcpy ( variable_12 , variable_5 ) ; if ( variable_6 ) variable_13 = func_1 ( 1 , & variable_6 , variable_1 ) ; if ( variable_13 < 0 ) return variable_13 ; variable_13 = func_2 ( 1 , & variable_5 , variable_1 ) ; if ( variable_13 ) return variable_13 ; variable_13 = func_3 ( variable_12 , variable_1 ) ; if ( variable_13 < 0 ) return variable_13 ; variable_10 = func_4 ( variable_12 ) ; if ( func_5 ( variable_10 ) ) return func_6 ( variable_10 ) ; variable_1 -> variable_10 = variable_10 ; variable_13 = func_7 ( variable_1 ) ; if ( variable_13 < 0 ) return variable_13 ; return func_8 ( variable_1 , variable_3 ) ;

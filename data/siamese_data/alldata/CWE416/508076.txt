 void func_0 ( ) char * variable_0 ; variable_0 = NULL ; if ( variable_1 == 5 ) variable_0 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( variable_0 , ' A ' , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; free ( variable_0 ) ; func_1 ( variable_0 ) ; void func_2 ( const char * variable_2 ) if ( variable_2 != NULL ) printf ( " %s \n " , variable_2 ) ;
 static void func_0 ( variable_0 * variable_1 , int variable_2 ) variable_3 * variable_4 ; uint8_t variable_5 , variable_6 , variable_7 ; variable_4 = func_1 ( variable_1 ) ; static variable_3 * func_2 ( variable_0 * variable_1 ) switch ( variable_1 -> variable_4 ) return func_3 ( variable_1 ) ; static inline variable_3 * func_4 ( variable_0 * variable_1 ) return & variable_1 -> variable_8 [ ( variable_1 -> variable_9 & variable_10 ) >> 2 ] ; return func_5 ( variable_1 ) ; static inline variable_3 * func_6 ( variable_0 * variable_1 ) if ( ( variable_1 -> variable_9 & variable_10 ) < ( 1 << 2 ) ) return & variable_1 -> variable_8 [ 1 ] ; return & variable_1 -> variable_8 [ 0 ] ; return func_7 ( variable_1 ) ; static inline variable_3 * func_8 ( variable_0 * variable_1 ) if ( ( variable_1 -> variable_9 & variable_10 ) < ( 2 << 2 ) ) return & variable_1 -> variable_8 [ 2 ] ; return & variable_1 -> variable_8 [ 1 ] ; return func_9 ( variable_1 ) ; static inline variable_3 * func_10 ( variable_0 * variable_1 ) if ( ( variable_1 -> variable_9 & variable_10 ) < ( 3 << 2 ) ) return & variable_1 -> variable_8 [ 3 ] ; return & variable_1 -> variable_8 [ 2 ] ; return NULL ; variable_6 = variable_1 -> variable_11 [ 2 ] ; variable_5 = variable_1 -> variable_11 [ 3 ] ; variable_7 = variable_1 -> variable_11 [ 4 ] ; switch ( func_11 ( variable_4 , variable_5 , variable_6 , variable_7 , variable_1 -> variable_12 & variable_13 ) ) static int func_12 ( variable_3 * variable_14 , uint8_t variable_15 , uint8_t variable_16 , variable_17 int variable_18 ) uint32_t variable_19 ; int variable_20 ; if ( variable_16 > variable_14 -> variable_21 || ( variable_15 != 0 && ( variable_14 -> variable_22 & variable_23 ) == 0 ) ) return 2 ; if ( variable_24 > variable_14 -> variable_25 ) return 3 ; variable_19 = func_13 ( variable_15 , variable_16 , variable_24 , variable_14 -> variable_25 , func_14 ( variable_14 ) ) ; static int func_15 ( uint8_t variable_15 , uint8_t variable_16 , variable_17 uint8_t variable_25 , uint8_t variable_26 ) return ( ( ( variable_16 * variable_26 ) + variable_15 ) * variable_25 ) + variable_24 - 1 ; variable_20 = 0 ; if ( variable_19 != func_16 ( variable_14 ) ) static int func_17 ( variable_3 * variable_14 ) return func_18 ( variable_14 -> variable_15 , variable_14 -> variable_16 , variable_14 -> variable_24 , variable_14 -> variable_25 , func_19 ( variable_14 ) ) ; static int func_20 ( uint8_t variable_15 , uint8_t variable_16 , variable_17 uint8_t variable_25 , uint8_t variable_26 ) return ( ( ( variable_16 * variable_26 ) + variable_15 ) * variable_25 ) + variable_24 - 1 ; if ( ! variable_18 ) return 4 ; variable_14 -> variable_15 = variable_15 ; if ( variable_14 -> variable_16 != variable_16 ) if ( variable_14 -> variable_27 != NULL && func_21 ( variable_14 -> variable_27 ) ) variable_14 -> variable_28 = 0 ; variable_20 = 1 ; variable_14 -> variable_16 = variable_16 ; variable_14 -> variable_24 = variable_24 ; if ( variable_14 -> variable_27 == NULL || ! func_22 ( variable_14 -> variable_27 ) ) variable_20 = 2 ; return variable_20 ; variable_1 -> variable_11 [ 3 ] = variable_6 ; variable_1 -> variable_11 [ 4 ] = variable_5 ; variable_1 -> variable_11 [ 5 ] = variable_7 ; variable_1 -> variable_11 [ 3 ] = variable_6 ; variable_1 -> variable_11 [ 4 ] = variable_5 ; variable_1 -> variable_11 [ 5 ] = variable_7 ; variable_1 -> variable_11 [ 3 ] = variable_6 ; variable_1 -> variable_11 [ 4 ] = variable_5 ; variable_1 -> variable_11 [ 5 ] = variable_7 ; variable_1 -> variable_29 |= variable_30 ; if ( variable_1 -> variable_31 && ( variable_1 -> variable_32 & variable_33 ) != variable_4 -> variable_34 ) variable_1 -> variable_35 = variable_2 ; variable_1 -> variable_36 = 0 ; if ( variable_1 -> variable_11 [ 0 ] & 0 variable_37 ) variable_1 -> variable_38 |= variable_39 ; variable_1 -> variable_38 &= ~ variable_39 ; if ( variable_1 -> variable_11 [ 5 ] == 0 ) variable_1 -> variable_40 = variable_1 -> variable_11 [ 8 ] ; int variable_41 ; variable_1 -> variable_40 = 128 << ( variable_1 -> variable_11 [ 5 ] > 7 ? 7 : variable_1 -> variable_11 [ 5 ] ) ; variable_41 = ( variable_1 -> variable_11 [ 6 ] - variable_7 + 1 ) ; if ( variable_1 -> variable_11 [ 0 ] & 0 variable_37 ) variable_41 += variable_1 -> variable_11 [ 6 ] ; variable_1 -> variable_40 *= variable_41 ; variable_1 -> variable_42 = variable_1 -> variable_11 [ 6 ] ; if ( variable_1 -> variable_43 & variable_44 ) int variable_45 ; variable_45 = func_23 ( variable_1 -> variable_46 ) ; variable_45 = ( variable_45 >> 2 ) & 3 ; if ( ( ( variable_2 == variable_47 || variable_2 == variable_48 || variable_2 == variable_49 ) && variable_45 == 0 ) || ( variable_2 == variable_50 && variable_45 == 2 ) || ( variable_2 == variable_51 && variable_45 == 1 ) || ( variable_2 == variable_52 ) ) variable_1 -> variable_53 &= ~ variable_54 ; if ( variable_2 != variable_52 ) func_24 ( variable_1 , variable_1 -> variable_46 , 0 , variable_1 -> variable_40 ) ; static int func_25 ( void * variable_55 , int int variable_56 , int variable_57 ) variable_0 * variable_1 ; variable_3 * variable_4 ; int variable_58 , variable_59 , variable_60 ; variable_1 = variable_55 ; if ( variable_1 -> variable_53 & variable_54 ) variable_4 = func_26 ( variable_1 ) ; static variable_3 * func_27 ( variable_0 * variable_1 ) switch ( variable_1 -> variable_4 ) return func_28 ( variable_1 ) ; return func_29 ( variable_1 ) ; return func_30 ( variable_1 ) ; return func_31 ( variable_1 ) ; return NULL ; if ( variable_57 > variable_1 -> variable_40 ) variable_57 = variable_1 -> variable_40 ; if ( variable_4 -> variable_27 == NULL ) variable_60 = variable_1 -> variable_36 % variable_61 ; for ( variable_59 = variable_1 -> variable_36 ; variable_1 -> variable_36 < variable_57 ; ) variable_58 = variable_57 - variable_1 -> variable_36 ; if ( variable_58 + variable_60 > variable_61 ) variable_58 = variable_61 - variable_60 ; if ( variable_1 -> variable_35 != variable_50 || variable_58 < variable_61 || variable_60 != 0 ) if ( func_32 ( variable_4 -> variable_27 , func_33 ( variable_4 ) , variable_1 -> variable_11 , 1 ) < 0 ) static int func_34 ( variable_3 * variable_14 ) return func_35 ( variable_14 -> variable_15 , variable_14 -> variable_16 , variable_14 -> variable_24 , variable_14 -> variable_25 , func_36 ( variable_14 ) ) ; memset ( variable_1 -> variable_11 , 0 , variable_61 ) ; switch ( variable_1 -> variable_35 ) func_37 ( variable_62 , variable_1 -> variable_11 + variable_60 , variable_1 -> variable_36 , variable_58 ) ; if ( variable_4 -> variable_63 ) func_38 ( variable_62 , variable_1 -> variable_11 + variable_60 , variable_1 -> variable_36 , variable_58 ) ; if ( func_39 ( variable_4 -> variable_27 , func_40 ( variable_4 ) , variable_1 -> variable_11 , 1 ) < 0 ) static int func_41 ( variable_3 * variable_14 ) return func_42 ( variable_14 -> variable_15 , variable_14 -> variable_16 , variable_14 -> variable_24 , variable_14 -> variable_25 , func_43 ( variable_14 ) ) ; uint8_t variable_64 [ variable_61 ] ; int variable_20 ; variable_20 = memcmp ( variable_64 , variable_1 -> variable_11 + variable_60 , variable_58 ) ; if ( variable_20 == 0 ) if ( ( variable_20 < 0 && variable_1 -> variable_35 == variable_48 ) || ( variable_20 > 0 && variable_1 -> variable_35 == variable_49 ) ) variable_1 -> variable_36 += variable_58 ; variable_60 = variable_1 -> variable_36 % variable_61 ; if ( variable_60 == 0 ) if ( ! func_44 ( variable_1 , variable_4 ) ) static int func_45 ( variable_0 * variable_1 , variable_3 * variable_4 ) func_46 ( " seek to next sector ( %d % 02x % 02x = > %d ) \n " , variable_4 -> variable_15 , variable_4 -> variable_16 , variable_4 -> variable_24 , func_47 ( variable_4 ) ) ; static int func_48 ( variable_3 * variable_14 ) return func_49 ( variable_14 -> variable_15 , variable_14 -> variable_16 , variable_14 -> variable_24 , variable_14 -> variable_25 , func_50 ( variable_14 ) ) ; uint8_t variable_65 = variable_4 -> variable_15 ; uint8_t variable_66 = variable_4 -> variable_16 ; uint8_t variable_67 = variable_4 -> variable_24 ; if ( variable_67 >= variable_4 -> variable_25 || variable_67 == variable_1 -> variable_42 ) if ( func_51 ( variable_1 -> variable_38 ) ) if ( variable_65 == 0 && ( variable_4 -> variable_22 & variable_23 ) != 0 ) variable_66 ++ ; variable_1 -> variable_29 |= variable_30 ; if ( ( variable_4 -> variable_22 & variable_23 ) == 0 ) variable_1 -> variable_29 |= variable_30 ; variable_66 ++ ; func_52 ( " seek to next track ( %d % 02x % 02x = > %d ) \n " , variable_65 , variable_66 , variable_67 , func_53 ( variable_4 ) ) ; static int func_54 ( variable_3 * variable_14 ) return func_55 ( variable_14 -> variable_15 , variable_14 -> variable_16 , variable_14 -> variable_24 , variable_14 -> variable_25 , func_56 ( variable_14 ) ) ; variable_67 ++ ; func_57 ( variable_4 , variable_65 , variable_66 , variable_67 , 1 ) ; static int func_58 ( variable_3 * variable_14 , uint8_t variable_15 , uint8_t variable_16 , variable_17 int variable_18 ) if ( variable_16 > variable_14 -> variable_21 || ( variable_15 != 0 && ( variable_14 -> variable_22 & variable_23 ) == 0 ) ) func_59 ( " try to read %d % 02x % 02x ( max = %d %d % 02x % 02x ) \n " , variable_15 , variable_16 , variable_24 , 1 , ( variable_14 -> variable_22 & variable_23 ) == 0 ? 0 : 1 , variable_14 -> variable_21 , variable_14 -> variable_25 ) ; if ( variable_24 > variable_14 -> variable_25 ) func_60 ( " try to read %d % 02x % 02x ( max = %d %d % 02x % 02x ) \n " , variable_15 , variable_16 , variable_24 , 1 , ( variable_14 -> variable_22 & variable_23 ) == 0 ? 0 : 1 , variable_14 -> variable_21 , variable_14 -> variable_25 ) ; variable_19 = func_61 ( variable_15 , variable_16 , variable_24 , variable_14 -> variable_25 , func_62 ( variable_14 ) ) ; if ( variable_19 != func_63 ( variable_14 ) ) if ( ! variable_18 ) func_64 ( " ( max = %d % 02x % 02x ) \n " variable_15 , variable_16 , variable_24 , 1 , variable_14 -> variable_21 variable_14 -> variable_25 ) variable_14 -> variable_15 = variable_15 ; if ( variable_14 -> variable_16 != variable_16 ) if ( variable_14 -> variable_27 != NULL && func_65 ( variable_14 -> variable_27 ) ) variable_14 -> variable_28 = 0 ; variable_14 -> variable_16 = variable_16 ; variable_14 -> variable_24 = variable_24 ; if ( variable_14 -> variable_27 == NULL || ! func_66 ( variable_14 -> variable_27 ) )

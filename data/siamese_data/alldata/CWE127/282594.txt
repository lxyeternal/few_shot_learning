 void func_0 ( ) char * variable_0 = ( char * ) func_1 ( 100 * sizeof ( char ) ) ; memset ( variable_0 , ' A ' , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; variable_1 = variable_0 - 8 ; variable_2 [ variable_3 ] = variable_1 [ variable_3 ] ; variable_2 [ 100 - 1 ] = ' \0 ' ; func_2 ( variable_2 ) ; void func_3 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 void func_0 ( protoactinium_ecphasis variable_0 ) func_1 ( variable_0 ) ; void func_2 ( protoactinium_ecphasis variable_1 ) int variable_2 ; char * variable_3 ; char * variable_4 ; variable_5 = ( ( char * ) ( ( variable_6 ) variable_1 ) ) ; variable_7 = malloc ( sizeof ( struct variable_8 ) ) ; if ( variable_7 ) variable_4 = malloc ( sizeof ( char ) * ( strlen ( variable_5 ) + 1 ) ) ; variable_7 -> variable_9 = malloc ( sizeof ( char ) * ( strlen ( variable_5 ) + 1 ) ) ; if ( variable_7 -> variable_9 ) if ( ( sscanf ( variable_5 , " %s %s " , variable_4 , variable_7 -> variable_9 ) == 2 ) && ( strlen ( variable_7 -> variable_9 ) != 0 ) && ( strlen ( variable_4 ) != 0 ) ) variable_10 = malloc ( sizeof ( char ) * ( variable_11 + 1 ) ) ; variable_2 = 0 ; while ( variable_7 -> variable_9 [ variable_2 ] != ' \0 ' ) if ( variable_2 < variable_11 ) variable_10 [ variable_2 ] = variable_7 -> variable_9 [ variable_2 ] ; variable_2 ++ ; variable_10 [ variable_11 ] = ' \0 ' ; variable_11 *= 2 ; variable_3 = malloc ( sizeof ( char ) * variable_11 ) ; strcpy ( variable_3 , variable_10 ) ; func_3 ( variable_4 ) ; variable_10 = variable_3 ; void func_4 ( char * variable_4 ) int variable_12 ; char variable_13 [ 25 ] = { 0 } ; char variable_14 [ 500 ] = { 0 } ; sprintf ( variable_13 , " %d . pid " , func_5 ( ) ) ; strcat ( variable_14 , " / opt / stonesoup / workspace / testData / " ) ; strcat ( variable_14 , variable_13 ) ; if ( ( variable_12 = func_6 ( variable_14 , variable_15 | variable_16 , 0666 ) ) == - 1 ) func_7 ( variable_4 ) ; void func_8 ( char * variable_14 ) FILE * variable_17 ; char variable_18 ; variable_17 = fopen ( variable_14 , " r " ) ; if ( variable_17 != NULL ) while ( ( variable_18 = fgetc ( variable_17 ) ) != variable_19 ) func_9 ( " %c " , variable_18 ) ; void func_10 ( char * variable_20 , . . . ) va_start ( variable_21 , variable_20 ) ; vfprintf ( variable_22 , variable_20 , variable_21 ) ;

 void func_0 ( ) char * variable_0 ; char * variable_1 = ( char * ) func_1 ( 100 * sizeof ( char ) ) ; memset ( variable_1 , ' A ' , 100 - 1 ) ; variable_1 [ 100 - 1 ] = ' \0 ' ; variable_0 = variable_1 - 8 ; char variable_2 [ 100 ] ; memset ( variable_2 , ' C ' , 100 - 1 ) ; variable_2 [ 100 - 1 ] = ' \0 ' ; strncpy ( variable_2 , variable_0 , strlen ( variable_2 ) ) ; variable_2 [ 100 - 1 ] = ' \0 ' ; func_2 ( variable_2 ) ; void func_3 ( const char * variable_3 ) if ( variable_3 != NULL ) printf ( " %s \n " , variable_3 ) ;
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) guint8 variable_6 , variable_7 , variable_8 , variable_9 ; guint32 variable_10 ; variable_11 * variable_12 , * variable_13 , * variable_14 ; variable_4 * variable_15 ; variable_0 * variable_16 = NULL , * variable_17 = NULL ; variable_10 = 0 ; variable_6 = func_1 ( variable_1 , variable_10 ) ; variable_12 = func_2 ( variable_5 , variable_18 , variable_1 , 0 , - 1 , "  GSM CBCH - Block ( 0 x % 02x ) " , variable_6 & 3 ) ; variable_15 = func_3 ( variable_12 , variable_19 ) ; variable_9 = variable_6 & 0 variable_20 ; variable_8 = ( variable_6 & 0 variable_21 ) >> 5 ; variable_7 = ( variable_6 & 0 variable_22 ) >> 4 ; if ( variable_8 == 1 ) switch ( variable_9 ) variable_3 -> variable_23 = variable_24 ; variable_25 = func_4 ( & variable_26 , variable_1 , variable_10 , variable_3 , 0 , NULL , variable_9 & 0 variable_27 , variable_28 + 1 , ! variable_7 ) ; variable_16 = func_5 ( variable_1 , variable_10 , variable_3 , " Reassembled CBCH message " , variable_25 , & variable_29 , NULL , variable_15 ) ; variable_3 -> variable_23 = variable_24 ; variable_10 ++ ; variable_25 = func_6 ( & variable_26 , variable_1 , variable_10 , variable_3 , 0 , NULL , variable_9 , variable_28 , ! variable_7 ) ; variable_16 = func_7 ( variable_1 , variable_10 , variable_3 , " Reassembled CBCH message " , variable_25 , & variable_29 , NULL , variable_15 ) ; if ( variable_16 ) variable_10 = 0 ; variable_6 = func_8 ( variable_16 , variable_10 ++ ) ; variable_17 = func_9 ( variable_16 , variable_10 ) ; if ( variable_6 & 0 variable_30 ) func_10 ( variable_17 , variable_3 , variable_5 ) ; static func_11 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_31 ) guint variable_32 , variable_10 = 0 ; guint8 variable_33 , variable_34 , variable_35 [ 48 ] ; gboolean variable_36 = variable_24 ; variable_37 = func_12 ( variable_31 , variable_18 , variable_1 , 0 , - 1 , "  GSM CBCH Schedule Message " ) ; variable_38 = func_13 ( variable_37 , variable_39 ) ; variable_40 = func_14 ( variable_1 , variable_10 ) ; if ( 0 == ( variable_40 & 0 variable_41 ) ) variable_33 = variable_40 & 0 variable_42 ; func_15 ( variable_38 , variable_43 , variable_1 , variable_10 ++ , 1 , variable_44 ) ; if ( ( variable_33 < 1 ) || ( variable_33 > 48 ) ) variable_36 = variable_45 ; variable_34 = func_16 ( variable_1 , variable_10 ) ; if ( variable_34 < variable_33 ) variable_36 = variable_45 ; if ( variable_36 ) memset ( & variable_35 , 0 variable_46 , sizeof ( variable_35 ) ) ; variable_35 [ variable_47 ++ ] = ( variable_48 << 3 ) + variable_49 + 1 ; variable_50 = func_17 ( variable_38 , variable_1 , variable_10 - 6 , 6 , variable_51 , & variable_52 , " This schedule contains %d slots with new messages " , variable_47 ) ; for ( variable_48 = 0 ; variable_48 < variable_47 ; variable_48 ++ ) func_18 ( variable_35 [ variable_48 ] <= 48 ) ; variable_40 = func_19 ( variable_1 , variable_10 ) ; if ( ( variable_40 & 0 variable_53 ) == 0 variable_53 ) variable_54 = func_20 ( variable_1 , variable_10 + 1 ) ; variable_55 = ( ( variable_40 & 0 variable_56 ) << 8 ) + variable_54 ; func_21 ( variable_50 , variable_57 , variable_1 , variable_10 , 2 , variable_35 [ variable_48 ] , " %d , Message ID : %d , First transmission of an SMSCB within the Schedule Period " , variable_35 [ variable_48 ] , variable_55 ) ; variable_10 += 2 ; variable_58 [ variable_35 [ variable_48 ] - 1 ] = variable_55 ; if ( ( variable_40 & 0 variable_41 ) == 0 ) if ( variable_40 == 0 ) func_22 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_35 [ variable_48 ] , " %d , Repeat of non - existant slot %d " , variable_35 [ variable_48 ] , variable_40 ) ; if ( variable_40 < variable_35 [ variable_48 ] ) func_23 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_35 [ variable_48 ] , " %d , Message ID : %d , Repeat of Slot %d " , variable_35 [ variable_48 ] , variable_58 [ variable_40 - 1 ] , variable_40 ) ; variable_58 [ variable_35 [ variable_48 ] - 1 ] = variable_58 [ variable_40 - 1 ] ; func_24 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_35 [ variable_48 ] , " %d , Apparent forward reference to slot %d " , variable_35 [ variable_48 ] , variable_40 ) ; if ( variable_40 == 0 variable_59 ) func_25 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_35 [ variable_47 ] , " %d Free Message Slot , optional reading " , variable_35 [ variable_47 ] ) ; variable_58 [ variable_35 [ variable_48 ] - 1 ] = 0 variable_60 ; if ( variable_40 == 0 variable_61 ) func_26 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_35 [ variable_47 ] , " %d Free Message Slot , reading advised " , variable_35 [ variable_47 ] ) ; variable_58 [ variable_35 [ variable_48 ] - 1 ] = 0 variable_60 ; func_27 ( variable_50 , variable_57 , variable_1 , variable_10 , 1 , variable_35 [ variable_47 ] , " %d reserved MDT : % x " , variable_35 [ variable_47 ] , variable_40 ) ; variable_58 [ variable_35 [ variable_48 ] - 1 ] = 0 variable_60 ; func_28 ( variable_52 , variable_1 , variable_10 ) ; variable_50 = func_29 ( variable_38 , variable_1 , variable_10 , 0 , variable_51 , & variable_52 , " Other message slots in this schedule " ) ; for ( variable_47 = 0 ; variable_10 < variable_32 ; ) while ( ( variable_47 < variable_34 ) && ( variable_58 [ variable_47 ] != 0 variable_62 ) ) variable_47 ++ ; if ( variable_47 >= variable_34 ) variable_40 = func_30 ( variable_1 , variable_10 ) ; if ( ( variable_40 & 0 variable_53 ) == 0 variable_53 ) if ( ( variable_10 + 1 ) < variable_32 ) variable_54 = func_31 ( variable_1 , variable_10 + 1 ) ; variable_55 = ( ( variable_40 & 0 variable_56 ) << 8 ) + variable_54 ; variable_58 [ variable_47 ] = variable_55 ; variable_47 ++ ; func_32 ( variable_50 , variable_57 , variable_1 , variable_10 , 2 , variable_47 , " %d , Message : %d , First transmission of an SMSCB within the Schedule Period " , variable_47 , variable_55 ) ; variable_10 += 2 ; if ( variable_40 && ( ( variable_40 & 0 variable_41 ) == 0 ) ) if ( variable_40 < variable_47 ) variable_58 [ variable_47 ] = variable_58 [ variable_40 - 1 ] ; variable_47 ++ ; func_33 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_47 , " %d , Message ID : %d , Repeat of Slot %d " , variable_47 , variable_58 [ variable_40 - 1 ] , variable_40 ) ; variable_47 ++ ; func_34 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_47 , " %d , Apparent forward reference to slot %d " , variable_47 , variable_40 ) ; if ( variable_40 == 0 variable_59 ) variable_47 ++ ; func_35 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_47 , " %d Free Message Slot , optional reading " , variable_47 ) ; if ( variable_40 == 0 variable_61 ) variable_47 ++ ; func_36 ( variable_50 , variable_57 , variable_1 , variable_10 ++ , 1 , variable_47 , " %d Free Message Slot , reading advised " , variable_47 ) ; variable_47 ++ ; func_37 ( variable_50 , variable_57 , variable_1 , variable_10 , 1 , variable_47 , " %d reserved MDT : % x " , variable_47 , variable_40 ) ; func_38 ( variable_52 , variable_1 , variable_10 ) ; func_39 ( variable_38 , variable_63 , variable_1 , variable_10 , - 1 , variable_64 ) ;

 void func_0 ( ) char * variable_0 ; variable_0 = NULL ; char * variable_1 = new char [ 100 ] ; memset ( variable_1 , ' A ' , 100 - 1 ) ; variable_1 [ 100 - 1 ] = ' \0 ' ; variable_0 = variable_1 - 8 ; func_1 ( & variable_0 ) ; void func_2 ( char * * variable_2 ) char * variable_0 = * variable_2 ; char variable_3 [ 100 ] ; memset ( variable_3 , ' C ' , 100 - 1 ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; strncpy ( variable_3 , variable_0 , strlen ( variable_3 ) ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; func_3 ( variable_3 ) ; void func_4 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 static func_0 ( variable_0 * variable_1 , const struct variable_2 const guint8 * variable_3 , int * variable_4 ) guint64 variable_5 ; if ( variable_1 -> variable_6 == variable_7 ) guint16 variable_8 ; guint32 variable_9 ; guint64 variable_10 ; nspr_abstime_v10_t variable_11 ; variable_8 = func_1 ( variable_12 ) ; memcpy ( variable_11 . variable_13 . variable_14 , & variable_8 , sizeof variable_11 . variable_13 . variable_14 ) ; variable_8 = func_2 ( variable_15 ) ; memcpy ( variable_11 . variable_13 . variable_16 , & variable_8 , sizeof variable_11 . variable_13 . variable_16 ) ; memcpy ( & variable_9 , ( ( const nspr_pktracefull_v10_t * ) variable_3 ) -> variable_17 , sizeof variable_9 ) ; variable_5 = func_3 ( variable_9 ) ; static guint64 func_4 ( guint32 variable_18 ) guint32 variable_19 = variable_18 & variable_20 ; switch ( variable_18 & variable_21 ) return ( variable_22 ) variable_19 * 1000000000 ; return ( variable_22 ) variable_19 * 1000000 ; return ( variable_22 ) variable_19 * 1000 ; return variable_19 ; return variable_18 ; memset ( variable_11 . variable_23 , 0 , sizeof variable_11 . variable_23 ) ; variable_10 = func_5 ( ( variable_24 ) variable_25 -> variable_26 . variable_27 - ( variable_24 ) ( variable_5 / 1000000000 ) ) ; memcpy ( variable_11 . variable_28 , & variable_10 , sizeof variable_11 . variable_28 ) ; if ( ! func_6 ( variable_1 , & variable_11 , variable_15 , variable_4 ) )

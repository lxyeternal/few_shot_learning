 static void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = L " " variable_0 = variable_1 ; if ( variable_2 ) WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = wcslen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_3 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = variable_16 ; variable_5 . variable_17 = func_4 ( variable_18 ) ; if ( bind ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) if ( func_5 ( variable_8 , variable_20 ) == variable_19 ) variable_21 = func_6 ( variable_8 , NULL , NULL ) ; if ( variable_21 == variable_19 ) variable_4 = recv ( variable_21 , ( char * ) ( variable_0 + variable_6 ) , ( 100 - variable_6 - 1 ) * sizeof ( wchar_t ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( wchar_t ) ] = L ' \0 ' while ( 0 ) if ( variable_22 ) HCRYPTPROV variable_23 = 0 ; HCRYPTHASH variable_24 = 0 ; HCRYPTKEY variable_25 = 0 ; char variable_26 [ 100 ] = variable_27 ; BYTE variable_28 [ ( 100 - 1 ) * sizeof ( wchar_t ) ] ; DWORD variable_29 ; variable_29 = func_7 ( variable_28 , sizeof ( variable_28 ) , variable_0 ) ; size_t func_8 ( unsigned char * variable_30 , size_t variable_31 , const wchar_t * variable_32 ) size_t variable_33 = 0 ; while ( variable_33 < variable_31 && iswxdigit ( variable_32 [ 2 * variable_33 ] ) && iswxdigit ( variable_32 [ 2 * variable_33 + 1 ] ) ) int variable_34 ; variable_30 [ variable_33 ] = ( unsigned char ) variable_34 ; return variable_33 ; if ( ! func_9 ( & variable_23 , NULL , variable_35 , variable_36 , 0 ) ) if ( ! func_10 ( variable_23 , variable_37 , 0 , 0 , & variable_24 ) ) if ( ! func_11 ( variable_24 , ( BYTE * ) variable_26 , strlen ( variable_26 ) , 0 ) ) if ( ! func_12 ( variable_23 , variable_38 , variable_24 , 0 , & variable_25 ) ) if ( ! func_13 ( variable_25 , 0 , 1 , 0 , variable_28 , & variable_29 ) ) memcpy ( variable_0 , variable_28 , variable_29 ) ; while ( 0 ) if ( func_14 ( variable_39 , variable_40 , variable_0 , variable_41 , variable_42 , & variable_43 ) != 0 )
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) variable_6 * variable_7 ; variable_4 * variable_8 ; guint32 variable_9 = 0 , variable_10 ; guint16 variable_11 = 0 ; guint16 variable_12 ; packet_type variable_13 ; variable_6 * variable_14 ; variable_7 = func_1 ( variable_5 , variable_15 , variable_1 , variable_9 , - 1 , variable_16 ) ; variable_8 = func_2 ( variable_7 , variable_17 ) ; variable_12 = func_3 ( variable_1 , variable_9 ) ; if ( variable_12 == 0 ) variable_9 += 2 ; variable_12 = func_4 ( variable_1 , variable_9 ) ; if ( variable_12 & 0 variable_18 ) variable_13 = variable_19 ; variable_11 = variable_12 & 0 variable_20 ; variable_9 += 2 ; variable_13 = variable_21 ; variable_11 = func_5 ( variable_1 , variable_9 ) ; variable_9 += 2 ; if ( variable_11 & 0 variable_18 ) variable_13 = variable_22 ; variable_13 = variable_23 ; variable_11 &= 0 variable_20 ; variable_14 = func_6 ( variable_8 , variable_24 , variable_1 , 0 , variable_9 , variable_13 ) ; variable_25 = func_7 ( variable_14 , variable_26 ) ; switch ( variable_13 ) variable_10 = func_8 ( variable_1 , variable_9 , variable_11 , variable_3 , variable_25 , variable_5 ) ; static func_9 ( variable_0 * variable_1 , variable_27 variable_28 variable_2 * variable_3 , variable_4 variable_4 * variable_29 ) guint16 variable_30 ; guint8 variable_13 ; guint8 variable_31 ; variable_4 * variable_32 = NULL ; variable_33 * variable_34 ; variable_35 * variable_36 ; gboolean variable_37 ; variable_30 = func_10 ( variable_1 , variable_9 ) & 0 variable_20 ; variable_13 = func_11 ( variable_1 , variable_9 + 8 ) ; variable_31 = func_12 ( variable_1 , variable_9 + 9 ) ; variable_36 = ( iax_packet_data * ) func_13 ( func_14 ( ) , variable_3 , variable_15 , 0 ) ; if ( ! variable_36 ) if ( variable_13 == variable_38 && variable_31 == variable_39 ) variable_34 = func_15 ( variable_3 , variable_11 ) ; static variable_33 * func_16 ( variable_2 guint32 variable_11 ) variable_33 * variable_40 ; variable_40 = func_17 ( func_18 ( ) , variable_33 ) ; variable_40 -> variable_41 = variable_42 ; variable_40 -> variable_43 = 0 ; variable_40 -> variable_44 = 0 ; variable_40 -> variable_45 = 0 ; variable_40 -> variable_46 = 0 ; variable_40 -> variable_47 = NULL ; variable_40 -> variable_48 = variable_3 -> variable_49 -> variable_50 ; return variable_40 ; variable_37 = variable_51 ; variable_34 = func_19 ( variable_3 , variable_11 , variable_30 , & variable_37 ) ; static variable_33 * func_20 ( variable_2 variable_27 variable_27 variable_52 * variable_53 ) variable_33 * variable_34 = NULL ; guint variable_54 ; variable_54 = func_21 ( & variable_3 -> variable_55 , variable_3 -> variable_56 , variable_3 -> variable_57 , variable_11 ) ; static guint func_22 ( const variable_58 variable_59 variable_27 guint32 variable_60 ) iax_circuit_key variable_61 ; variable_27 * variable_62 ; variable_61 . variable_63 = * variable_64 ; variable_61 . variable_56 = variable_56 ; variable_61 . variable_65 = variable_65 ; variable_61 . variable_60 = variable_60 ; variable_62 = ( guint32 * ) func_23 ( variable_66 , & variable_61 ) ; if ( ! variable_62 ) variable_62 = ( guint32 * ) func_24 ( func_25 ( ) , variable_67 ) ; * variable_62 = ++ variable_68 ; return * variable_62 ; if ( variable_30 != 0 ) guint variable_69 ; variable_69 = func_26 ( & variable_3 -> variable_70 , variable_3 -> variable_56 , variable_3 -> variable_71 , variable_30 ) ; static guint func_27 ( const variable_58 variable_59 variable_27 guint32 variable_60 ) iax_circuit_key variable_61 ; variable_27 * variable_62 ; variable_61 . variable_63 = * variable_64 ; variable_61 . variable_56 = variable_56 ; variable_61 . variable_65 = variable_65 ; variable_61 . variable_60 = variable_60 ; variable_62 = ( guint32 * ) func_28 ( variable_66 , & variable_61 ) ; if ( ! variable_62 ) variable_62 = ( guint32 * ) func_29 ( func_30 ( ) , variable_67 ) ; * variable_62 = ++ variable_68 ; return * variable_62 ; variable_34 = func_31 ( variable_3 , NULL , variable_54 , variable_69 , variable_3 -> variable_49 -> variable_72 , & variable_37 ) ; static variable_33 * func_32 ( variable_2 * variable_3 , variable_6 * variable_73 variable_73 variable_73 variable_52 * variable_53 ) variable_74 * variable_75 ; variable_33 * variable_34 ; variable_75 = func_33 ( variable_76 , variable_69 , variable_77 ) ; if ( ! variable_75 ) return NULL ; variable_34 = ( iax_call_data * ) func_34 ( variable_75 , variable_15 ) ; if ( func_35 ( variable_69 , variable_34 ) ) static gboolean func_36 ( variable_73 const iax_call_data * variable_34 ) guint variable_78 ; for ( variable_78 = 0 ; variable_78 < variable_34 -> variable_45 ; variable_78 ++ ) if ( variable_79 == variable_34 -> variable_80 [ variable_78 ] ) return variable_81 ; return variable_51 ; if ( variable_34 -> variable_46 == 0 ) if ( ! func_37 ( variable_54 , variable_34 ) ) static gboolean func_38 ( variable_73 const iax_call_data * variable_34 ) guint variable_78 ; for ( variable_78 = 0 ; variable_78 < variable_34 -> variable_46 ; variable_78 ++ ) if ( variable_79 == variable_34 -> variable_82 [ variable_78 ] ) return variable_81 ; return variable_51 ; return NULL ; if ( func_39 ( variable_69 , variable_34 ) ) static gboolean func_40 ( variable_73 const iax_call_data * variable_34 ) guint variable_78 ; if ( variable_79 == variable_34 -> variable_82 [ variable_78 ] ) return variable_81 ; return variable_51 ; if ( ! func_41 ( variable_54 , variable_34 ) ) static gboolean func_42 ( variable_73 const iax_call_data * variable_34 ) guint variable_78 ; if ( variable_79 == variable_34 -> variable_80 [ variable_78 ] ) return variable_81 ; return variable_51 ; return NULL ; return variable_34 ; variable_74 * variable_83 ; variable_83 = func_43 ( variable_76 , variable_54 , variable_3 -> variable_49 -> variable_72 ) ; if ( variable_83 ) variable_34 = ( iax_call_data * ) func_44 ( variable_83 , variable_15 ) ; return variable_34 ; variable_36 = func_45 ( variable_34 , variable_37 ) ; static variable_35 * func_46 ( variable_33 * variable_40 , gboolean variable_37 ) variable_35 * variable_84 = func_47 ( func_48 ( ) , variable_35 ) ; variable_84 -> variable_85 = variable_81 ; variable_84 -> variable_86 = variable_40 ; variable_84 -> variable_87 = 0 ; variable_84 -> variable_37 = variable_37 ; variable_84 -> variable_88 . variable_89 = - 1 ; variable_84 -> variable_88 . variable_90 = - 1 ; return variable_84 ; if ( variable_8 ) variable_6 * variable_91 ; variable_91 = func_49 ( variable_8 , variable_92 , variable_1 , variable_9 + 8 , 1 , variable_13 ) ; variable_32 = func_50 ( variable_91 , variable_93 ) ; switch ( variable_13 ) variable_9 = func_51 ( variable_1 , variable_9 + 9 , variable_3 , variable_32 , variable_36 ) ; static guint32 func_52 ( variable_0 * variable_1 , variable_27 variable_2 * variable_3 , variable_4 variable_35 * variable_36 ) guint8 variable_31 = func_53 ( variable_1 , variable_9 ) ; guint8 variable_94 [ variable_95 ] ; variable_6 * variable_96 ; iax2_ie_data variable_97 ; variable_97 . variable_98 . variable_13 = variable_99 ; variable_97 . variable_98 . variable_10 = 0 ; variable_97 . variable_98 . variable_100 = variable_94 ; variable_97 . variable_101 = variable_102 ; variable_97 . variable_103 = 0 ; variable_97 . variable_104 = 0 ; variable_97 . variable_41 = ( variable_27 ) - 1 ; variable_96 = func_54 ( variable_5 , variable_105 , variable_1 , variable_9 , 1 , variable_31 ) ; variable_9 ++ ; if ( variable_9 >= func_55 ( variable_1 ) ) variable_9 = func_56 ( variable_1 , variable_3 , variable_9 , variable_5 , variable_96 , & variable_97 ) ; static guint32 func_57 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_27 variable_4 * variable_106 , variable_6 * variable_107 * variable_97 ) while ( variable_9 < func_58 ( variable_1 ) ) int variable_108 = func_59 ( variable_1 , variable_9 ) ; int variable_109 = func_60 ( variable_1 , variable_9 + 1 ) ; guint16 variable_110 ; switch ( variable_108 ) if ( variable_109 != 4 ) variable_97 -> variable_41 = func_61 ( variable_1 , variable_9 + 2 ) ; variable_110 = func_62 ( variable_1 , variable_9 + 2 ) ; switch ( variable_110 ) variable_97 -> variable_101 = variable_111 ; variable_97 -> variable_103 = func_63 ( variable_1 , variable_9 + 4 ) ; if ( variable_106 && variable_108 < variable_112 ) switch ( variable_108 ) variable_110 = func_64 ( variable_1 , variable_9 + 2 ) ; if ( variable_110 == variable_113 ) guint32 variable_63 ; memcpy ( & variable_63 , variable_97 -> variable_98 . variable_100 , 4 ) ; func_65 ( variable_114 , variable_115 , variable_1 , variable_9 + 6 , 4 , variable_63 ) ; variable_9 += variable_109 + 2 ;

 static void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; switch ( 6 ) FILE * variable_2 ; variable_2 = fopen ( " passwords . txt " , " r " ) ; if ( variable_2 != NULL ) variable_0 [ 0 ] = ' \0 ' ; switch ( 8 ) char variable_3 [ 100 ] = variable_4 ; HCRYPTPROV variable_5 = 0 ; HCRYPTHASH variable_6 = 0 ; HCRYPTKEY variable_7 = 0 ; BYTE variable_8 [ ( 100 - 1 ) * sizeof ( char ) ] ; DWORD variable_9 ; variable_9 = func_1 ( variable_8 , sizeof ( variable_8 ) , variable_0 ) ; size_t func_2 ( unsigned char * variable_10 , size_t variable_11 , const char * variable_12 ) size_t variable_13 = 0 ; while ( variable_13 < variable_11 && isxdigit ( variable_12 [ 2 * variable_13 ] ) && isxdigit ( variable_12 [ 2 * variable_13 + 1 ] ) ) int variable_14 ; variable_10 [ variable_13 ] = ( unsigned char ) variable_14 ; return variable_13 ; if ( ! func_3 ( & variable_5 , NULL , variable_15 , variable_16 , 0 ) ) if ( ! func_4 ( variable_5 , variable_17 , 0 , 0 , & variable_6 ) ) if ( ! func_5 ( variable_6 , ( BYTE * ) variable_3 , strlen ( variable_3 ) , 0 ) ) if ( ! func_6 ( variable_5 , variable_18 , variable_6 , 0 , & variable_7 ) ) if ( ! func_7 ( variable_7 , 0 , 1 , 0 , variable_8 , & variable_9 ) ) memcpy ( variable_0 , variable_8 , variable_9 ) ; variable_0 [ variable_9 / sizeof ( char ) ] = ' \0 ' ; while ( 0 ) if ( func_8 ( variable_19 , variable_20 , variable_0 , variable_21 , variable_22 , & variable_23 ) != 0 )
 static int func_0 ( struct variable_0 * variable_1 , enum mg_event variable_2 ) char * variable_3 ; char * variable_4 ; int variable_5 = 1000 ; if ( variable_2 == variable_6 ) variable_3 = ( char * ) func_1 ( variable_1 , " if - match " ) ; if ( strcmp ( variable_3 , " weak_taint_source_value " ) == 0 ) while ( 1 ) variable_4 = ( char * ) malloc ( variable_5 * sizeof ( char ) ) ; variable_7 = func_2 ( variable_1 , " data " , variable_4 , variable_5 * sizeof ( char ) ) ; if ( variable_7 < variable_5 ) variable_5 = variable_5 * 2 ; func_3 ( variable_4 ) ; void func_4 ( char * variable_8 ) char * variable_9 = 0 ; char * variable_10 = " aba " ; int variable_11 = 0 ; long variable_12 [ 10 ] ; char * variable_13 [ 10 ] = { 0 } ; if ( variable_8 != 0 ) variable_13 [ 5 ] = variable_8 ; variable_12 [ 1 ] = 5 ; variable_14 = * ( variable_13 + variable_12 [ 1 ] ) ; variable_15 = ( ( char * ) variable_14 ) ; for ( variable_16 = 0 ; ( ( int ) variable_16 ) <= ( ( int ) ( strlen ( variable_15 ) - strlen ( variable_10 ) ) ) ; ++ variable_16 ) for ( variable_17 = 0 ; variable_17 < strlen ( variable_10 ) ; ++ variable_17 ) if ( variable_15 [ variable_16 + variable_17 ] != variable_10 [ variable_17 ] ) variable_11 = 0 ; variable_11 = 1 ; if ( variable_11 == 1 && variable_17 == strlen ( variable_10 ) ) variable_9 = & variable_15 [ variable_16 ] ; func_5 ( " String length is % i \n " , strlen ( variable_9 ) ) ;

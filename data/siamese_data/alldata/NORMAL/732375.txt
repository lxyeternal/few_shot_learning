 static void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] ; variable_0 = variable_1 ; variable_2 * variable_3 = new func_1 ( variable_0 ) ; variable_2 :: func_2 ( char * variable_4 ) variable_0 = variable_4 ; memset ( variable_0 , ' A ' , 50 - 1 ) ; variable_0 [ 50 - 1 ] = ' \0 ' ; delete variable_3 variable_2 :: ~ func_3 ( ) char variable_5 [ 50 ] = " " ; memmove ( variable_5 , variable_0 , strlen ( variable_0 ) * sizeof ( char ) ) ; variable_5 [ 50 - 1 ] = ' \0 ' ;
 void func_0 ( int variable_0 ) static const char * variable_1 [ ] = { ( " ISO - 8859 - 1 " ) , ( "  ISO - 8859 - 1 : 1987 " ) , ( " ISO_8859 - 1 " ) , ( "  latin1 " ) , ( " l1 " ) , ( " IBM819 " ) , ( " CP819 " ) , ( " csISOLatin1 " ) , ( " ISO - 8859 - 3 " ) , ( "  ISO_8859 - 3 : 1988 " ) , ( " ISO_8859 - 3 " ) , ( "  latin3 " ) , ( " ls " ) , ( " csISOLatin3 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_2 [ ] = { ( " ISO - 8859 - 7 " ) , ( "  ISO_8859 - 7 : 1987 " ) , ( " ISO_8859 - 7 " ) , ( "  ELOT_928 " ) , ( " ECMA - 118 " ) , ( " greek " ) , ( " greek8 " ) , ( " csISOLatinGreek " ) , ( " ISO - 8859 - 8 " ) , ( "  ISO_8859 - 8 : 1988 " ) , ( " iso - ir - 138 " ) , ( " ISO_8859 - 8 " ) , ( "  hebrew " ) , ( " csISOLatinHebrew " ) , ( " ISO - 8859 - 9 " ) , ( "  ISO_8859 - 9 : 1989 " ) , ( " iso - ir - 148 " ) , ( " ISO_8859 - 9 " ) , ( "  latin5 " ) , ( " l5 " ) , ( " csISOLatin5 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_3 [ ] = { ( " Shift_JIS " ) , ( " MS_Kanji " ) , ( " csShiftJIS " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_4 [ ] = { ( " EUC - JP " ) , ( " Extended_UNIX_Code_Packed_Format_for_Japanese " ) , ( " csEUCPkdFmtJapanese " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_5 [ ] = { ( " EUC - KR " ) , ( " csEUCKR " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_6 [ ] = { ( " ISO - 2022 - JP " ) , ( " csISO2022JP " ) , ( " ISO - 2022 - JP - 2 " ) , ( "  csISO2022JP2 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_7 [ ] = { ( " IBM437 " ) , ( " cp437 " ) , ( " 437 " ) , ( " csPC8CodePage437 " ) , ( " IBM852 " ) , ( " cp852 " ) , ( " 852 " ) , ( " csPCp852 " ) , ( " IBM863 " ) , ( " cp863 " ) , ( " 863 " ) , ( " csIBM863 " ) , ( " IBM855 " ) , ( " cp855 " ) , ( " 855 " ) , ( " csIBM855 " ) , ( " IBM865 " ) , ( " cp865 " ) , ( " 865 " ) , ( " csIBM865 " ) , ( " IBM866 " ) , ( " cp866 " ) , ( " 866 " ) , ( " csIBM866 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_8 [ ] = { ( " IBM850 " ) , ( " cp850 " ) , ( " 850 " ) , ( " csPC850Multilingual " ) , ( " IBM00858 " ) , ( " CCSID00858 " ) , ( " CP00858 " ) , ( " PC - Multilingual - 850 + euro " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_9 [ ] = { ( " IBM869 " ) , ( " cp869 " ) , ( " 869 " ) , ( " cp - gr " ) , ( " csIBM869 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_10 [ ] = { ( " GB2312 " ) , ( " csGB2312 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_11 [ ] = { ( " UTF - 8 " ) , ( "  utf8 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_12 [ ] = { ( " Big5 " ) , ( " csBig5 " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_13 [ ] = { ( " VISCII " ) , ( " csVISCII " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_14 [ ] = { ( " KOI8 - R " ) , ( " csKOI8R " ) , ( " KOI8 - U " ) , ( ( ( void * ) 0 ) ) } ; static const char * variable_15 [ ] = { ( " ISO - 8859 - 1 -  Windows - 3 . 1 -  Latin - 1 " ) , ( "  csWindows31Latin1 " ) , ( " ISO - 8859 - 2 -  Windows - Latin - 2 " ) , ( "  csWindows31Latin2 " ) , ( " windows - 1250 " ) , ( " windows - 1251 " ) , ( " windows - 1253 " ) , ( " windows - 1254 " ) , ( " windows - 1255 " ) , ( " windows - 1256 " ) , ( " windows - 1256 " ) , ( " windows - 1257 " ) , ( ( ( void * ) 0 ) ) } ; static const struct linedraw variable_16 [ ] = { { ( variable_1 ) , ( " | " ) , ( " | -- " ) , ( " & middot ; -- " ) , ( " & copy ; " ) } , { ( variable_2 ) , ( " | " ) , ( " | -- " ) , ( " & middot ; -- " ) , ( " ( c ) " ) } , { ( variable_3 ) , ( " \ 204 \ 240 " ) , ( " \ 204 \ 245 " ) , ( " \ 204 \ 244 " ) , ( " ( c ) " ) } , { ( variable_4 ) , ( " \ 250 \ 242 " ) , ( " \ 250 \ 247 " ) , ( " \ 250 \ 246 " ) , ( " ( c ) " ) } , { ( variable_5 ) , ( " \ 246 \ 242 " ) , ( " \ 246 \ 247 " ) , ( " \ 246 \ 246 " ) , ( " ( c ) " ) } , { ( variable_6 ) , ( " \0 33 $ B ( \ " \ 0 33 ( variable_17 " ) , ( " \ 0 33 $ func_1 ( const char * * variable_18 ; if ( variable_0 ) fprintf ( variable_19 , " tree : missing argument to -- charset , valid charsets include : \n " ) ; for ( variable_20 = variable_16 ; variable_20 -> variable_21 ; ++ variable_20 ) for ( variable_18 = variable_20 -> variable_21 ; * variable_18 ; ++ variable_18 ) fprintf ( variable_19 , " %s \n " , * variable_18 ) ;

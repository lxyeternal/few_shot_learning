 void func_0 ( ) if ( func_1 ( ) ) int func_2 ( ) return ( rand ( ) % 2 ) ; char * variable_0 = func_3 ( " BadSink " ) ; static char * func_4 ( char * variable_1 ) size_t variable_2 ; if ( variable_1 != NULL ) variable_3 = strlen ( variable_1 ) ; variable_0 = ( char * ) malloc ( variable_3 + 1 ) ; for ( variable_2 = 0 ; variable_2 < variable_3 ; variable_2 ++ ) variable_0 [ variable_2 ] = variable_1 [ variable_3 - variable_2 - 1 ] ; variable_0 [ variable_3 ] = ' \0 ' ; free ( variable_0 ) ;
 int func_0 ( variable_0 ) ( struct variable_1 * variable_2 , char * * variable_3 , variable_4 * variable_5 , enum variable_6 * variable_7 , int * variable_8 ) char variable_9 [ variable_10 ] = " " ; size_t variable_11 = 0 , variable_12 = 0 ; * variable_3 = NULL ; * variable_5 = 0 ; if ( func_1 ( variable_2 , & variable_9 [ 0 ] , variable_13 , variable_7 ) ) variable_12 += variable_13 ; * variable_7 = variable_9 [ 0 ] & 0 variable_14 ; * variable_5 = variable_9 [ 1 ] & 0 variable_15 ; if ( * variable_7 == variable_16 || * variable_7 == variable_17 || * variable_7 == variable_18 || * variable_7 == variable_19 || * variable_7 == variable_20 ) variable_21 = ( variable_9 [ 1 ] >> 7 ) & 1 ; variable_11 += variable_21 ? 4 : 0 ; variable_11 += ( * variable_5 == 126 ) ? 2 : ( * variable_5 == 127 ) ? 8 : 0 ; if ( variable_11 ) if ( func_2 ( variable_2 , & variable_9 [ variable_12 ] , variable_11 , variable_7 ) ) variable_12 += variable_11 ; if ( * variable_5 == 126 ) * variable_5 = func_3 ( func_4 ( & variable_9 [ 2 ] ) ) ; variable_22 = & variable_9 [ 4 ] ; if ( * variable_5 == 127 ) * variable_5 = func_5 ( func_6 ( & variable_9 [ 2 ] ) ) ; variable_22 = & variable_9 [ 10 ] ; variable_22 = & variable_9 [ 2 ] ; * variable_3 = & variable_9 [ variable_12 ] ; variable_12 = variable_12 + ( * variable_5 ) ; if ( variable_12 > variable_10 ) if ( func_7 ( variable_2 , ( * variable_3 ) , ( * variable_5 ) , variable_7 ) ) if ( variable_21 ) unsigned int variable_23 ; for ( variable_23 = 0 ; variable_23 < * variable_5 ; variable_23 ++ ) ( * variable_3 ) [ variable_23 ] ^= variable_22 [ variable_23 % 4 ] ; if ( ( * variable_7 == variable_19 ) && ( func_8 ( variable_2 , variable_20 , * variable_3 , * variable_5 ) ) ) * variable_5 = 0 ; if ( * variable_5 ) if ( ! ( variable_24 = func_9 ( variable_2 -> variable_3 , ( variable_2 -> variable_5 + * variable_5 ) ) ) ) * variable_5 = 0 ; variable_2 -> variable_3 = variable_24 ; memcpy ( ( variable_2 -> variable_3 + variable_2 -> variable_5 ) , ( * variable_3 ) , ( * variable_5 ) ) ; variable_2 -> variable_5 += * variable_5 ; if ( ! variable_25 && variable_2 -> variable_26 && ( variable_2 -> variable_5 < variable_2 -> variable_26 ) ) * variable_7 = variable_2 -> variable_7 ; * variable_5 = variable_2 -> variable_5 ; * variable_3 = variable_2 -> variable_3 ;

 static void func_0 ( ) wchar_t * variable_0 ; variable_0 = new wchar_t [ 100 ] ; if ( func_1 ( ) ) int func_2 ( ) return 0 ; wmemset ( variable_0 , L ' A ' , 50 - 1 variable_0 [ 50 - 1 ] = L ' \0 ' wchar_t variable_1 [ 50 ] = L " " memcpy ( variable_1 , variable_0 , wcslen ( variable_0 ) * sizeof ( wchar_t ) ) ;
 static int func_0 ( variable_1 void * variable_2 , int const uint8_t * variable_3 , int variable_4 ) variable_5 * variable_6 = variable_7 -> variable_8 ; int variable_9 = 0 ; int variable_10 ; int variable_11 ; int variable_12 ; unsigned char variable_13 ; unsigned char variable_14 ; unsigned int variable_15 ; int variable_16 ; unsigned int variable_17 ; int variable_18 ; int variable_19 , variable_20 ; int variable_21 ; int variable_22 ; int variable_23 ; unsigned char variable_24 , variable_25 , variable_26 ; int variable_27 ; int variable_28 ; int variable_29 ; signed short variable_30 ; int variable_31 ; int variable_32 ; int variable_33 ; int variable_34 ; unsigned char * variable_35 ; variable_6 -> variable_36 . variable_37 = 1 ; variable_6 -> variable_36 . variable_38 = variable_39 | variable_40 | variable_41 ; if ( variable_7 -> func_1 ( variable_7 , & variable_6 -> variable_36 ) < 0 ) variable_35 = variable_6 -> variable_36 . variable_2 [ 0 ] ; variable_15 = func_2 ( & variable_3 [ variable_9 ] ) ; variable_9 += 6 ; variable_16 = func_3 ( & variable_3 [ variable_9 ] ) ; variable_9 += 10 ; variable_15 -= 16 ; while ( ( variable_15 > 0 ) && ( variable_16 > 0 ) ) variable_17 = func_4 ( & variable_3 [ variable_9 ] ) ; variable_9 += 4 ; variable_18 = func_5 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; switch ( variable_18 ) variable_10 = variable_9 + variable_17 - 6 ; if ( ( variable_18 == variable_42 ) && ( variable_6 -> variable_43 != variable_44 ) ) variable_23 = 0 ; variable_23 = 2 ; variable_21 = func_6 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; variable_12 = 0 ; for ( variable_19 = 0 ; variable_19 < variable_21 ; variable_19 ++ ) variable_12 += variable_3 [ variable_9 ++ ] ; variable_22 = variable_3 [ variable_9 ++ ] ; if ( variable_22 == 0 ) variable_22 = 256 ; for ( variable_20 = 0 ; variable_20 < variable_22 ; variable_20 ++ ) unsigned int variable_45 ; if ( ( unsigned ) variable_12 >= 256 ) variable_12 = 0 ; variable_24 = variable_3 [ variable_9 ++ ] << variable_23 ; variable_25 = variable_3 [ variable_9 ++ ] << variable_23 ; variable_26 = variable_3 [ variable_9 ++ ] << variable_23 ; variable_45 = ( variable_24 << 16 ) | ( variable_25 << 8 ) | variable_26 ; if ( variable_6 -> variable_46 [ variable_12 ] != variable_45 ) variable_6 -> variable_47 = 1 ; variable_6 -> variable_46 [ variable_12 ++ ] = variable_45 ; variable_9 = variable_10 ; variable_31 = 0 ; variable_28 = func_7 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; while ( variable_28 > 0 ) variable_30 = func_8 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; if ( ( variable_30 & 0 variable_48 ) == 0 variable_48 ) variable_30 = - variable_30 ; variable_31 += variable_30 * variable_6 -> variable_36 . variable_49 [ 0 ] ; if ( ( variable_30 & 0 variable_48 ) == 0 variable_50 ) if ( ( variable_30 & 0 variable_48 ) == 0 variable_51 ) variable_35 [ variable_31 + variable_6 -> variable_36 . variable_49 [ 0 ] - 1 ] = variable_30 & 0 variable_52 ; variable_28 -- ; variable_11 = variable_31 ; variable_34 = variable_6 -> variable_7 -> variable_53 ; for ( variable_19 = 0 ; variable_19 < variable_30 ; variable_19 ++ ) variable_33 = variable_3 [ variable_9 ++ ] ; variable_11 += variable_33 ; variable_34 -= variable_33 ; variable_32 = ( signed char ) ( variable_3 [ variable_9 ++ ] ) ; if ( variable_32 < 0 ) variable_32 = - variable_32 ; variable_13 = variable_3 [ variable_9 ++ ] ; variable_14 = variable_3 [ variable_9 ++ ] ; for ( variable_20 = 0 ; variable_20 < variable_32 ; variable_20 ++ , variable_34 -= 2 ) variable_35 [ variable_11 ++ ] = variable_13 ; variable_35 [ variable_11 ++ ] = variable_14 ; for ( variable_20 = 0 ; variable_20 < variable_32 * 2 ; variable_20 ++ , variable_34 -- ) variable_13 = variable_3 [ variable_9 ++ ] ; variable_35 [ variable_11 ++ ] = variable_13 ; variable_31 += variable_6 -> variable_36 . variable_49 [ 0 ] ; variable_29 = func_9 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; variable_31 = 0 ; variable_31 += variable_29 * variable_6 -> variable_36 . variable_49 [ 0 ] ; variable_28 = func_10 ( & variable_3 [ variable_9 ] ) ; variable_9 += 2 ; while ( variable_28 > 0 ) variable_11 = variable_31 ; variable_34 = variable_6 -> variable_7 -> variable_53 ; variable_30 = variable_3 [ variable_9 ++ ] ; if ( variable_30 > 0 ) for ( variable_19 = 0 ; variable_19 < variable_30 ; variable_19 ++ ) variable_33 = variable_3 [ variable_9 ++ ] ; variable_11 += variable_33 ; variable_34 -= variable_33 ; variable_32 = ( signed char ) ( variable_3 [ variable_9 ++ ] ) ; if ( variable_32 > 0 ) for ( variable_20 = 0 ; variable_20 < variable_32 ; variable_20 ++ , variable_34 -- ) variable_13 = variable_3 [ variable_9 ++ ] ; variable_35 [ variable_11 ++ ] = variable_13 ; if ( variable_32 < 0 ) variable_32 = - variable_32 ; variable_13 = variable_3 [ variable_9 ++ ] ; for ( variable_20 = 0 ; variable_20 < variable_32 ; variable_20 ++ , variable_34 -- ) variable_35 [ variable_11 ++ ] = variable_13 ; variable_31 += variable_6 -> variable_36 . variable_49 [ 0 ] ; variable_28 -- ; memset ( variable_35 , 0 , variable_6 -> variable_36 . variable_49 [ 0 ] * variable_6 -> variable_7 -> variable_54 ) ; variable_31 = 0 ; for ( variable_27 = 0 ; variable_27 < variable_6 -> variable_7 -> variable_54 ; variable_27 ++ ) variable_11 = variable_31 ; variable_9 ++ ; variable_34 = variable_6 -> variable_7 -> variable_53 ; while ( variable_34 > 0 ) variable_32 = ( signed char ) ( variable_3 [ variable_9 ++ ] ) ; if ( variable_32 > 0 ) variable_13 = variable_3 [ variable_9 ++ ] ; for ( variable_20 = 0 ; variable_20 < variable_32 ; variable_20 ++ ) variable_35 [ variable_11 ++ ] = variable_13 ; variable_34 -- ; variable_32 = - variable_32 ; for ( variable_20 = 0 ; variable_20 < variable_32 ; variable_20 ++ ) variable_13 = variable_3 [ variable_9 ++ ] ; variable_35 [ variable_11 ++ ] = variable_13 ; variable_34 -- ; variable_31 += variable_6 -> variable_36 . variable_49 [ 0 ] ; if ( variable_17 - 6 > variable_6 -> variable_7 -> variable_53 * variable_6 -> variable_7 -> variable_54 ) variable_9 += variable_17 - 6 ; for ( variable_31 = 0 ; variable_31 < variable_6 -> variable_36 . variable_49 [ 0 ] * variable_31 += variable_6 -> variable_36 . variable_49 [ 0 ] ) memcpy ( & variable_35 [ variable_31 ] , & variable_3 [ variable_9 ] , variable_6 -> variable_7 -> variable_53 ) ; variable_9 += variable_6 -> variable_7 -> variable_53 ; variable_9 += variable_17 - 6 ; variable_15 -= variable_17 ; variable_16 -- ;

 void func_0 ( ) if ( variable_0 ) char * variable_1 = func_1 ( " BadSink " ) ; static char * func_2 ( char * variable_2 ) size_t variable_3 ; if ( variable_2 != NULL ) variable_4 = strlen ( variable_2 ) ; variable_1 = ( char * ) malloc ( variable_4 + 1 ) ; for ( variable_3 = 0 ; variable_3 < variable_4 ; variable_3 ++ ) variable_1 [ variable_3 ] = variable_2 [ variable_4 - variable_3 - 1 ] ; variable_1 [ variable_4 ] = ' \0 ' ; free ( variable_1 ) ;
 variable_0 :: func_0 ( variable_1 * variable_2 ) variable_3 * variable_4 = variable_2 -> func_1 ( ) ; variable_5 < variable_3 > variable_6 ; variable_1 * variable_7 = variable_2 -> func_2 ( ) ; bool variable_8 = variable_7 && variable_7 -> GetParent ( ) == variable_2 ; variable_3 * variable_9 = variable_10 ; if ( variable_8 ) variable_9 = variable_7 -> func_3 ( ) ; if ( variable_7 ) variable_9 = variable_7 -> func_4 ( ) ; variable_1 * variable_11 = func_5 ( variable_2 ) ; static func_6 ( variable_1 * variable_2 ) variable_1 * variable_11 = variable_2 -> func_7 ( ) ; if ( ! variable_11 && ( variable_2 -> func_8 ( ) & variable_12 ) ) variable_11 = variable_13 < variable_1 * > variable_2 -> func_9 ( ) . func_10 ( variable_1 :: func_11 ( ) ) if ( variable_11 ) variable_11 = variable_13 < variable_1 * > variable_11 -> func_12 ( ) . func_13 ( variable_1 :: func_14 ( ) ) return variable_11 ; variable_3 * variable_14 ; bool variable_15 = variable_11 && ( variable_14 = variable_11 -> func_15 ( ) ) -> func_16 ( ) == variable_4 -> func_17 ( ) && variable_14 -> GetParent ( ) == variable_9 ; if ( variable_15 ) variable_6 = variable_14 ; variable_1 * variable_16 = variable_2 -> GetParent ( ) ; variable_17 * variable_18 = func_18 ( variable_16 ? variable_16 -> func_19 ( ) : variable_10 , variable_2 , variable_4 -> func_20 ( ) ) ; static variable_19 func_21 ( variable_20 * variable_1 * variable_21 :: Type variable_22 ) if ( variable_22 == variable_21 :: variable_23 ) return variable_2 -> func_22 ( ) -> func_23 ( ) ; if ( variable_22 == variable_21 :: variable_24 ) return variable_10 ; if ( variable_22 == variable_21 :: variable_25 ) variable_26 * variable_27 = variable_26 :: func_24 ( variable_2 ) ; return variable_27 -> func_25 ( ) -> func_26 ( ) ; if ( variable_22 == variable_21 :: variable_28 ) variable_1 * variable_29 = variable_2 -> GetParent ( ) -> GetParent ( ) ; return variable_29 -> func_27 ( ) -> func_28 ( ) ; if ( variable_22 == variable_21 :: variable_30 || variable_22 == variable_21 :: variable_31 || variable_22 == variable_21 :: variable_32 || variable_22 == variable_21 :: variable_33 || variable_22 == variable_21 :: variable_34 ) variable_1 * variable_35 = variable_2 -> GetParent ( ) ; while ( variable_35 -> func_29 ( ) != variable_36 :: variable_37 ) variable_35 = variable_35 -> GetParent ( ) ; return variable_35 -> func_30 ( ) -> func_31 ( ) ; if ( variable_38 ) return variable_38 -> func_32 ( ) ; return variable_2 -> func_33 ( ) -> GetParent ( ) -> func_34 ( ) ; variable_20 * variable_39 = variable_2 -> func_35 ( ) ; variable_17 * variable_40 = ( variable_39 && variable_39 -> func_36 ( ) ) ? variable_39 -> func_37 ( ) : variable_10 ; variable_6 = variable_41 -> func_38 ( ) -> func_39 ( variable_4 , variable_9 , variable_18 , variable_40 ) ; if ( variable_6 ) if ( variable_6 != variable_4 ) func_40 ( variable_41 , variable_2 , variable_9 ) ; static func_41 ( variable_42 * variable_43 , variable_1 * variable_3 * variable_44 ) variable_3 * variable_45 = variable_2 -> func_42 ( ) ; func_43 ( variable_43 , variable_2 , variable_45 , variable_10 ) ; static func_44 ( variable_42 * variable_43 , variable_1 * variable_3 * variable_46 , variable_3 * variable_44 ) if ( ! variable_46 ) variable_46 = variable_2 -> func_45 ( ) ; if ( ! variable_44 ) variable_1 * variable_7 = variable_2 -> func_46 ( ) ; if ( variable_7 ) variable_44 = variable_7 -> func_47 ( ) ; variable_3 * variable_47 = variable_46 -> GetParent ( ) ; if ( variable_44 ) if ( variable_44 != variable_47 ) func_48 ( variable_2 , variable_46 ) ; static func_49 ( variable_1 * variable_2 , variable_3 * variable_46 ) if ( variable_2 ) fprintf ( variable_48 , " ( % p ) " , variable_13 < void * > ( variable_2 ) ) if ( variable_46 ) fprintf ( variable_48 , " style : % p " , variable_13 < void * > ( variable_46 ) ) variable_49 * variable_50 = variable_46 -> func_50 ( ) ; if ( variable_50 ) nsAutoString variable_51 ; fputs ( func_51 ( variable_51 ) . func_52 ( ) , variable_48 ) ;

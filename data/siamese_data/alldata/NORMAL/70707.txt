 void func_0 ( ) char * variable_0 ; char variable_1 [ variable_2 ] = variable_3 ; variable_0 = variable_1 ; WSADATA variable_4 ; int variable_5 ; struct sockaddr_in variable_6 ; size_t variable_7 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_4 ) != variable_8 ) variable_9 = func_3 ( variable_10 , variable_11 , variable_12 ) ; if ( variable_9 == variable_13 ) memset ( & variable_6 , 0 , sizeof ( variable_6 ) ) ; variable_6 . variable_14 = variable_10 ; variable_6 . variable_15 . variable_16 = func_4 ( variable_17 ) ; variable_6 . variable_18 = func_5 ( variable_19 ) ; if ( func_6 ( variable_9 , ( struct sockaddr * ) & variable_6 , sizeof ( variable_6 ) ) == variable_20 ) variable_5 = recv ( variable_9 , ( char * ) ( variable_0 + variable_7 ) , sizeof ( char ) * ( variable_2 - variable_7 - 1 ) , 0 ) ; if ( variable_5 == variable_20 || variable_5 == 0 ) variable_0 [ variable_7 + variable_5 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_9 != variable_13 ) func_7 ( variable_9 ) ; func_8 ( variable_0 ) ; void func_9 ( char * variable_0 ) func_10 ( variable_0 ) ; void func_11 ( char * variable_0 ) variable_22 = func_12 ( variable_0 , " wb + " ) ; if ( variable_22 != NULL ) fclose ( variable_22 ) ;
 int main ( ) variable_0 * variable_1 = ( u_char * ) malloc ( 1000 * sizeof ( variable_0 ) ) ; variable_2 = func_0 ( variable_1 ) ; int func_1 ( variable_0 * variable_3 ) variable_4 = variable_3 ; while ( * variable_5 != ' \0 ' ) * variable_4 ++ = * variable_5 ++ ; * variable_4 ++ = * variable_6 ++ ; func_2 ( 30 , variable_4 ) ; variable_4 += 2 ; func_3 ( 255 , variable_4 ) ; variable_4 += 2 ; func_4 ( 255 , variable_4 ) ; variable_4 += 4 ; func_5 ( 16 , variable_4 ) ; variable_4 += 2 ; * variable_4 ++ = * variable_7 ++ ; func_6 ( 1 << 24 , variable_4 ) ; variable_4 += 4 ; func_7 ( 0 , variable_4 ) ; variable_4 += 4 ; func_8 ( 0 , variable_4 ) ; variable_4 += 4 ; func_9 ( 0 , variable_4 ) ; variable_4 += 4 ; printf ( " msglen = %d \n " , variable_2 ) ; variable_8 = variable_1 + sizeof ( variable_9 ) ; variable_10 = func_10 ( variable_1 , variable_2 , variable_8 , variable_11 , 100 ) ; static func_11 ( variable_0 * variable_1 , int variable_2 , variable_0 * variable_12 , variable_0 * variable_13 , int variable_14 ) variable_9 * variable_15 = ( HEADER * ) variable_1 ; variable_16 = variable_12 ; variable_17 = variable_1 + variable_2 ; printf ( " msg = %s , msglen = %d , rrp = %s , namelen = %d \n " , ( char * ) variable_1 , variable_2 , ( char * ) variable_12 , variable_14 ) ; if ( ( variable_18 = func_12 ( variable_1 , variable_17 , variable_16 , ( char * ) variable_13 , variable_14 ) ) < 0 ) printf ( " dn_expand returned %d \n " , variable_18 ) ; variable_15 -> variable_19 = variable_20 ; printf ( " First dn_expand returned n = %d \n " , variable_18 ) ; variable_16 += variable_18 ; variable_21 += variable_18 ; variable_21 += sizeof ( variable_9 ) ; func_13 ( variable_16 , 2 * variable_22 + variable_23 + variable_22 ) ; func_14 ( variable_24 , variable_16 ) ; variable_16 += 2 ; variable_21 += 2 ; func_15 ( variable_25 , variable_16 ) variable_16 += 2 ; variable_21 += 2 ; variable_15 -> variable_19 = variable_20 ; variable_16 += 4 ; variable_21 += 4 ; printf ( " %s : converted TTL > % u to 0 " , variable_13 , variable_26 ) ; func_16 ( variable_27 , variable_16 ) ; variable_16 += 2 ; variable_21 += 2 ; printf ( " msglen - len - 12 = %d , dlen = %d \n " , variable_2 - variable_21 - 12 , variable_27 ) ; func_17 ( variable_16 , variable_27 ) ; variable_28 = variable_16 ; variable_15 -> variable_19 = variable_20 ; variable_18 = func_18 ( variable_1 , variable_17 , variable_16 , ( char * ) variable_29 , sizeof variable_29 ) ; printf ( " n = %d \n " , variable_18 ) ; if ( variable_18 < 0 ) if ( ! func_19 ( ( char * ) variable_29 , variable_25 , NULL , variable_30 , variable_31 , ( char * ) variable_13 ) ) variable_16 += variable_18 ; memcpy ( variable_32 , variable_16 , variable_27 - variable_18 ) ; variable_16 += ( variable_27 - variable_18 ) ; variable_32 += ( variable_27 - variable_18 ) ; variable_18 = variable_32 - ( u_char * ) variable_29 ; return ( ( variable_16 - variable_12 ) + variable_27 ) ; if ( variable_16 > variable_17 ) if ( ( variable_33 ) ( variable_16 - variable_28 ) != variable_27 ) printf ( " encoded rdata length is % u , but actual length was % u " , variable_27 , ( variable_33 ) ( variable_16 - variable_28 ) ) ; if ( variable_18 > variable_34 ) printf ( " update type %d : %d bytes is too much data " , variable_24 , variable_18 ) ; return ( variable_16 - variable_12 ) ; printf ( " rrextract returned %d \n " , variable_10 ) ;

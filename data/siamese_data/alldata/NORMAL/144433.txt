 static void func_0 ( ) char * variable_0 ; char * & variable_1 = variable_0 ; char variable_2 [ 100 ] ; variable_0 = variable_2 ; variable_0 [ 0 ] = ' \0 ' ; char * variable_0 = variable_1 ; char variable_3 [ 100 ] ; memset ( variable_3 , ' C ' , 100 - 1 ) ; variable_3 [ 100 - 1 ] = ' \0 ' ; strncpy ( variable_0 , variable_3 , 100 - 1 ) ; variable_0 [ 100 - 1 ] = ' \0 ' ; func_1 ( variable_0 ) ; void func_2 ( const char * variable_4 ) if ( variable_4 != NULL ) printf ( " %s \n " , variable_4 ) ;
 static int func_0 ( struct variable_0 * variable_1 , enum mg_event variable_2 ) char * variable_3 ; char * variable_4 ; int variable_5 = 1000 ; if ( variable_2 == variable_6 ) variable_3 = ( char * ) func_1 ( variable_1 , " if - match " ) ; if ( strcmp ( variable_3 , " weak_taint_source_value " ) == 0 ) while ( 1 ) variable_4 = ( char * ) malloc ( variable_5 * sizeof ( char ) ) ; variable_7 = func_2 ( variable_1 , " data " , variable_4 , variable_5 * sizeof ( char ) ) ; if ( variable_7 < variable_5 ) variable_5 = variable_5 * 2 ; func_3 ( variable_4 ) ; void func_4 ( char * variable_8 ) unsigned int variable_9 ; FILE * * variable_10 ; int variable_11 ; if ( variable_8 != 0 ) variable_12 = ( ( char * ) variable_8 ) ; if ( strlen ( variable_12 ) > 0 && variable_12 [ 0 ] == ' - ' ) variable_9 = strtoul ( variable_12 , 0 , 16 ) ; if ( variable_9 > 0 variable_13 ) variable_9 = 0 ; variable_10 = ( ( FILE * * ) ( malloc ( variable_9 * sizeof ( FILE * ) ) ) ) ; variable_14 = strlen ( " / opt / stonesoup / workspace / testData / temp " ) + 10 ; variable_15 = ( char * ) malloc ( variable_14 * sizeof ( char ) ) ; if ( variable_10 != 0 ) for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) variable_10 [ variable_11 ] = 0 ; for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) snprintf ( variable_15 , variable_14 , " %s _ % 08x " , " / opt / stonesoup / workspace / testData / temp " , variable_11 ) ; variable_10 [ variable_11 ] = func_5 ( variable_15 ) ; FILE * func_6 ( char * variable_16 ) FILE * variable_17 ; variable_17 = fopen ( variable_16 , " w " ) ; if ( ! variable_17 ) return 0 ; return variable_17 ; if ( variable_10 [ variable_11 ] == 0 ) for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) if ( variable_10 [ variable_11 ] != 0 ) fclose ( variable_10 [ variable_11 ] ) ;
 void func_0 ( union variable_0 * variable_1 ) int variable_2 = 21 ; pid_t variable_3 [ 21 ] ; int variable_4 = 7 ; const char * variable_5 [ 7 ] ; struct pid_fd variable_6 [ 21 ] ; int variable_7 = 0 ; variable_8 = ( ( char * ) ( * ( variable_1 - 5 ) ) . variable_9 ) ; variable_5 [ 0 ] = "  MD5 " ; variable_5 [ 1 ] = "  SHA1 " ; variable_5 [ 2 ] = "  SHA224 " ; variable_5 [ 3 ] = "  SHA256 " ; variable_5 [ 4 ] = "  SHA384 " ; variable_5 [ 5 ] = "  SHA512 " ; variable_5 [ 6 ] = "  RIPEMD160 " ; for ( variable_10 = 0 ; variable_10 < variable_2 ; ++ variable_10 ) variable_3 [ variable_10 ] = - 1 ; if ( ! variable_7 ) for ( variable_10 = 0 ; variable_10 < 3 ; ++ variable_10 ) for ( variable_11 = 0 ; variable_11 < variable_4 ; ++ variable_11 ) variable_12 = variable_11 + variable_10 * variable_4 ; if ( func_1 ( variable_6 [ variable_12 ] . variable_13 ) == - 1 ) variable_14 = func_2 ( ) ; if ( variable_14 >= 0 ) if ( variable_14 == 0 ) func_3 ( variable_5 [ variable_11 ] , variable_8 ) ; variable_6 [ variable_12 ] . variable_15 = variable_14 ; void func_4 ( const char * variable_16 , char * variable_17 ) char variable_18 [ 129 ] = { 0 } ; unsigned char variable_19 [ 1024 ] ; size_t variable_20 = 1024 ; unsigned char variable_21 [ 64 ] ; unsigned int variable_22 = 0 ; int variable_23 = 0 ; memset ( variable_21 , 0 , 64 ) ; variable_24 = fopen ( variable_17 , " rb " ) ; if ( variable_24 != 0 ) variable_25 = func_5 ( variable_16 ) ; if ( variable_25 != 0 ) variable_26 = func_6 ( ) ; if ( variable_26 != 0 ) if ( func_7 ( variable_26 , variable_25 , 0 ) ) while ( ! feof ( variable_24 ) ) memset ( variable_19 , 0 , variable_20 ) ; variable_27 = fread ( variable_19 , sizeof ( unsigned char ) , variable_20 , variable_24 ) ; variable_23 = func_8 ( variable_26 , variable_19 , variable_27 ) ; if ( 1 != variable_23 ) if ( 1 == variable_23 ) if ( func_9 ( variable_26 , variable_21 , & variable_22 ) ) for ( variable_28 = 0 ; variable_28 < variable_22 ; ++ variable_28 ) sprintf ( & variable_18 [ variable_28 * 2 ] , " % 02x " , variable_21 [ variable_28 ] ) ;

 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = L " " variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = wcslen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = func_4 ( variable_15 ) ; variable_4 . variable_16 = func_5 ( variable_17 ) ; if ( func_6 ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) variable_3 = recv ( variable_7 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( wchar_t ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ;
 int main ( int variable_0 , char * * variable_1 ) char variable_2 [ variable_3 ] = " Format string test : [ < % x % x % x % x > ] \n " ; int variable_4 = strlen ( variable_2 ) ; func_0 ( variable_2 , variable_4 ) ; static void func_1 ( char * variable_5 , int variable_6 ) static char variable_7 [ variable_3 ] ; static char * variable_8 = variable_7 ; static enum parse_state_enum variable_9 = variable_10 ; static int variable_11 = sizeof ( variable_7 ) - 1 ; static char * variable_12 ; auto int variable_13 = 0 ; while ( variable_6 > 0 ) if ( variable_11 == 0 ) * variable_8 = 0 ; variable_8 = variable_7 ; variable_11 = sizeof ( variable_7 ) - 1 ; variable_9 = variable_10 ; switch ( variable_9 ) variable_13 = func_2 ( variable_8 , variable_11 , variable_5 , variable_6 , " \n [ % " ) ; static int func_3 ( char * variable_8 , int const char * variable_5 , int const char * variable_14 ) auto int variable_15 auto int variable_16 ; variable_16 = variable_6 < variable_11 ? variable_6 : variable_11 ; for ( variable_15 = 0 ; variable_15 < variable_16 && ! strchr ( variable_14 , * variable_5 ) ; variable_15 ++ ) return ( variable_15 ) ; variable_8 += variable_13 ; variable_5 += variable_13 ; variable_11 -= variable_13 ; variable_6 -= variable_13 ; if ( variable_11 == 0 || variable_6 == 0 ) if ( * variable_5 == ' \n ' ) * variable_8 ++ = * variable_5 ++ ; variable_6 -= 1 ; func_4 ( variable_17 , variable_7 ) ; variable_8 = variable_7 ; variable_11 = sizeof ( variable_7 ) - 1 ; if ( * variable_5 == ' [ ' ) * variable_8 ++ = * variable_5 ++ ; variable_11 -= 1 ; variable_6 -= 1 ; variable_9 = variable_18 ; if ( * variable_5 == ' % ' ) variable_13 = 0 ; while ( variable_6 && * variable_5 == ' % ' ) * variable_8 ++ = * variable_5 ++ ; variable_11 -= 1 ; variable_6 -= 1 ; variable_13 ++ ; if ( variable_13 % 2 ) if ( variable_11 ) * variable_8 ++ = ' % ' ; variable_11 -= 1 ; * variable_8 ++ = ' \0 ' ; if ( * variable_5 != ' < ' ) variable_9 = variable_10 ; variable_12 = variable_8 ; * variable_8 ++ = * variable_5 ++ ; variable_11 -= 1 ; variable_6 -= 1 ; variable_9 = variable_19 ; variable_13 = func_5 ( variable_8 , variable_11 , variable_5 , variable_6 , " > \n [ " ) ; static int func_6 ( char * variable_8 , int const char * variable_5 , int const char * variable_14 ) auto int variable_15 auto int variable_16 ; variable_16 = variable_6 < variable_11 ? variable_6 : variable_11 ; return ( variable_15 ) ; variable_8 += variable_13 ; variable_5 += variable_13 ; variable_11 -= variable_13 ; variable_6 -= variable_13 ; if ( variable_11 == 0 || variable_6 == 0 ) if ( * variable_5 != ' > ' ) variable_9 = variable_10 ; * variable_8 ++ = * variable_5 ++ ; variable_11 -= 1 ; variable_6 -= 1 ; variable_9 = variable_20 ; if ( * variable_5 != ' ] ' ) variable_9 = variable_10 ; auto int variable_21 ; auto struct symbol variable_22 auto char * variable_23 ; * ( variable_8 - 1 ) = 0 ; * ( variable_8 - 1 ) = ' > ' ; variable_23 = " symbolfoo " ; if ( ! variable_24 || variable_23 == ( char * ) 0 ) variable_9 = variable_10 ; variable_21 = variable_11 + ( variable_8 - variable_12 ) ; if ( variable_21 < strlen ( variable_23 ) + 30 ) variable_9 = variable_10 ; variable_13 = sprintf ( variable_12 , " %s + %d / %d ] " , variable_23 , variable_22 . variable_25 , variable_22 . variable_26 ) ; variable_11 = variable_21 + variable_13 ; variable_8 = variable_12 + variable_13 ; variable_5 ++ ; variable_6 -- ; variable_9 = variable_10 ; variable_9 = variable_10 ; extern void func_7 ( int variable_27 , char * variable_28 , . . . ) if ( variable_29 ) fprintf ( variable_30 , " \t Line : %s \n " , variable_28 ) ; fprintf ( variable_30 , " \t Priority : %d \n " , variable_27 ) ;

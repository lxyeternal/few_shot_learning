 static void func_0 ( ) wchar_t * variable_0 ; variable_1 < int , wchar_t * > variable_2 ; variable_0 = NULL ; variable_0 = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ; variable_0 [ 0 ] = L ' \0 ' variable_2 [ 0 ] = variable_0 ; variable_2 [ 1 ] = variable_0 ; variable_2 [ 2 ] = variable_0 ; func_1 ( variable_2 ) ; void func_2 ( variable_1 < int , wchar_t * > variable_2 ) wchar_t * variable_0 = variable_2 [ 2 ] ; size_t variable_3 ; wchar_t variable_4 [ 100 ] ; wmemset ( variable_4 , L ' C ' , 100 - 1 variable_4 [ 100 - 1 ] = L ' \0 ' for ( variable_3 = 0 ; variable_3 < 100 ; variable_3 ++ ) variable_0 [ variable_3 ] = variable_4 [ variable_3 ] ; variable_0 [ 100 - 1 ] = L ' \0 ' free ( variable_0 ) ;
 const EVP_CIPHER * func_0 ( ) long variable_0 ; char * variable_1 ; if ( func_1 ( & variable_2 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_1 != 0 ) variable_3 = ( ( void * ) variable_1 ) ; variable_4 = func_3 ( variable_3 ) ; void * func_4 ( void * variable_5 ) return variable_5 ; variable_6 = ( ( char * ) ( ( char * ) variable_4 ) ) ; variable_0 = strtol ( variable_6 , 0 variable_7 , 10 ) ; if ( variable_0 > 0 ) variable_8 = func_5 ( variable_0 ) ; struct variable_9 * func_6 ( long variable_10 ) variable_11 = ( ( struct stonesoup_struct_data * ) ( malloc ( sizeof ( struct variable_9 ) ) ) ) ; if ( variable_11 == 0 ) return 0 ; variable_11 -> variable_12 = 0 ; variable_11 -> variable_12 = variable_10 ; variable_11 -> variable_13 = ( ( char * ) ( malloc ( sizeof ( char ) * variable_11 -> variable_12 ) ) ) ; if ( variable_11 -> variable_13 == 0 ) return 0 ; memset ( variable_11 -> variable_13 , ' a ' , variable_11 -> variable_12 ) ; variable_11 -> variable_13 [ variable_11 -> variable_12 - 1 ] = 0 ; return variable_11 ; if ( variable_8 != 0 ) memset ( variable_8 -> variable_13 , 98 , variable_0 ) ; variable_8 -> variable_13 [ variable_0 - 1 ] = 0 ; func_7 ( " %s \n " , variable_8 -> variable_13 ) ; void func_8 ( char * variable_14 , . . . ) va_start ( variable_15 , variable_14 ) ; vfprintf ( variable_16 , variable_14 , variable_15 ) ; if ( variable_8 -> variable_13 != 0 variable_7 ) free ( variable_8 -> variable_13 ) ; if ( variable_8 != 0 variable_7 ) free ( variable_8 ) ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; size_t variable_2 = strlen ( variable_0 ) ; FILE * variable_3 ; if ( 100 - variable_2 > 1 ) variable_3 = fopen ( variable_4 , " r " ) ; if ( variable_3 != NULL ) if ( fgets ( variable_0 + variable_2 , ( int ) ( 100 - variable_2 ) , variable_3 ) == NULL ) variable_0 [ variable_2 ] = ' \0 ' ; fclose ( variable_3 ) ; func_1 ( variable_0 ) ; void func_2 ( char * variable_0 )
 variable_0 * func_0 ( const char * variable_1 , long variable_2 , variable_3 * variable_4 , int variable_5 ) variable_0 * variable_6 ; variable_6 = ( ( HTAB * ) ( func_1 ( sizeof ( variable_0 ) + strlen ( variable_1 ) + 1 ) ) ) ; static void * func_2 ( Size variable_7 ) return func_3 ( variable_8 , variable_7 ) ; void * variable_9 = ( void * ) variable_6 ; if ( ( ( ( variable_10 ) variable_9 ) & sizeof ( long ) - 1 ) == 0 && ( variable_11 & sizeof ( long ) - 1 ) == 0 && variable_12 == 0 && variable_11 <= 1024 && 1024 != 0 ) long * variable_13 = ( long * ) variable_9 ; long * variable_14 = ( long * ) ( ( ( char * ) variable_13 ) + variable_11 ) ; while ( variable_13 < variable_14 ) * ( variable_13 ++ ) = 0 ; memset ( variable_9 , variable_12 , variable_11 ) ; variable_6 -> variable_1 = ( ( char * ) ( variable_6 + 1 ) ) ; strcpy ( variable_6 -> variable_1 , variable_1 ) ; variable_6 -> variable_15 = variable_4 -> variable_15 ; variable_6 -> variable_15 = variable_16 ; variable_6 -> variable_17 = variable_4 -> variable_17 ; if ( variable_6 -> variable_15 == variable_16 ) variable_6 -> variable_17 = ( ( variable_18 ) variable_19 ) ; variable_6 -> variable_17 = variable_20 ; variable_6 -> variable_21 = variable_4 -> variable_21 ; if ( variable_6 -> variable_15 == variable_16 ) variable_6 -> variable_21 = ( ( variable_22 ) variable_23 ) ; variable_6 -> variable_21 = variable_24 ; variable_6 -> variable_25 = variable_4 -> variable_25 ; variable_6 -> variable_25 = variable_26 ; variable_6 -> variable_27 = variable_4 -> variable_27 ; variable_6 -> variable_28 = ( ( HASHSEGMENT * ) ( ( ( char * ) ( variable_4 -> variable_27 ) ) + sizeof ( variable_29 ) ) ) ; variable_6 -> variable_30 = ( ( void * ) 0 ) ; variable_6 -> variable_31 = ( ( bool ) 1 ) ; variable_27 = variable_6 -> variable_27 ; variable_6 -> variable_32 = variable_27 -> variable_32 ; variable_6 -> variable_33 = variable_27 -> variable_33 ; variable_6 -> variable_34 = variable_27 -> variable_34 ; return variable_6 ; variable_6 -> variable_27 = ( ( void * ) 0 ) ; variable_6 -> variable_28 = ( ( void * ) 0 ) ; variable_6 -> variable_30 = variable_8 ; variable_6 -> variable_31 = ( ( bool ) 0 ) ; if ( ! variable_6 -> variable_27 ) variable_6 -> variable_27 = ( ( HASHHDR * ) ( ( variable_6 -> variable_25 ) ( sizeof ( variable_29 ) ) ) ) ; if ( ! variable_6 -> variable_27 ) variable_6 -> variable_35 = ( ( bool ) 0 ) ; func_4 ( variable_6 ) ; static void func_5 ( variable_0 * variable_6 ) variable_29 * variable_27 = variable_6 -> variable_27 ; void * variable_9 = ( void * ) variable_27 ; if ( ( ( ( variable_10 ) variable_9 ) & sizeof ( long ) - 1 ) == 0 && ( variable_11 & sizeof ( long ) - 1 ) == 0 && variable_12 == 0 && variable_11 <= 1024 && 1024 != 0 ) long * variable_13 = ( long * ) variable_9 ; long * variable_14 = ( long * ) ( ( ( char * ) variable_13 ) + variable_11 ) ; while ( variable_13 < variable_14 ) * ( variable_13 ++ ) = 0 ; memset ( variable_9 , variable_12 , variable_11 ) ; variable_27 -> variable_36 = 0 ; variable_27 -> variable_37 = ( ( void * ) 0 ) ; variable_27 -> variable_38 = 256 ; variable_27 -> variable_39 = 0 ; variable_27 -> variable_32 = sizeof ( char * ) ; variable_27 -> variable_40 = 2 * sizeof ( char * ) ; variable_27 -> variable_41 = 0 ; variable_27 -> variable_42 = 1 ; variable_27 -> variable_43 = ( - 1 ) ; variable_27 -> variable_33 = 256 ; variable_27 -> variable_34 = 8 ; variable_27 = variable_6 -> variable_27 ; variable_27 -> variable_41 = variable_4 -> variable_41 ; variable_27 -> variable_33 = variable_4 -> variable_33 ; variable_27 -> variable_34 = func_6 ( variable_4 -> variable_33 ) ; int func_7 ( long variable_44 ) if ( variable_44 > 9223372036854775807L / 2 ) variable_44 = 9223372036854775807L / 2 ; for ( ( variable_45 = 0 , variable_46 = 1 ) ; variable_46 < variable_44 ; ( variable_45 ++ , variable_46 << = 1 ) ) variable_27 -> variable_42 = variable_4 -> variable_42 ; variable_27 -> variable_43 = variable_4 -> variable_43 ; variable_27 -> variable_38 = variable_4 -> variable_38 ; variable_27 -> variable_32 = variable_4 -> variable_32 ; variable_27 -> variable_40 = variable_4 -> variable_40 ; variable_6 -> variable_32 = variable_27 -> variable_32 ; variable_6 -> variable_33 = variable_27 -> variable_33 ; variable_6 -> variable_34 = variable_27 -> variable_34 ; if ( ! func_8 ( variable_6 , variable_2 ) ) static bool func_9 ( variable_0 * variable_6 , long variable_2 ) variable_29 * variable_27 = variable_6 -> variable_27 ; if ( variable_27 -> variable_41 != 0 ) * ( ( volatile slock_t * ) ( & variable_27 -> variable_47 ) ) = 0 ; variable_48 = func_10 ( ( variable_2 - 1 ) / variable_27 -> variable_42 + 1 ) ; static int func_11 ( long variable_44 ) if ( variable_44 > ( 2147483647 / 2 ) ) variable_44 = ( 2147483647 / 2 ) ; return 1 << func_12 ( variable_44 ) ; int func_13 ( long variable_44 ) if ( variable_44 > 9223372036854775807L / 2 ) variable_44 = 9223372036854775807L / 2 ; while ( variable_48 < variable_27 -> variable_41 ) variable_48 << = 1 ; variable_27 -> variable_49 = variable_27 -> variable_50 = ( variable_48 - 1 ) ; variable_27 -> variable_51 = ( ( variable_48 << 1 ) - 1 ) ; variable_39 = ( ( variable_48 - 1 ) / variable_27 -> variable_33 + 1 ) ; variable_39 = func_14 ( variable_39 ) ; static int func_15 ( long variable_44 ) if ( variable_44 > ( 2147483647 / 2 ) ) variable_44 = ( 2147483647 / 2 ) ; return 1 << func_16 ( variable_44 ) ; if ( variable_39 > variable_27 -> variable_38 ) if ( ! variable_6 -> variable_28 ) variable_27 -> variable_38 = variable_39 ; if ( ! variable_6 -> variable_28 ) variable_8 = variable_6 -> variable_30 ; variable_6 -> variable_28 = ( ( HASHSEGMENT * ) ( ( variable_6 -> variable_25 ) ( ( variable_27 -> variable_38 ) * sizeof ( variable_52 ) ) ) ) ; if ( ! variable_6 -> variable_28 ) for ( variable_53 = variable_6 -> variable_28 ; variable_27 -> variable_39 < variable_39 ; ( variable_27 -> variable_39 ++ , variable_53 ++ ) ) * variable_53 = func_17 ( variable_6 ) ; static HASHSEGMENT func_18 ( variable_0 * variable_6 ) variable_8 = variable_6 -> variable_30 ; variable_53 = ( ( variable_52 ) ( ( variable_6 -> variable_25 ) ( sizeof ( variable_54 ) * ( variable_6 -> variable_33 ) ) ) ) ; if ( ! variable_53 ) void * variable_9 = ( void * ) variable_53 ; Size variable_11 = sizeof ( variable_54 ) * ( variable_6 -> variable_33 ) ; if ( ( ( ( variable_10 ) variable_9 ) & sizeof ( long ) - 1 ) == 0 && ( variable_11 & sizeof ( long ) - 1 ) == 0 && variable_12 == 0 && variable_11 <= 1024 && 1024 != 0 ) long * variable_13 = ( long * ) variable_9 ; long * variable_14 = ( long * ) ( ( ( char * ) variable_13 ) + variable_11 ) ; while ( variable_13 < variable_14 ) * ( variable_13 ++ ) = 0 ; memset ( variable_9 , variable_12 , variable_11 ) ; return variable_53 ; if ( * variable_53 == ( ( void * ) 0 ) ) variable_27 -> variable_55 = func_19 ( variable_27 -> variable_40 ) ; static int func_20 ( Size variable_40 ) variable_56 = ( ( ( ( variable_10 ) ( sizeof ( variable_57 ) ) ) + ( 8 - 1 ) & ~ ( ( variable_10 ) ( 8 - 1 ) ) ) + ( ( ( variable_10 ) variable_40 ) + ( 8 - 1 ) & ~ ( ( variable_10 ) ( 8 - 1 ) ) ) ) ; variable_55 = ( variable_58 / variable_56 ) ; while ( variable_55 < 32 ) return variable_55 ; func_21 ( " dynahash . c " , 434 , variable_59 ) , func_22 ( 20 , " failed to initialize hash table \ " % variable_60 \ " " , variable_6 -> variable_1 ) ; if ( variable_5 & 0 variable_61 || variable_2 < ( variable_27 -> variable_55 ) ) if ( ! func_23 ( variable_6 , ( ( int ) variable_2 ) ) ) static bool func_24 ( variable_0 * variable_6 , int variable_2 ) volatile variable_29 * variable_62 = ( variable_6 -> variable_27 ) ; if ( variable_6 -> variable_63 ) variable_56 = ( ( ( ( variable_10 ) ( sizeof ( variable_57 ) ) ) + ( 8 - 1 ) & ~ ( ( variable_10 ) ( 8 - 1 ) ) ) + ( ( ( variable_10 ) ( variable_62 -> variable_40 ) ) + ( 8 - 1 ) & ~ ( ( variable_10 ) ( 8 - 1 ) ) ) ) ; variable_8 = variable_6 -> variable_30 ; variable_64 = ( ( HASHELEMENT * ) ( ( variable_6 -> variable_25 ) ( variable_2 * variable_56 ) ) ) ; if ( ! variable_64 ) variable_65 = variable_64 ; for ( variable_45 = 0 ; variable_45 < variable_2 ; variable_45 ++ ) variable_65 -> variable_66 = variable_67 ; variable_67 = variable_65 ; variable_65 = ( ( HASHELEMENT * ) ( ( ( char * ) variable_65 ) + variable_56 ) ) ; if ( variable_62 -> variable_41 != 0 ) if ( func_25 ( & variable_62 -> variable_47 ) ) func_26 ( & variable_62 -> variable_47 , " dynahash . c " , 1384 ) ; variable_64 -> variable_66 = variable_62 -> variable_37 ; variable_62 -> variable_37 = variable_67 ; if ( variable_62 -> variable_41 != 0 ) * ( ( volatile slock_t * ) ( & variable_62 -> variable_47 ) ) = 0 ; variable_6 -> variable_63 = ( ( bool ) 1 ) ; return variable_6 ;

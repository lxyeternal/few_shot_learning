 static void func_0 ( ) variable_0 * variable_1 ; variable_1 = ( int64_t * ) malloc ( 1 * sizeof ( variable_0 ) ) ; func_1 ( & variable_1 ) ; void func_2 ( void * variable_2 ) variable_0 * * variable_3 = ( variable_0 * * ) variable_2 ; variable_0 * variable_1 = ( * variable_3 ) ; if ( variable_1 != NULL ) func_3 ( variable_1 [ 0 ] ) ; void func_4 ( int64_t variable_4 ) printf ( " % lld \n " , variable_4 ) ; free ( variable_1 ) ;
 static variable_0 * func_0 ( struct variable_1 * variable_2 , u32 variable_3 ) unsigned int variable_4 = ( char * ) variable_2 -> variable_5 - ( char * ) variable_2 -> variable_6 ; variable_0 * variable_6 ; if ( variable_4 + variable_2 -> variable_7 < variable_3 ) if ( variable_4 + variable_8 < variable_3 ) if ( variable_3 <= sizeof ( variable_2 -> variable_9 ) ) variable_6 = variable_2 -> variable_9 ; variable_6 = variable_2 -> variable_10 = kmalloc ( variable_3 , variable_11 ) ; if ( ! variable_6 ) memcpy ( variable_6 , variable_2 -> variable_6 , variable_4 ) ; variable_2 -> variable_6 = func_1 ( variable_2 -> variable_12 [ 0 ] ) ; variable_2 -> variable_12 ++ ; if ( variable_2 -> variable_7 < variable_8 ) variable_2 -> variable_5 = variable_2 -> variable_6 + ( variable_2 -> variable_7 >> 2 ) ; variable_2 -> variable_7 = 0 ; variable_2 -> variable_5 = variable_2 -> variable_6 + ( variable_8 >> 2 ) ; variable_2 -> variable_7 -= variable_8 ; memcpy ( ( ( char * ) variable_6 ) + variable_4 , variable_2 -> variable_6 , ( variable_3 - variable_4 ) ) ;

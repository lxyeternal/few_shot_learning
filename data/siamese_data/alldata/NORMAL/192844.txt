 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = func_4 ( variable_15 ) ; variable_4 . variable_16 = func_5 ( variable_17 ) ; if ( func_6 ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) variable_3 = recv ( variable_7 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_19 = strchr ( variable_0 , ' \r ' ) ; if ( variable_19 ) * variable_19 = ' \0 ' ; variable_19 = strchr ( variable_0 , ' \n ' ) ; if ( variable_19 ) * variable_19 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ; variable_20 -> func_8 ( variable_0 ) ; void variable_21 :: func_9 ( char * variable_0 ) variable_22 = func_10 ( variable_0 ) ; if ( variable_22 != NULL ) FreeLibrary ( variable_22 ) ;
 guint func_0 ( const char * variable_0 , variable_1 * * variable_2 ) char variable_3 [ 100 ] ; int variable_4 = 1 ; int variable_5 = 0 ; char variable_6 [ 1000 ] = { 0 } ; char * ( * variable_7 ) [ 68 ] = 0 ; char * variable_8 [ 68 ] = { 0 } ; char * variable_9 ; if ( func_1 ( & variable_10 , 0 , 1 ) ) if ( func_2 ( " / opt / stonesoup / workspace / lockDir " , 509U ) == 0 ) if ( variable_9 != 0 ) variable_8 [ 58 ] = variable_9 ; variable_7 = & variable_8 ; variable_11 = ( ( char * ) ( * variable_7 ) [ 58 ] ) ; snprintf ( variable_6 , 1000 , " vim - s " " / opt / stonesoup / workspace / testData / " " vim_scripts / hello . vim %s " , variable_11 ) for ( ; variable_5 < strlen ( variable_11 ) ; ++ variable_5 ) if ( variable_11 [ variable_5 ] == ' ; ' ) if ( variable_5 == 0 || variable_11 [ variable_5 - 1 ] != ' \ \ ' ) variable_4 = 0 ; if ( variable_11 [ variable_5 ] == ' | ' ) if ( variable_5 == 0 || variable_11 [ variable_5 - 1 ] != ' \ \ ' ) variable_4 = 0 ; if ( variable_11 [ variable_5 ] == ' | ' ) if ( variable_5 == 0 || variable_11 [ variable_5 - 1 ] != ' | ' ) variable_4 = 0 ; if ( variable_11 [ variable_5 ] == ' & ' ) if ( variable_5 == 0 || variable_11 [ variable_5 - 1 ] != ' \ \ ' ) variable_4 = 0 ; if ( variable_11 [ variable_5 ] == ' & ' ) if ( variable_5 == 0 || variable_11 [ variable_5 - 1 ] != ' & ' ) variable_4 = 0 ; if ( variable_4 == 1 ) variable_12 = func_3 ( variable_6 , " r " ) ; if ( variable_12 != 0 ) while ( fgets ( variable_3 , 100 , variable_12 ) != 0 ) func_4 ( variable_3 ) ; void func_5 ( char * variable_13 , . . . ) va_start ( variable_14 , variable_13 ) ; vfprintf ( variable_15 , variable_13 , variable_14 ) ;

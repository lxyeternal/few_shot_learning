 static void func_0 ( ) int variable_0 ; variable_0 = - 1 ; if ( variable_1 ) char variable_2 [ variable_3 ] = " " ; if ( fgets ( variable_2 , variable_3 , variable_4 ) != NULL ) variable_0 = atoi ( variable_2 ) ; if ( variable_5 ) int variable_6 ; int * variable_7 = ( int * ) malloc ( 10 * sizeof ( int ) ) ; for ( variable_6 = 0 ; variable_6 < 10 ; variable_6 ++ ) variable_7 [ variable_6 ] = 0 ; if ( variable_0 >= 0 && variable_0 < ( 10 ) ) variable_7 [ variable_0 ] = 1 ; free ( variable_7 ) ;
 func_0 ( variable_0 * variable_1 , variable_2 * variable_3 ) variable_4 * variable_5 ; if ( ! variable_1 ) variable_5 = variable_1 -> variable_5 ; switch ( variable_5 -> variable_6 ) if ( variable_5 -> variable_7 ) func_1 ( variable_1 , variable_3 , variable_8 ) ; static func_2 ( variable_0 * variable_1 , variable_2 * variable_3 , gboolean variable_9 ) char * variable_10 ; int variable_11 , variable_12 ; guint32 variable_13 ; guint32 variable_14 ; char variable_15 [ 32 ] ; const char * variable_16 ; variable_4 * variable_5 = variable_1 -> variable_5 ; variable_12 = func_3 ( variable_5 ) ;  func_4 ( const header_field_info * variable_5 ) int variable_12 = 0 ; if ( ! variable_5 -> variable_7 ) return 0 ; switch ( variable_5 -> variable_6 ) variable_12 = 8 ; variable_12 = 16 ; variable_12 = 24 ; variable_12 = 32 ; variable_12 = 40 ; variable_12 = 48 ; variable_12 = 56 ; variable_12 = 64 ; variable_12 = variable_5 -> variable_17 ; return variable_12 ; if ( variable_9 ) variable_13 = func_5 ( & variable_1 -> variable_14 ) ; variable_13 = func_6 ( & variable_1 -> variable_14 ) ; variable_14 = variable_13 ; if ( variable_5 -> variable_7 ) variable_13 << = func_7 ( variable_5 ) ;  func_8 ( const header_field_info * variable_5 ) return func_9 ( variable_5 -> variable_7 ) ; variable_10 = func_10 ( variable_3 , variable_13 , variable_5 -> variable_7 , variable_12 ) ; static char func_11 ( char * variable_15 , const guint64 variable_18 , const guint64 variable_19 , const int variable_20 ) char * variable_10 ; variable_10 = func_12 ( variable_15 , variable_18 , variable_19 , variable_20 ) ; static char func_13 ( char * variable_15 , const guint64 variable_18 , const guint64 variable_19 , const int variable_20 ) int variable_21 ; guint64 variable_22 ; char * variable_10 ; variable_21 = 0 ; variable_10 = variable_15 ; variable_22 = func_14 ( 1 ) << ( variable_20 - 1 ) ; if ( variable_19 & variable_22 ) if ( variable_18 & variable_22 ) * variable_10 ++ = ' 1 ' ; * variable_10 ++ = ' 0 ' ; * variable_10 ++ = ' . ' ; variable_22 >> = 1 ; variable_21 ++ ; if ( variable_21 >= variable_20 ) if ( variable_21 % 4 == 0 ) * variable_10 ++ = ' ' ; * variable_10 = ' \0 ' ; return variable_10 ; variable_10 = func_15 ( variable_10 , " = " ) ; return variable_10 ; variable_11 = ( int ) ( variable_10 - variable_3 ) ; if ( variable_5 -> variable_17 == variable_23 ) if ( variable_5 -> variable_24 ) variable_16 = func_16 ( variable_5 , variable_15 , variable_14 ) ; static const char func_17 ( const header_field_info * variable_5 , char variable_15 [ 32 ] , guint32 variable_14 ) int variable_17 = variable_5 -> variable_17 & variable_25 ; if ( variable_17 == variable_26 ) return NULL ; if ( variable_17 == variable_27 ) variable_17 = variable_28 ; if ( variable_17 == variable_29 ) variable_17 = variable_30 ; return func_18 ( variable_5 , variable_17 , variable_15 , variable_14 ) ; static const char func_19 ( const header_field_info * variable_5 , int variable_17 , char variable_15 [ 32 ] , guint32 variable_14 ) char * variable_31 = & variable_15 [ 31 ] ; gboolean variable_32 = func_20 ( variable_5 -> variable_6 ) ; * variable_31 = ' \0 ' ; switch ( variable_17 & variable_25 ) return variable_32 ? func_21 ( variable_31 , ( variable_33 ) variable_14 ) : func_22 ( variable_31 , variable_14 ) ; * ( -- variable_31 ) = ' ) ' ; variable_31 = func_23 ( variable_31 , func_24 ( variable_5 -> variable_6 ) , variable_14 ) ; static func_25 ( int variable_6 ) switch ( variable_6 ) return 2 ; return 4 ; return 6 ; return 8 ; return 10 ; return 12 ; return 14 ; return 16 ; return - 1 ; * ( -- variable_31 ) = ' ( ' ; * ( -- variable_31 ) = ' ' ; variable_31 = variable_32 ? func_26 ( variable_31 , ( variable_33 ) variable_14 ) : func_27 ( variable_31 , variable_14 ) ; return variable_31 ; return func_28 ( variable_31 , variable_14 ) ; return func_29 ( variable_31 , func_30 ( variable_5 -> variable_6 ) , variable_14 ) ; static func_31 ( int variable_6 ) switch ( variable_6 ) return 2 ; return 4 ; return 6 ; return 8 ; return 10 ; return 12 ; return 14 ; return 16 ; return - 1 ; * ( -- variable_31 ) = ' ) ' ; variable_31 = variable_32 ? func_32 ( variable_31 , ( variable_33 ) variable_14 ) : func_33 ( variable_31 , variable_14 ) ; * ( -- variable_31 ) = ' ( ' ; * ( -- variable_31 ) = ' ' ; variable_31 = func_34 ( variable_31 , func_35 ( variable_5 -> variable_6 ) , variable_14 ) ; static func_36 ( int variable_6 ) switch ( variable_6 ) return 2 ; return 4 ; return 6 ; return 8 ; return 10 ; return 12 ; return 14 ; return 16 ; return - 1 ; return variable_31 ; return variable_15 ; return variable_31 ; variable_16 = func_37 ( variable_5 , variable_15 , variable_14 ) ; static const char func_38 ( const header_field_info * variable_5 , char variable_15 [ 32 ] , guint32 variable_14 ) int variable_17 = variable_5 -> variable_17 ; if ( variable_5 -> variable_6 == variable_34 ) variable_17 = variable_28 ; return func_39 ( variable_5 , variable_17 , variable_15 , variable_14 ) ; static const char func_40 ( const header_field_info * variable_5 , int variable_17 , char variable_15 [ 32 ] , guint32 variable_14 ) char * variable_31 = & variable_15 [ 31 ] ; gboolean variable_32 = func_41 ( variable_5 -> variable_6 ) ; * variable_31 = ' \0 ' ; switch ( variable_17 & variable_25 ) return variable_32 ? func_42 ( variable_31 , ( variable_33 ) variable_14 ) : func_43 ( variable_31 , variable_14 ) ; * ( -- variable_31 ) = ' ) ' ; variable_31 = func_44 ( variable_31 , func_45 ( variable_5 -> variable_6 ) , variable_14 ) ; * ( -- variable_31 ) = ' ( ' ; * ( -- variable_31 ) = ' ' ; variable_31 = variable_32 ? func_46 ( variable_31 , ( variable_33 ) variable_14 ) : func_47 ( variable_31 , variable_14 ) ; return variable_31 ; return func_48 ( variable_31 , variable_14 ) ; return func_49 ( variable_31 , func_50 ( variable_5 -> variable_6 ) , variable_14 ) ; * ( -- variable_31 ) = ' ) ' ; variable_31 = variable_32 ? func_51 ( variable_31 , ( variable_33 ) variable_14 ) : func_52 ( variable_31 , variable_14 ) ; * ( -- variable_31 ) = ' ( ' ; * ( -- variable_31 ) = ' ' ; variable_31 = func_53 ( variable_31 , func_54 ( variable_5 -> variable_6 ) , variable_14 ) ; return variable_31 ; return variable_15 ; return variable_31 ; func_55 ( variable_3 , variable_11 , variable_5 , variable_16 ) ; static func_56 ( char * variable_3 , gsize variable_35 , const header_field_info * variable_5 , const char * variable_36 ) gsize variable_37 ; variable_37 = variable_35 = func_57 ( variable_3 , variable_35 , variable_5 -> variable_38 ) ; static variable_39 func_58 ( char * variable_3 , gsize variable_35 , const char * variable_40 ) if ( variable_35 < variable_41 ) variable_35 += func_59 ( variable_3 + variable_35 , variable_40 , variable_41 - variable_35 ) ; return variable_35 ; variable_35 = func_60 ( variable_3 , variable_35 , " : " ) ; static variable_39 func_61 ( char * variable_3 , gsize variable_35 , const char * variable_40 ) if ( variable_35 < variable_41 ) variable_35 += func_62 ( variable_3 + variable_35 , variable_40 , variable_41 - variable_35 ) ; return variable_35 ; variable_35 = func_63 ( variable_3 , variable_35 , variable_36 ? variable_36 : " ( null ) " ) ; static variable_39 func_64 ( char * variable_3 , gsize variable_35 , const char * variable_40 ) if ( variable_35 < variable_41 ) variable_35 += func_65 ( variable_3 + variable_35 , variable_40 , variable_41 - variable_35 ) ; return variable_35 ; if ( variable_35 >= variable_41 ) func_66 ( variable_3 , variable_37 ) ; static func_67 ( char * variable_3 , gsize variable_37 ) static const char variable_42 [ ] = " [ truncated ] " ; const size_t variable_43 = sizeof ( variable_42 ) - 1 ; if ( variable_37 < variable_41 - variable_43 ) memmove ( variable_3 + variable_37 + variable_43 , variable_3 + variable_37 , variable_41 - variable_37 - variable_43 ) ; memcpy ( variable_3 + variable_37 , variable_42 , variable_43 ) ; variable_44 = func_68 ( & variable_3 [ variable_41 ] ) ; * variable_44 = ' \0 ' ; func_69 ( variable_3 + variable_37 , variable_42 , variable_41 - variable_37 ) ;
 int func_0 ( variable_0 * variable_1 , variable_2 * * variable_3 ) int variable_4 ; int variable_5 ; int variable_6 ; int variable_7 ; variable_8 * variable_9 ; variable_10 * variable_11 ; for ( variable_4 = 0 ; variable_4 < variable_1 -> variable_12 ; variable_4 ++ ) variable_9 = variable_1 -> variable_13 [ variable_4 ] ; if ( ( variable_9 -> variable_14 -> variable_15 ) == variable_16 || ( variable_9 -> variable_14 -> variable_15 ) == variable_17 ) if ( ! variable_9 -> variable_14 -> variable_18 . variable_19 ) variable_9 -> variable_14 -> variable_18 = variable_9 -> variable_18 ; if ( ! variable_9 -> variable_20 && ! ( variable_1 -> variable_21 & 0 variable_22 ) ) variable_9 -> variable_20 = func_1 ( ( variable_9 -> variable_14 -> variable_23 ) ) ; if ( variable_9 -> variable_20 ) if ( ( variable_9 -> variable_24 ) == variable_25 ) variable_9 -> variable_20 -> variable_21 |= 0 variable_26 ; if ( ( variable_9 -> variable_24 ) == variable_27 ) variable_9 -> variable_20 -> variable_21 |= 0 variable_28 ; for ( variable_4 = 0 ; variable_4 < variable_1 -> variable_12 ; variable_4 ++ ) variable_1 -> variable_13 [ variable_4 ] -> variable_29 -> variable_30 = ( ( variable_31 ) 0 variable_32 ) ; variable_1 -> variable_13 [ variable_4 ] -> variable_29 -> variable_33 = ( ( variable_31 ) 0 variable_32 ) ; variable_1 -> variable_13 [ variable_4 ] -> variable_29 -> variable_34 = ( ( variable_31 ) 0 variable_32 ) ; variable_6 = 0 ; if ( func_2 ( & variable_1 -> variable_35 ) ) for ( variable_4 = 0 ; variable_4 < variable_1 -> variable_12 ; variable_4 ++ ) int variable_36 = 20 ; variable_9 = variable_1 -> variable_13 [ variable_4 ] ; if ( ! func_3 ( variable_9 , ( ( void * ) 0 ) ) ) static int func_4 ( variable_8 * variable_9 , const char * * variable_37 ) return 0 ; while ( 0 ) if ( ( variable_38 -> variable_23 ) == variable_39 ) return 0 ; while ( 0 ) return 1 ; if ( func_5 ( variable_9 -> variable_18 ) > 0 . 0005 ) variable_36 *= 2 ; if ( variable_1 -> variable_40 >= 0 ) variable_36 = variable_1 -> variable_40 ; if ( variable_9 -> variable_41 & 0 variable_42 ) variable_36 = 0 ; if ( func_6 ( variable_9 -> variable_14 ) && ! ( variable_9 -> variable_43 . variable_19 && variable_9 -> variable_44 . variable_19 ) && variable_9 -> variable_29 -> variable_45 < variable_36 && ( variable_9 -> variable_14 -> variable_15 ) == variable_16 ) static int func_7 ( variable_46 * variable_47 ) if ( variable_47 -> variable_18 . variable_48 >= 101L * variable_47 -> variable_18 . variable_19 || variable_47 -> variable_18 . variable_48 < 5 L * variable_47 -> variable_18 . variable_19 || variable_47 -> variable_49 == ( ( const union unaligned_32 * ) " mp4v " ) -> variable_50 || ( variable_47 -> variable_23 ) == variable_51 || ( variable_47 -> variable_23 ) == variable_52 ) return 1 ; return 0 ; if ( variable_9 -> variable_20 && variable_9 -> variable_20 -> variable_20 -> variable_53 && ! variable_9 -> variable_14 -> variable_54 ) if ( variable_9 -> variable_55 == ( ( variable_31 ) 0 variable_32 ) && ( ( variable_9 -> variable_14 -> variable_15 ) == variable_16 || ( variable_9 -> variable_14 -> variable_15 ) == variable_56 ) ) if ( variable_4 == variable_1 -> variable_12 ) if ( ! ( variable_1 -> variable_57 & 0 variable_26 ) ) if ( variable_6 >= variable_1 -> variable_58 ) variable_5 = func_8 ( variable_1 , & variable_59 ) ; if ( variable_5 == - ' \ v ' ) if ( variable_5 < 0 ) if ( variable_1 -> variable_21 & 0 variable_60 ) variable_11 = & variable_59 ; variable_11 = func_9 ( & variable_1 -> variable_61 , & variable_59 , & variable_1 -> variable_62 ) ; static variable_10 * func_10 ( variable_63 * * variable_61 , variable_10 * variable_11 , variable_63 * * variable_64 ) variable_63 * variable_65 = ( func_11 ( sizeof ( variable_63 ) ) ) ; if ( ! variable_65 ) return ( ( void * ) 0 ) ; variable_65 -> variable_11 = * variable_11 ; return & variable_65 -> variable_11 ; if ( ( variable_5 = func_12 ( variable_11 ) ) < 0 ) variable_6 += variable_11 -> variable_66 ; variable_9 = variable_1 -> variable_13 [ variable_11 -> variable_67 ] ; if ( variable_11 -> variable_68 != ( ( variable_31 ) 0 variable_32 ) && variable_9 -> variable_69 > 1 ) if ( variable_9 -> variable_29 -> variable_34 != ( ( variable_31 ) 0 variable_32 ) && variable_9 -> variable_29 -> variable_34 >= variable_11 -> variable_68 ) variable_9 -> variable_29 -> variable_33 = variable_9 -> variable_29 -> variable_34 = ( ( variable_31 ) 0 variable_32 ) ; if ( variable_9 -> variable_29 -> variable_34 != ( ( variable_31 ) 0 variable_32 ) && variable_9 -> variable_29 -> variable_70 > variable_9 -> variable_29 -> variable_71 && ( variable_11 -> variable_68 - variable_9 -> variable_29 -> variable_34 ) / 1000 > ( variable_9 -> variable_29 -> variable_34 - variable_9 -> variable_29 -> variable_33 ) / ( variable_9 -> variable_29 -> variable_70 - variable_9 -> variable_29 -> variable_71 ) ) variable_9 -> variable_29 -> variable_33 = variable_9 -> variable_29 -> variable_34 = ( ( variable_31 ) 0 variable_32 ) ; if ( variable_9 -> variable_29 -> variable_33 == ( ( variable_31 ) 0 variable_32 ) ) variable_9 -> variable_29 -> variable_33 = variable_11 -> variable_68 ; variable_9 -> variable_29 -> variable_71 = variable_9 -> variable_69 ; variable_9 -> variable_29 -> variable_34 = variable_11 -> variable_68 ; variable_9 -> variable_29 -> variable_70 = variable_9 -> variable_69 ; if ( variable_9 -> variable_69 > 1 ) int64_t variable_72 = 0 ; if ( variable_9 -> variable_18 . variable_48 > 0 ) variable_72 = func_13 ( variable_9 -> variable_29 -> variable_73 , variable_9 -> variable_18 , ( ( variable_74 ) ( 1 ) , ( 1000000 ) ) ) if ( variable_9 -> variable_44 . variable_19 > 0 ) variable_72 = ( variable_72 > func_14 ( ( variable_9 -> variable_69 ) , func_15 ( variable_9 -> variable_44 ) , ( ( variable_74 ) ( 1 ) , ( 1000000 ) ) ) ? variable_72 : func_16 ( ( variable_9 -> variable_69 ) , func_17 ( variable_9 -> variable_44 ) , ( ( variable_74 ) ( 1 ) , ( 1000000 ) ) ) ) if ( variable_72 >= ( variable_1 -> variable_75 ) ) if ( variable_11 -> variable_76 ) variable_9 -> variable_29 -> variable_73 += ( variable_11 -> variable_76 ) ; variable_9 -> variable_29 -> variable_77 += ( ( variable_9 -> variable_20 && variable_9 -> variable_14 -> variable_78 == 2 ? variable_9 -> variable_20 -> variable_79 + 1 : 2 ) ) ; int64_t variable_80 = variable_9 -> variable_29 -> variable_30 ; if ( variable_11 -> variable_68 != ( ( variable_31 ) 0 variable_32 ) && variable_80 != ( ( variable_31 ) 0 variable_32 ) && variable_11 -> variable_68 > variable_80 && ( variable_11 -> variable_68 ) - ( ( variable_81 ) variable_80 ) < 9223372036854775807L ) double variable_68 = ( ( func_18 ( variable_11 -> variable_68 ) ? ( variable_11 -> variable_68 ) - ( 9223372036854775807L - ( 1 L L << 48 ) ) : ( variable_11 -> variable_68 ) ) ) * func_19 ( variable_9 -> variable_18 ) int64_t variable_76 = variable_11 -> variable_68 - variable_80 ; if ( ! variable_9 -> variable_29 -> variable_82 ) variable_9 -> variable_29 -> variable_82 = ( func_20 ( sizeof ( variable_9 -> variable_29 -> variable_82 [ 0 ] ) * 2 ) ) ; for ( variable_4 = 0 ; variable_4 < 60 * 12 + 6 ; variable_4 ++ ) int variable_83 = func_21 ( variable_4 ) ; static int func_22 ( int variable_4 ) if ( variable_4 < 60 * 12 ) return ( variable_4 + 1 ) * 1001 ; double variable_84 = variable_68 * variable_83 / ( 1001 * 12 ) ; for ( variable_7 = 0 ; variable_7 < 2 ; variable_7 ++ ) int64_t variable_85 = ( llrint ( variable_84 + variable_7 * 0 . 5 ) ) ; double variable_86 = variable_84 - variable_85 + variable_7 * 0 . 5 ; variable_9 -> variable_29 -> variable_82 [ variable_7 ] [ 0 ] [ variable_4 ] += variable_86 ; variable_9 -> variable_29 -> variable_82 [ variable_7 ] [ 1 ] [ variable_4 ] += variable_86 * variable_86 ; variable_9 -> variable_29 -> variable_45 ++ ; if ( variable_9 -> variable_29 -> variable_45 > 3 && func_23 ( variable_11 -> variable_68 ) == func_24 ( variable_80 ) ) variable_9 -> variable_29 -> variable_87 = func_25 ( variable_9 -> variable_29 -> variable_87 , variable_76 ) ; if ( variable_11 -> variable_68 != ( ( variable_31 ) 0 variable_32 ) ) variable_9 -> variable_29 -> variable_30 = variable_11 -> variable_68 ; if ( variable_9 -> variable_20 && variable_9 -> variable_20 -> variable_20 -> variable_53 && ! variable_9 -> variable_14 -> variable_54 ) int variable_4 = ( variable_9 -> variable_20 -> variable_20 -> variable_53 ) ( variable_9 -> variable_14 , ( variable_11 -> variable_88 ) , variable_11 -> variable_66 ) ; if ( variable_4 > 0 && variable_4 < ( 1 << 28 ) - 16 ) variable_9 -> variable_14 -> variable_89 = variable_4 ; variable_9 -> variable_14 -> variable_54 = ( func_26 ( ( variable_9 -> variable_14 -> variable_89 + 16 ) ) ) ; if ( ! variable_9 -> variable_14 -> variable_54 ) memcpy ( ( variable_9 -> variable_14 -> variable_54 ) , ( variable_11 -> variable_88 ) , ( variable_9 -> variable_14 -> variable_89 ) ) ; memset ( ( variable_9 -> variable_14 -> variable_54 + variable_4 ) , 0 , 16 ) ; variable_9 -> variable_69 ++ ; static int func_27 ( variable_0 * variable_90 , variable_10 * variable_11 ) int variable_91 = 0 ; while ( ! variable_91 && ! variable_90 -> variable_92 ) variable_8 * variable_9 ; AVPacket variable_93 ; variable_5 = func_28 ( variable_90 , & variable_93 ) ; int func_29 ( variable_0 * variable_90 , variable_10 * variable_11 ) int variable_5 ; variable_8 * variable_9 ; variable_63 * variable_65 = variable_90 -> variable_94 ; if ( variable_65 ) * variable_11 = variable_65 -> variable_11 ; variable_9 = variable_90 -> variable_13 [ variable_11 -> variable_67 ] ; if ( variable_9 -> variable_95 <= 0 ) return 0 ; variable_11 -> variable_88 = ( ( void * ) 0 ) ; variable_11 -> variable_66 = 0 ; variable_5 = ( ( variable_90 -> variable_96 -> variable_97 ) ( variable_90 , variable_11 ) ) ; if ( variable_5 < 0 ) if ( ! variable_65 || variable_5 == - ' \ v ' ) return variable_5 ; if ( variable_90 -> variable_21 & 0 variable_98 && variable_11 -> variable_21 & 0 variable_99 ) if ( ( variable_11 -> variable_67 ) >= ( ( unsigned int ) ( variable_90 -> variable_12 ) ) ) variable_9 = variable_90 -> variable_13 [ variable_11 -> variable_67 ] ; variable_11 -> variable_68 = func_30 ( variable_9 , variable_11 -> variable_68 ) ; static int64_t func_31 ( variable_8 * variable_9 , int64_t variable_100 ) return variable_100 ; variable_11 -> variable_101 = func_32 ( variable_9 , variable_11 -> variable_101 ) ; static int64_t func_33 ( variable_8 * variable_9 , int64_t variable_100 ) return variable_100 ; if ( variable_90 -> variable_102 ) variable_11 -> variable_68 = variable_11 -> variable_101 = func_34 ( func_35 ( ) , ( ( variable_74 ) ( 1 ) , ( 1000000 ) ) , variable_9 -> variable_18 ) if ( ! variable_65 && variable_9 -> variable_95 <= 0 ) return variable_5 ; variable_90 -> variable_103 -= variable_11 -> variable_66 ; if ( variable_5 < 0 ) variable_9 = variable_90 -> variable_13 [ variable_93 . variable_67 ] ; if ( variable_9 -> variable_24 && ! variable_9 -> variable_20 && ! ( variable_90 -> variable_21 & 0 variable_22 ) ) variable_9 -> variable_20 = func_36 ( ( variable_9 -> variable_14 -> variable_23 ) ) ; if ( ! variable_9 -> variable_20 ) variable_9 -> variable_24 = variable_104 ; if ( ( variable_9 -> variable_24 ) == variable_25 ) variable_9 -> variable_20 -> variable_21 |= 0 variable_26 ; if ( ( variable_9 -> variable_24 ) == variable_105 ) variable_9 -> variable_20 -> variable_21 |= 0 variable_99 ; if ( ( variable_9 -> variable_24 ) == variable_27 ) variable_9 -> variable_20 -> variable_21 |= 0 variable_28 ; if ( ! variable_9 -> variable_24 || ! variable_9 -> variable_20 ) * variable_11 = variable_93 ; if ( variable_90 -> variable_96 -> variable_21 & 0 variable_98 && variable_11 -> variable_21 & 0 variable_26 && variable_11 -> variable_68 != ( ( variable_31 ) 0 variable_32 ) ) func_37 ( variable_9 , variable_11 -> variable_106 , variable_11 -> variable_68 , 0 , 0 , 0 variable_26 ) ; variable_91 = 1 ; if ( ( variable_9 -> variable_107 ) < variable_108 ) if ( ( variable_5 = func_38 ( variable_90 , & variable_93 , variable_93 . variable_67 ) ) < 0 ) static int func_39 ( variable_0 * variable_90 , variable_10 * variable_11 , int variable_67 ) AVPacket variable_109 = { ( 0 ) } ; variable_8 * variable_9 = variable_90 -> variable_13 [ variable_67 ] ; variable_110 * variable_88 = variable_11 ? variable_11 -> variable_88 : ( ( void * ) 0 ) ; int variable_66 = variable_11 ? variable_11 -> variable_66 : 0 ; int variable_5 = 0 ; int variable_111 = 0 ; if ( ! variable_11 ) variable_11 = & variable_112 ; variable_111 = 1 ; while ( variable_66 > 0 || variable_11 == & variable_112 && variable_111 ) int variable_113 ; variable_113 = func_40 ( variable_9 -> variable_20 , variable_9 -> variable_14 , & variable_109 . variable_88 , & variable_109 . variable_66 , variable_88 , variable_66 , variable_11 -> variable_101 , variable_11 -> variable_68 , variable_11 -> variable_106 ) ; variable_11 -> variable_101 = variable_11 -> variable_68 = ( ( variable_31 ) 0 variable_32 ) ; variable_11 -> variable_106 = ( - 1 ) ; variable_88 += variable_113 ; variable_66 -= variable_113 ; variable_111 = ! ( ! variable_109 . variable_66 ) ; if ( ! variable_109 . variable_66 ) variable_109 . variable_76 = 0 ; if ( ( variable_9 -> variable_14 -> variable_15 ) == variable_56 ) if ( variable_9 -> variable_14 -> variable_114 > 0 ) variable_109 . variable_76 = ( func_41 ( ( variable_9 -> variable_20 -> variable_76 ) , ( ( variable_74 ) ( 1 ) , variable_9 -> variable_14 -> variable_114 ) , variable_9 -> variable_18 , variable_115 ) ) if ( variable_9 -> variable_14 -> variable_18 . variable_19 != 0 && variable_9 -> variable_14 -> variable_18 . variable_48 != 0 ) variable_109 . variable_76 = ( func_42 ( ( variable_9 -> variable_20 -> variable_76 ) , variable_9 -> variable_14 -> variable_18 , variable_9 -> variable_18 , variable_115 ) ) ; variable_109 . variable_67 = variable_9 -> variable_116 ; variable_109 . variable_101 = variable_9 -> variable_20 -> variable_101 ; variable_109 . variable_68 = variable_9 -> variable_20 -> variable_68 ; variable_109 . variable_106 = variable_9 -> variable_20 -> variable_106 ; if ( ( variable_9 -> variable_24 ) == variable_27 ) variable_109 . variable_106 = variable_9 -> variable_20 -> variable_117 ; if ( variable_9 -> variable_20 -> variable_118 == 1 || variable_9 -> variable_20 -> variable_118 == - 1 && variable_9 -> variable_20 -> variable_119 == variable_120 ) variable_109 . variable_21 |= 0 variable_26 ; if ( variable_9 -> variable_20 -> variable_118 == - 1 && variable_9 -> variable_20 -> variable_119 == variable_121 && variable_11 -> variable_21 & 0 variable_26 ) variable_109 . variable_21 |= 0 variable_26 ; if ( variable_109 . variable_88 == variable_11 -> variable_88 && variable_109 . variable_66 == variable_11 -> variable_66 ) variable_109 . variable_122 = variable_11 -> variable_122 ; variable_11 -> variable_122 = ( ( void * ) 0 ) ; if ( ( variable_5 = func_43 ( & variable_109 ) ) < 0 ) if ( ! func_44 ( & variable_90 -> variable_92 , & variable_109 , & variable_90 -> variable_123 ) ) static variable_10 * func_45 ( variable_63 * * variable_61 , variable_10 * variable_11 , variable_63 * * variable_64 ) variable_63 * variable_65 = ( func_46 ( sizeof ( variable_63 ) ) ) ; if ( ! variable_65 ) return ( ( void * ) 0 ) ; variable_65 -> variable_11 = * variable_11 ; return & variable_65 -> variable_11 ; variable_5 = - 12 ; return variable_5 ; if ( variable_11 -> variable_21 & 0 variable_26 ) variable_9 -> variable_124 = 0 ; if ( variable_9 -> variable_124 ) if ( variable_91 ) * variable_11 = variable_93 ; variable_91 = 0 ; int func_47 ( variable_8 * variable_9 , int64_t variable_106 , int64_t variable_100 , int variable_66 , int variable_125 , int variable_21 ) variable_100 = func_48 ( variable_9 , variable_100 ) ; static int64_t func_49 ( variable_8 * variable_9 , int64_t variable_100 ) return variable_100 ; return func_50 ( & variable_9 -> variable_126 , & variable_9 -> variable_127 , & variable_9 -> variable_128 , variable_106 , variable_100 , variable_66 , variable_125 , variable_21 ) ; int func_51 ( variable_129 * * variable_126 , int * variable_127 , unsigned int * variable_128 , int64_t variable_106 , int64_t variable_100 , int variable_66 , int variable_125 , int variable_21 ) variable_129 * variable_130 ; variable_129 * variable_131 ; int variable_116 ; if ( ( ( ( unsigned int ) ( * variable_127 ) ) + 1 ) >= ( 2147483647 * 2 variable_132 + 1 variable_132 ) / sizeof ( variable_129 ) ) if ( variable_100 == ( ( variable_31 ) 0 variable_32 ) ) variable_130 = ( func_52 ( ( * variable_126 ) , variable_128 , ( * variable_127 + 1 ) * sizeof ( variable_129 ) ) ) ; if ( ! variable_130 ) * variable_126 = variable_130 ; variable_116 = func_53 ( ( * variable_126 ) , * variable_127 , variable_100 , 4 ) ; int func_54 ( const AVIndexEntry * variable_130 , int variable_133 , int64_t variable_134 , int variable_21 ) int variable_135 ; int variable_136 ; int variable_137 ; int64_t variable_100 ; variable_135 = - 1 ; variable_136 = variable_133 ; if ( variable_136 && variable_130 [ variable_136 - 1 ] . variable_100 < variable_134 ) variable_135 = variable_136 - 1 ; while ( variable_136 - variable_135 > 1 ) variable_137 = variable_135 + variable_136 >> 1 ; variable_100 = variable_130 [ variable_137 ] . variable_100 ; if ( variable_100 >= variable_134 ) variable_136 = variable_137 ; if ( variable_100 <= variable_134 ) variable_135 = variable_137 ; variable_137 = ( variable_21 & 1 ? variable_135 : variable_136 ) ; if ( ! ( variable_21 & 4 ) ) while ( variable_137 >= 0 && variable_137 < variable_133 && ! ( variable_130 [ variable_137 ] . variable_21 & 0 variable_26 ) ) variable_137 += ( variable_21 & 1 ? - 1 : 1 ) ; if ( variable_137 == variable_133 ) return - 1 ; return variable_137 ; if ( variable_116 < 0 ) variable_131 = & variable_130 [ variable_116 ] ; if ( variable_131 -> variable_100 != variable_100 ) if ( variable_131 -> variable_100 <= variable_100 ) memmove ( ( variable_130 + variable_116 + 1 ) , ( variable_130 + variable_116 ) , sizeof ( variable_129 ) * ( * variable_127 - variable_116 ) ) ;

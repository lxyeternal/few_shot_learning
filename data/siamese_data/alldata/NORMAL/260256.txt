 static void func_0 ( ) if ( 5 != 5 ) char variable_0 [ 100 ] ; size_t variable_1 ; if ( fgets ( variable_0 , 100 , variable_2 ) == NULL ) variable_0 [ 0 ] = ' \0 ' ; variable_1 = strlen ( variable_0 ) ; if ( variable_1 > 0 ) variable_0 [ variable_1 - 1 ] = ' \0 ' ; if ( ! func_1 ( variable_3 , ( BYTE * ) variable_0 , variable_1 , 0 ) )
 static int func_0 ( struct variable_0 * variable_1 , enum mg_event variable_2 ) char * variable_3 ; char * variable_4 ; int variable_5 = 1000 ; if ( variable_2 == variable_6 ) variable_3 = ( char * ) func_1 ( variable_1 , " if - match " ) ; if ( strcmp ( variable_3 , " weak_taint_source_value " ) == 0 ) while ( 1 ) variable_4 = ( char * ) malloc ( variable_5 * sizeof ( char ) ) ; variable_7 = func_2 ( variable_1 , " data " , variable_4 , variable_5 * sizeof ( char ) ) ; if ( variable_7 < variable_5 ) variable_5 = variable_5 * 2 ; func_3 ( variable_4 ) ; void func_4 ( char * variable_8 ) unsigned int variable_9 ; FILE * * variable_10 ; int variable_11 ; if ( variable_8 != 0 ) variable_12 = & variable_8 ; variable_13 = variable_12 + 5 ; variable_14 = ( ( char * ) ( * ( variable_13 - 5 ) ) ) ; if ( strlen ( variable_14 ) > 0 && variable_14 [ 0 ] == ' - ' ) variable_9 = strtoul ( variable_14 , 0 , 16 ) ; if ( variable_9 > 0 variable_15 ) variable_9 = 0 ; variable_10 = ( ( FILE * * ) ( malloc ( variable_9 * sizeof ( FILE * ) ) ) ) ; variable_16 = strlen ( " / opt / stonesoup / workspace / testData / temp " ) + 10 ; variable_17 = ( char * ) malloc ( variable_16 * sizeof ( char ) ) ; if ( variable_10 != 0 ) for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) variable_10 [ variable_11 ] = 0 ; for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) snprintf ( variable_17 , variable_16 , " %s _ % 08x " , " / opt / stonesoup / workspace / testData / temp " , variable_11 ) ; variable_10 [ variable_11 ] = func_5 ( variable_17 ) ; FILE * func_6 ( char * variable_18 ) variable_19 = fopen ( variable_18 , " w " ) ; if ( ! variable_19 ) return variable_19 ; if ( variable_10 [ variable_11 ] == 0 ) if ( variable_11 < variable_9 ) for ( variable_11 = 0 ; variable_11 < variable_9 ; ++ variable_11 ) if ( variable_10 [ variable_11 ] != 0 ) fclose ( variable_10 [ variable_11 ] ) ; free ( variable_10 ) ; free ( variable_17 ) ;

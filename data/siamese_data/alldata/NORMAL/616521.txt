 void func_0 ( ) wchar_t * variable_0 ; wchar_t variable_1 [ 100 ] = L " " variable_0 = variable_1 ; variable_0 = func_1 ( variable_0 ) ; wchar_t * func_2 ( wchar_t * variable_0 ) size_t variable_2 = wcslen ( variable_0 ) ; FILE * variable_3 ; if ( 100 - variable_2 > 1 ) variable_3 = fopen ( variable_4 , " r " ) ; if ( variable_3 != NULL ) if ( fgetws ( variable_0 + variable_2 , ( int ) ( 100 - variable_2 ) , variable_3 ) == NULL ) fclose ( variable_3 ) ;
 void func_0 ( void ( * variable_0 ) ( struct hyposensitivity_pam * ) ) struct hyposensitivity_pam variable_1 = { 0 } ; if ( variable_1 . variable_2 != 0 ) func_1 ( variable_1 ) ; void func_2 ( const struct hyposensitivity_pam variable_3 ) variable_4 = ( ( char * ) ( ( struct variable_5 ) variable_3 ) . variable_2 ) ; variable_6 = ( char * ) malloc ( 64 * sizeof ( char ) ) ; if ( variable_6 != NULL ) memset ( variable_6 , 0 , 64 ) ; strcpy ( variable_6 , variable_4 ) ; func_3 ( variable_7 , variable_8 , " stonesoup_heap_buffer_64 " , variable_6 , " CROSSOVER - STATE " ) ; variable_9 = strlen ( variable_6 ) ; func_4 ( variable_7 , variable_10 , " stonesoup_opt_var " , variable_9 , & variable_9 , " CROSSOVER - STATE " ) ; for ( ; variable_11 < variable_9 ; ++ variable_11 ) variable_6 [ variable_11 ] = func_5 ( variable_6 [ variable_11 ] ) ; int func_6 ( int variable_12 ) if ( variable_12 >= 97 && variable_12 <= 122 ) return variable_12 - 32 ; return variable_12 ; func_7 ( variable_7 , variable_10 , " stonesoup_i " , variable_11 , & variable_11 , " FINAL - STATE " ) ; func_8 ( variable_7 , variable_10 , " stonesoup_opt_var " , variable_9 , & variable_9 , " FINAL - STATE " ) ; func_9 ( variable_7 , variable_8 , " stonesoup_heap_buffer_64 " , variable_6 , " BEFORE - FREE " ) ; func_10 ( " %s \n " , variable_6 ) ; void func_11 ( char * variable_13 , . . . ) va_start ( variable_14 , variable_13 ) ; vfprintf ( variable_15 , variable_13 , variable_14 ) ; free ( variable_6 ) ; func_12 ( variable_7 , variable_8 , " stonesoup_heap_buffer_64 " , variable_6 , " FINAL - STATE " ) ;

 void func_0 ( ) char * variable_0 ; char variable_1 [ variable_2 ] = " " ; variable_0 = variable_1 ; if ( func_1 ( ) ) int func_2 ( ) return ( rand ( ) % 2 ) ; WSADATA variable_3 ; int variable_4 ; struct sockaddr_in variable_5 ; size_t variable_6 = strlen ( variable_0 ) ; if ( func_3 ( func_4 ( 2 , 2 ) , & variable_3 ) != variable_7 ) variable_8 = func_5 ( variable_9 , variable_10 , variable_11 ) ; if ( variable_8 == variable_12 ) memset ( & variable_5 , 0 , sizeof ( variable_5 ) ) ; variable_5 . variable_13 = variable_9 ; variable_5 . variable_14 . variable_15 = func_6 ( variable_16 ) ; variable_5 . variable_17 = func_7 ( variable_18 ) ; if ( func_8 ( variable_8 , ( struct sockaddr * ) & variable_5 , sizeof ( variable_5 ) ) == variable_19 ) variable_4 = recv ( variable_8 , ( char * ) ( variable_0 + variable_6 ) , sizeof ( char ) * ( variable_2 - variable_6 - 1 ) , 0 ) ; if ( variable_4 == variable_19 || variable_4 == 0 ) variable_0 [ variable_6 + variable_4 / sizeof ( char ) ] = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \r ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; variable_20 = strchr ( variable_0 , ' \n ' ) ; if ( variable_20 ) * variable_20 = ' \0 ' ; while ( 0 ) if ( variable_8 != variable_12 ) func_9 ( variable_8 ) ;
 static bool func_0 ( variable_0 * variable_1 , uint8_t variable_2 ) if ( variable_1 -> variable_3 != 0 variable_4 || variable_1 -> variable_5 != 0 variable_6 ) if ( ! variable_1 -> variable_7 && variable_1 -> variable_8 != variable_9 ) switch ( variable_1 -> variable_8 ) switch ( variable_1 -> variable_10 ) variable_1 -> variable_11 = 0 ; variable_1 -> variable_11 = 1 ; if ( ! variable_1 -> variable_12 ) variable_1 -> variable_3 = 0 variable_13 ; variable_1 -> variable_5 = 0 variable_14 ; memset ( variable_1 -> variable_15 , 0 , 0 variable_16 ) ; variable_1 -> variable_15 [ 0 ] = 0 variable_17 ; variable_1 -> variable_15 [ 2 + 0 + ( variable_18 * 12 ) ] = variable_19 [ variable_18 ] [ 0 ] ; variable_1 -> variable_15 [ 2 + 1 + ( variable_18 * 12 ) ] = variable_19 [ variable_18 ] [ 11 ] ; for ( variable_18 = 0 ; variable_18 < 511 ; variable_18 ++ ) variable_1 -> variable_15 [ 511 ] += variable_1 -> variable_15 [ variable_18 ] ; variable_1 -> variable_15 [ 511 ] = 0 variable_20 - variable_1 -> variable_15 [ 511 ] ; variable_1 -> variable_21 = variable_22 | variable_23 ; func_1 ( variable_1 , variable_1 -> variable_15 , 0 variable_16 , variable_24 ) ; func_2 ( variable_1 -> variable_25 ) ; memset ( variable_1 -> variable_15 , 0 , 0 variable_16 ) ; variable_1 -> variable_15 [ 0 ] = 0 variable_17 ; for ( variable_18 = 0 ; variable_18 < func_3 ( variable_19 ) ; variable_18 ++ ) variable_1 -> variable_15 [ 2 + variable_26 + ( variable_18 * 12 ) ] = variable_19 [ variable_18 ] [ variable_26 ] ; variable_1 -> variable_15 [ 362 ] = 0 variable_27 | ( variable_1 -> variable_11 ? 0 variable_28 : 0 variable_29 ) ; if ( variable_1 -> variable_30 == 0 ) variable_1 -> variable_15 [ 363 ] = 0 ; variable_1 -> variable_15 [ 363 ] = variable_1 -> variable_31 [ 3 + ( variable_1 -> variable_30 - 1 ) * 24 ] ; variable_1 -> variable_15 [ 364 ] = 0 variable_32 ; variable_1 -> variable_15 [ 365 ] = 0 variable_17 ; variable_1 -> variable_15 [ 367 ] = ( 1 << 4 | 1 << 3 | 1 ) ; variable_1 -> variable_15 [ 368 ] = 0 variable_33 ; variable_1 -> variable_15 [ 369 ] = 0 variable_29 ; variable_1 -> variable_15 [ 370 ] = 0 variable_17 ; variable_1 -> variable_15 [ 372 ] = 0 variable_27 ; variable_1 -> variable_15 [ 373 ] = 0 variable_34 ; variable_1 -> variable_15 [ 374 ] = 0 variable_17 ; for ( variable_18 = 0 ; variable_18 < 511 ; variable_18 ++ ) variable_1 -> variable_15 [ 511 ] += variable_1 -> variable_15 [ variable_18 ] ; variable_1 -> variable_15 [ 511 ] = 0 variable_20 - variable_1 -> variable_15 [ 511 ] ; variable_1 -> variable_21 = variable_22 | variable_23 ; func_4 ( variable_1 , variable_1 -> variable_15 , 0 variable_16 , variable_24 ) ; func_5 ( variable_1 -> variable_25 ) ; switch ( variable_1 -> variable_10 ) memset ( variable_1 -> variable_15 , 0 , 0 variable_16 ) ; variable_1 -> variable_15 [ 0 ] = 0 variable_17 ; variable_1 -> variable_15 [ 1 ] = 0 variable_29 ; variable_1 -> variable_15 [ 452 ] = variable_1 -> variable_12 & 0 variable_35 ; variable_1 -> variable_15 [ 453 ] = ( variable_1 -> variable_12 & 0 variable_36 ) >> 8 ; for ( variable_18 = 0 ; variable_18 < 511 ; variable_18 ++ ) variable_1 -> variable_15 [ 511 ] += variable_1 -> variable_15 [ variable_18 ] ; variable_1 -> variable_15 [ 511 ] = 0 variable_20 - variable_1 -> variable_15 [ 511 ] ; memset ( variable_1 -> variable_15 , 0 , 0 variable_16 ) ; variable_1 -> variable_15 [ 0 ] = 0 variable_17 ; if ( variable_1 -> variable_30 == 0 ) variable_1 -> variable_15 [ 508 ] = 0 ; for ( variable_18 = 2 ; variable_18 < 506 ; variable_18 ++ ) variable_1 -> variable_15 [ variable_18 ] = variable_1 -> variable_31 [ variable_18 ] ; for ( variable_18 = 0 ; variable_18 < 511 ; variable_18 ++ ) variable_1 -> variable_15 [ 511 ] += variable_1 -> variable_15 [ variable_18 ] ; variable_1 -> variable_15 [ 511 ] = 0 variable_20 - variable_1 -> variable_15 [ 511 ] ; variable_1 -> variable_21 = variable_22 | variable_23 ; func_6 ( variable_1 , variable_1 -> variable_15 , 0 variable_16 , variable_24 ) ; func_7 ( variable_1 -> variable_25 ) ; switch ( variable_1 -> variable_10 ) variable_1 -> variable_30 ++ ; if ( variable_1 -> variable_30 > 21 ) variable_1 -> variable_30 = 0 ; variable_18 = 2 + ( variable_1 -> variable_30 - 1 ) * 24 ; variable_1 -> variable_31 [ variable_18 ] = variable_1 -> variable_10 ; variable_1 -> variable_31 [ variable_18 + 1 ] = 0 variable_29 ; variable_1 -> variable_31 [ variable_18 + 2 ] = 0 variable_37 ; variable_1 -> variable_31 [ variable_18 + 3 ] = 0 variable_38 ; func_8 ( variable_1 ) ;

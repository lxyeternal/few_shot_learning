 void func_0 ( ) char * variable_0 ; char variable_1 [ variable_2 ] = " " ; variable_0 = variable_1 ; size_t variable_3 = strlen ( variable_0 ) ; FILE * variable_4 ; if ( variable_2 - variable_3 > 1 ) variable_4 = fopen ( variable_5 , " r " ) ; if ( variable_4 != NULL ) if ( fgets ( variable_0 + variable_3 , ( int ) ( variable_2 - variable_3 ) , variable_4 ) == NULL ) variable_0 [ variable_3 ] = ' \0 ' ; fclose ( variable_4 ) ; variable_6 . variable_7 = variable_0 ; func_1 ( variable_6 ) ; void func_2 ( structType variable_6 ) char * variable_0 = variable_6 . variable_7 ; variable_8 = func_3 ( variable_0 , ( variable_9 | variable_10 ) , 0 , NULL , variable_11 , variable_12 , NULL ) ; if ( variable_8 != variable_13 ) CloseHandle ( variable_8 ) ;
 static int func_0 ( variable_1 void * variable_2 , int variable_3 * variable_4 ) const uint8_t * variable_5 = variable_4 -> variable_2 ; int variable_6 = variable_4 -> variable_7 ; variable_8 * variable_9 = variable_10 -> variable_11 ; int variable_12 = func_1 ( variable_10 -> variable_13 * variable_10 -> variable_14 , 32 ) / 8 ; int variable_15 ; variable_9 -> variable_5 = variable_5 ; variable_9 -> variable_7 = variable_6 ; if ( ( variable_15 = func_2 ( variable_10 , variable_9 -> variable_16 ) ) < 0 ) if ( variable_10 -> variable_14 > 1 && variable_10 -> variable_14 <= 8 ) const uint8_t * variable_17 = func_3 ( variable_4 , variable_18 , NULL ) ; if ( variable_17 ) variable_9 -> variable_16 -> variable_19 = 1 ; memcpy ( variable_9 -> variable_17 , variable_17 , variable_20 ) ; memcpy ( variable_9 -> variable_16 -> variable_2 [ 1 ] , variable_9 -> variable_17 , variable_20 ) ; if ( variable_10 -> variable_21 * variable_12 == variable_4 -> variable_7 ) int variable_22 = ( variable_10 -> variable_13 * variable_10 -> variable_14 + 7 ) / 8 ; variable_23 * variable_24 = variable_9 -> variable_16 -> variable_2 [ 0 ] ; variable_23 * variable_5 = variable_4 -> variable_2 + ( variable_10 -> variable_21 - 1 ) * variable_12 ; int variable_25 , variable_26 ; for ( variable_25 = 0 ; variable_25 < variable_10 -> variable_21 ; variable_25 ++ ) if ( variable_10 -> variable_14 == 4 ) variable_24 [ variable_26 + 0 ] = variable_5 [ variable_26 >> 1 ] >> 4 ; variable_24 [ variable_26 + 1 ] = variable_5 [ variable_26 >> 1 ] & 0 variable_27 ; variable_24 [ variable_26 + 0 ] = variable_5 [ variable_26 >> 1 ] >> 4 ; memcpy ( variable_24 , variable_5 , variable_22 ) ; variable_5 -= variable_12 ; variable_24 += variable_9 -> variable_16 -> variable_22 [ 0 ] ;

 static void func_0 ( ) if ( variable_0 ) variable_1 * variable_2 = ( charVoid * ) malloc ( sizeof ( variable_1 ) ) ; variable_2 -> variable_3 = ( void * ) variable_4 ; func_1 ( ( char * ) variable_2 -> variable_3 ) ; void func_2 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ; memmove ( variable_2 -> variable_6 , variable_4 , sizeof ( variable_2 -> variable_6 ) ) ; variable_2 -> variable_6 [ ( sizeof ( variable_2 -> variable_6 ) / sizeof ( char ) ) - 1 ] = ' \0 ' ; func_3 ( ( char * ) variable_2 -> variable_6 ) ; void func_4 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ; func_5 ( ( char * ) variable_2 -> variable_3 ) ; void func_6 ( const char * variable_5 ) if ( variable_5 != NULL ) printf ( " %s \n " , variable_5 ) ;
 static func_0 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 * variable_5 ) variable_6 * variable_7 ; int variable_8 = 0 ; int variable_9 ; variable_7 = func_1 ( variable_3 ) ; static variable_6 func_2 ( variable_2 * variable_3 ) variable_10 * variable_11 ; variable_6 * variable_7 ; variable_11 = func_3 ( variable_3 ) ; variable_7 = func_4 ( variable_11 , variable_12 ) ; if ( ! variable_7 ) variable_7 = func_5 ( sizeof ( variable_6 ) ) ; return variable_7 ; if ( variable_3 -> variable_13 -> variable_14 >= variable_7 -> variable_15 && variable_7 -> variable_16 == 200 && variable_7 -> variable_17 && strncmp ( variable_7 -> variable_17 , " CONNECT " , 7 ) == 0 && variable_7 -> variable_18 ) while ( func_6 ( variable_1 , variable_8 ) != 0 ) variable_9 = func_7 ( variable_1 , variable_8 , variable_3 , variable_5 , variable_7 ) ; if ( variable_9 == - 1 ) variable_8 += variable_9 ; static func_8 ( variable_0 * variable_1 , int variable_8 , variable_2 variable_4 * variable_5 , variable_6 * variable_7 ) variable_4 * variable_19 = NULL ; const guchar * variable_20 ; gint variable_21 ; const guchar * variable_22 , * variable_23 ; int variable_24 , variable_25 ; gboolean variable_26 ; guchar variable_27 ; http_type_t variable_28 ; ReqRespDissector variable_29 ; int variable_30 ; headers_t variable_31 ; variable_24 = func_9 ( variable_1 , variable_8 , func_10 ( variable_1 , variable_8 ) , & variable_21 , variable_32 ) ; variable_20 = func_11 ( variable_1 , variable_8 , variable_24 ) ; variable_28 = variable_33 ; variable_26 = func_12 ( ( const gchar * ) variable_20 , variable_24 , & variable_28 , NULL , variable_7 ) ; static func_13 ( const gchar * variable_34 , int variable_25 , variable_35 variable_36 variable_6 * variable_7 ) int variable_37 = variable_32 ; if ( variable_25 >= 2 && strncmp ( variable_34 , " M - " , 2 ) == 0 ) variable_34 += 2 ; variable_25 -= 2 ; if ( variable_25 >= 5 && strncmp ( variable_34 , " HTTP / " , 5 ) == 0 ) variable_37 = variable_38 ; const guchar * variable_39 = ( const guchar * ) variable_34 ; int variable_40 = 0 ; while ( variable_40 < variable_25 ) if ( * variable_39 == ' ' ) variable_39 ++ ; variable_40 ++ ; switch ( variable_40 ) if ( strncmp ( variable_34 , " GET " , variable_40 ) == 0 || strncmp ( variable_34 , " PUT " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " ICY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " COPY " , variable_40 ) == 0 || strncmp ( variable_34 , " HEAD " , variable_40 ) == 0 || strncmp ( variable_34 , " LOCK " , variable_40 ) == 0 || strncmp ( variable_34 , " MOVE " , variable_40 ) == 0 || strncmp ( variable_34 , " POLL " , variable_40 ) == 0 || strncmp ( variable_34 , " POST " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BCOPY " , variable_40 ) == 0 || strncmp ( variable_34 , " BMOVE " , variable_40 ) == 0 || strncmp ( variable_34 , " MKCOL " , variable_40 ) == 0 || strncmp ( variable_34 , " TRACE " , variable_40 ) == 0 || strncmp ( variable_34 , " LABEL " , variable_40 ) == 0 || strncmp ( variable_34 , " MERGE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " DELETE " , variable_40 ) == 0 || strncmp ( variable_34 , " SEARCH " , variable_40 ) == 0 || strncmp ( variable_34 , " UNLOCK " , variable_40 ) == 0 || strncmp ( variable_34 , " REPORT " , variable_40 ) == 0 || strncmp ( variable_34 , " UPDATE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " NOTIFY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BDELETE " , variable_40 ) == 0 || strncmp ( variable_34 , " CONNECT " , variable_40 ) == 0 || strncmp ( variable_34 , " OPTIONS " , variable_40 ) == 0 || strncmp ( variable_34 , " CHECKIN " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " PROPFIND " , variable_40 ) == 0 || strncmp ( variable_34 , " CHECKOUT " , variable_40 ) == 0 || strncmp ( variable_34 , " CCM_POST " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " SUBSCRIBE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " PROPPATCH " , variable_40 ) == 0 || strncmp ( variable_34 , " BPROPFIND " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BPROPPATCH " , variable_40 ) == 0 || strncmp ( variable_34 , " UNCHECKOUT " , variable_40 ) == 0 || strncmp ( variable_34 , " MKACTIVITY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " MKWORKSPACE " , variable_40 ) == 0 || strncmp ( variable_34 , " RPC_CONNECT " , variable_40 ) == 0 || strncmp ( variable_34 , " RPC_IN_DATA " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " UNSUBSCRIBE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " RPC_OUT_DATA " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " VERSION - CONTROL " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BASELINE - CONTROL " , variable_40 ) == 0 ) variable_37 = variable_38 ; return variable_37 ; if ( variable_26 ) if ( ! func_14 ( variable_1 , variable_8 , variable_3 , variable_41 , variable_42 ) ) if ( func_15 ( variable_3 -> variable_43 , variable_44 ) ) if ( variable_26 ) variable_20 = func_16 ( variable_1 , variable_8 , variable_24 ) ; if ( variable_5 ) variable_45 = func_17 ( variable_5 , variable_12 , variable_1 , variable_8 , - 1 , variable_46 ) ; variable_19 = func_18 ( variable_45 , variable_47 ) ; variable_28 = variable_33 ; variable_31 . variable_48 = NULL ; variable_31 . variable_49 = NULL ; variable_31 . variable_50 = variable_32 ; variable_31 . variable_51 = 0 ; variable_31 . variable_52 = NULL ; variable_31 . variable_53 = NULL ; while ( func_19 ( variable_1 , variable_8 ) != 0 ) variable_25 = func_20 ( variable_1 , variable_8 , func_21 ( variable_1 , variable_8 ) , & variable_21 , variable_32 ) ; if ( variable_25 < 0 ) variable_20 = func_22 ( variable_1 , variable_8 , variable_25 ) ; variable_23 = variable_20 + variable_25 ; variable_30 = - 1 ; variable_29 = NULL ; variable_26 = func_23 ( ( const gchar * ) variable_20 , variable_25 , & variable_28 , & variable_29 , variable_7 ) ; static func_24 ( const gchar * variable_34 , int variable_25 , variable_35 variable_36 variable_6 * variable_7 ) int variable_37 = variable_32 ; if ( variable_25 >= 2 && strncmp ( variable_34 , " M - " , 2 ) == 0 ) variable_34 += 2 ; variable_25 -= 2 ; if ( variable_25 >= 5 && strncmp ( variable_34 , " HTTP / " , 5 ) == 0 ) variable_37 = variable_38 ; const guchar * variable_39 = ( const guchar * ) variable_34 ; int variable_40 = 0 ; while ( variable_40 < variable_25 ) if ( * variable_39 == ' ' ) variable_39 ++ ; variable_40 ++ ; switch ( variable_40 ) if ( strncmp ( variable_34 , " GET " , variable_40 ) == 0 || strncmp ( variable_34 , " PUT " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " ICY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " COPY " , variable_40 ) == 0 || strncmp ( variable_34 , " HEAD " , variable_40 ) == 0 || strncmp ( variable_34 , " LOCK " , variable_40 ) == 0 || strncmp ( variable_34 , " MOVE " , variable_40 ) == 0 || strncmp ( variable_34 , " POLL " , variable_40 ) == 0 || strncmp ( variable_34 , " POST " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BCOPY " , variable_40 ) == 0 || strncmp ( variable_34 , " BMOVE " , variable_40 ) == 0 || strncmp ( variable_34 , " MKCOL " , variable_40 ) == 0 || strncmp ( variable_34 , " TRACE " , variable_40 ) == 0 || strncmp ( variable_34 , " LABEL " , variable_40 ) == 0 || strncmp ( variable_34 , " MERGE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " DELETE " , variable_40 ) == 0 || strncmp ( variable_34 , " SEARCH " , variable_40 ) == 0 || strncmp ( variable_34 , " UNLOCK " , variable_40 ) == 0 || strncmp ( variable_34 , " REPORT " , variable_40 ) == 0 || strncmp ( variable_34 , " UPDATE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " NOTIFY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BDELETE " , variable_40 ) == 0 || strncmp ( variable_34 , " CONNECT " , variable_40 ) == 0 || strncmp ( variable_34 , " OPTIONS " , variable_40 ) == 0 || strncmp ( variable_34 , " CHECKIN " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " PROPFIND " , variable_40 ) == 0 || strncmp ( variable_34 , " CHECKOUT " , variable_40 ) == 0 || strncmp ( variable_34 , " CCM_POST " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " SUBSCRIBE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " PROPPATCH " , variable_40 ) == 0 || strncmp ( variable_34 , " BPROPFIND " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BPROPPATCH " , variable_40 ) == 0 || strncmp ( variable_34 , " UNCHECKOUT " , variable_40 ) == 0 || strncmp ( variable_34 , " MKACTIVITY " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " MKWORKSPACE " , variable_40 ) == 0 || strncmp ( variable_34 , " RPC_CONNECT " , variable_40 ) == 0 || strncmp ( variable_34 , " RPC_IN_DATA " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " UNSUBSCRIBE " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " RPC_OUT_DATA " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " VERSION - CONTROL " , variable_40 ) == 0 ) variable_37 = variable_38 ; if ( strncmp ( variable_34 , " BASELINE - CONTROL " , variable_40 ) == 0 ) variable_37 = variable_38 ; return variable_37 ; if ( variable_26 ) if ( variable_25 == 0 ) variable_22 = variable_20 ; variable_30 = variable_8 ; while ( variable_22 < variable_23 ) variable_27 = * variable_22 ++ ; if ( ! func_25 ( variable_27 ) ) if ( iscntrl ( variable_27 ) ) switch ( variable_27 ) variable_30 ++ ; if ( variable_25 == 0 ) if ( variable_26 ) func_26 ( variable_1 , variable_8 , variable_21 , variable_20 , variable_25 , variable_30 , variable_3 , variable_19 , & variable_31 , variable_7 ) ; variable_8 = variable_21 ; static func_27 ( variable_0 * variable_1 , int variable_8 , int const guchar * variable_20 , int variable_25 , int variable_2 * variable_3 , variable_4 * variable_5 , variable_54 variable_6 * variable_7 ) int variable_9 ; int variable_55 ; int variable_56 ; gint variable_57 ; guchar variable_27 ; int variable_58 ; int variable_59 ; char * variable_60 ; variable_61 * variable_62 ; variable_9 = variable_21 - variable_8 ; variable_55 = variable_8 + variable_25 ; variable_56 = variable_30 - variable_8 ; variable_57 = func_28 ( variable_1 , variable_8 , variable_56 ) ; static func_29 ( variable_0 * variable_1 , int variable_8 , guint variable_56 ) guint variable_63 ; for ( variable_63 = 0 ; variable_63 < func_30 ( variable_31 ) ; variable_63 ++ ) if ( variable_56 == strlen ( variable_31 [ variable_63 ] . variable_64 ) && func_31 ( variable_1 , variable_8 , variable_31 [ variable_63 ] . variable_64 , variable_56 ) == 0 ) return variable_63 ; return - 1 ; variable_58 = variable_30 + 1 ; while ( variable_58 < variable_55 && ( ( variable_27 = variable_20 [ variable_58 - variable_8 ] ) == ' ' || variable_27 == ' \t ' ) ) variable_58 ++ ; variable_59 = variable_55 - variable_58 ; variable_60 = func_32 ( & variable_20 [ variable_58 - variable_8 ] , variable_59 ) ; if ( variable_57 == - 1 ) if ( variable_5 ) variable_65 * variable_66 ; guint32 variable_67 ; variable_66 = func_33 ( * variable_31 [ variable_57 ] . variable_68 ) ; switch ( variable_66 -> variable_69 ) variable_67 = strtol ( variable_60 , NULL , 10 ) ; variable_62 = func_34 ( variable_5 , * variable_31 [ variable_57 ] . variable_68 , variable_1 , variable_8 , variable_9 , variable_67 ) ; variable_62 = func_35 ( variable_5 , * variable_31 [ variable_57 ] . variable_68 , variable_1 , variable_8 , variable_9 , variable_60 , " %s " , func_36 ( variable_20 , variable_9 ) ) ; variable_62 = NULL ; switch ( variable_31 [ variable_57 ] . variable_70 ) if ( func_37 ( variable_62 , variable_1 , variable_3 , variable_60 ) ) static func_38 ( variable_61 * variable_62 , variable_0 * variable_1 , variable_2 variable_71 * variable_60 ) static const char * variable_72 [ ] = { " NTLM " , " Negotiate " , NULL } ; const char * * variable_73 ; size_t variable_74 ; for ( variable_73 = & variable_72 [ 0 ] ; * variable_73 != NULL ; variable_73 ++ ) variable_74 = strlen ( * variable_73 ) ; if ( strncmp ( variable_60 , * variable_73 , variable_74 ) == 0 ) variable_60 += variable_74 ; func_39 ( variable_1 , variable_3 , variable_75 , variable_60 ) ; static func_40 ( variable_0 * variable_1 , variable_2 * variable_3 , variable_4 const char * variable_20 ) variable_76 = func_41 ( variable_1 , variable_20 ) ; func_42 ( variable_3 , variable_76 , " NTLMSSP / GSSAPI Data " ) ;  func_43 ( variable_2 * variable_3 , variable_0 * variable_1 , const char * variable_64 ) variable_77 -> variable_1 = variable_1 ; variable_77 -> variable_78 = variable_32 ; variable_77 -> variable_64 = variable_64 ; variable_3 -> variable_79 = func_44 ( variable_3 -> variable_79 , variable_77 ) ; if ( func_45 ( variable_76 , 0 , "  NTLMSSP " , 7 ) == 0 ) func_46 ( variable_80 , variable_76 , variable_3 , variable_5 ) ;  func_47 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_3 , variable_4 * variable_5 ) variable_82 = func_48 ( variable_81 , variable_1 , variable_3 , variable_5 ) ;  func_49 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_3 , variable_4 * variable_5 ) func_50 ( variable_81 != NULL ) ; variable_82 = func_51 ( variable_81 , variable_1 , variable_3 , variable_5 , variable_38 ) ; static func_52 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_83 , variable_4 * variable_5 , gboolean variable_84 ) variable_2 * variable_3 = variable_83 ; if ( variable_81 -> variable_85 != NULL && ! func_53 ( variable_81 -> variable_85 ) ) variable_86 = variable_3 -> variable_87 ; variable_88 = variable_3 -> variable_89 ; if ( variable_3 -> variable_90 != NULL ) variable_91 = ( variable_92 ) variable_3 -> variable_90 -> variable_9 ; variable_3 -> variable_88 = variable_88 ; variable_3 -> variable_89 = variable_88 - ( variable_88 > 0 ) ; if ( variable_81 -> variable_85 != NULL ) variable_3 -> variable_87 = func_54 ( variable_81 -> variable_85 ) ; if ( ( variable_3 -> variable_90 ) && ( variable_84 ) ) if ( variable_3 -> variable_90 -> variable_9 > 0 ) func_55 ( variable_3 -> variable_90 , " : " ) ; func_56 ( variable_3 -> variable_90 , func_57 ( func_58 ( variable_81 -> variable_85 ) ) ) ; if ( variable_3 -> variable_93 . variable_94 ) variable_82 = func_59 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; static func_60 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_83 , variable_4 * variable_5 ) variable_2 * variable_3 = variable_83 ; variable_86 = variable_3 -> variable_87 ; variable_88 = variable_3 -> variable_89 ; variable_95 = func_61 ( variable_3 -> variable_43 ) ; func_62 ( variable_3 -> variable_43 , variable_32 ) ; variable_96 = variable_3 -> variable_97 ; variable_98 = variable_3 -> variable_99 ; variable_100 = variable_3 -> variable_101 ; variable_102 = variable_3 -> variable_103 ; variable_104 = variable_3 -> variable_77 ; variable_105 = variable_3 -> variable_106 ; variable_82 = func_63 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; static func_64 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_3 , variable_4 * variable_5 ) variable_86 = variable_3 -> variable_87 ; if ( variable_81 -> variable_85 != NULL ) variable_3 -> variable_87 = func_65 ( variable_81 -> variable_85 ) ; if ( variable_81 -> variable_107 ) func_66 ( ( " before calling handle -> dissector . new for %s " , variable_81 -> variable_64 ) ) ; variable_82 = ( * variable_81 -> variable_108 . new ) variable_1 , variable_3 , variable_5 func_67 ( ( " after calling handle -> dissector . new for %s " , variable_81 -> variable_64 ) ) ; func_68 ( ( " before calling handle -> dissector . old for %s " , variable_81 -> variable_64 ) ) ; ( * variable_81 -> variable_108 . variable_109 ) ( variable_1 , variable_3 , variable_5 ) ; func_69 ( ( " after calling handle -> dissector . old for %s " , variable_81 -> variable_64 ) ) ; variable_82 = func_70 ( variable_1 ) ; if ( variable_82 == 0 ) variable_3 -> variable_87 = variable_86 ; return variable_82 ; func_71 ( variable_3 -> variable_43 , variable_95 ) ; variable_3 -> variable_97 = variable_96 ; variable_3 -> variable_99 = variable_98 ; variable_3 -> variable_101 = variable_100 ; variable_3 -> variable_103 = variable_102 ; variable_3 -> variable_77 = variable_104 ; variable_3 -> variable_106 = variable_105 ; variable_3 -> variable_87 = variable_86 ; variable_3 -> variable_89 = variable_88 ; variable_82 = func_72 ( variable_1 ) ; func_73 ( variable_3 -> variable_43 , variable_95 ) ; variable_3 -> variable_97 = variable_96 ; variable_3 -> variable_99 = variable_98 ; variable_3 -> variable_101 = variable_100 ; variable_3 -> variable_103 = variable_102 ; variable_3 -> variable_77 = variable_104 ; variable_3 -> variable_106 = variable_105 ; variable_3 -> variable_110 = 0 ; return variable_82 ; variable_82 = func_74 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; static func_75 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_3 , variable_4 * variable_5 ) variable_86 = variable_3 -> variable_87 ; if ( variable_81 -> variable_85 != NULL ) variable_3 -> variable_87 = func_76 ( variable_81 -> variable_85 ) ; if ( variable_81 -> variable_107 ) func_77 ( ( " before calling handle -> dissector . new for %s " , variable_81 -> variable_64 ) ) ; variable_82 = ( * variable_81 -> variable_108 . new ) variable_1 , variable_3 , variable_5 func_78 ( ( " after calling handle -> dissector . new for %s " , variable_81 -> variable_64 ) ) ; func_79 ( ( " before calling handle -> dissector . old for %s " , variable_81 -> variable_64 ) ) ; ( * variable_81 -> variable_108 . variable_109 ) ( variable_1 , variable_3 , variable_5 ) ; func_80 ( ( " after calling handle -> dissector . old for %s " , variable_81 -> variable_64 ) ) ; variable_82 = func_81 ( variable_1 ) ; if ( variable_82 == 0 ) variable_3 -> variable_87 = variable_86 ; return variable_82 ; if ( variable_82 == 0 ) if ( ( variable_3 -> variable_90 != NULL ) && ( variable_84 ) ) func_82 ( variable_3 -> variable_90 , variable_91 ) ; variable_3 -> variable_87 = variable_86 ; variable_3 -> variable_89 = variable_88 ; return variable_82 ; return variable_82 ; if ( variable_82 == 0 ) func_83 ( variable_111 , variable_1 , variable_3 , variable_5 , variable_38 ) ; static func_84 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_83 , variable_4 * variable_5 , gboolean variable_84 ) variable_2 * variable_3 = variable_83 ; if ( variable_81 -> variable_85 != NULL && ! func_85 ( variable_81 -> variable_85 ) ) variable_86 = variable_3 -> variable_87 ; variable_88 = variable_3 -> variable_89 ; if ( variable_3 -> variable_90 != NULL ) variable_91 = ( variable_92 ) variable_3 -> variable_90 -> variable_9 ; variable_3 -> variable_88 = variable_88 ; variable_3 -> variable_89 = variable_88 - ( variable_88 > 0 ) ; if ( variable_81 -> variable_85 != NULL ) variable_3 -> variable_87 = func_86 ( variable_81 -> variable_85 ) ; if ( ( variable_3 -> variable_90 ) && ( variable_84 ) ) if ( variable_3 -> variable_90 -> variable_9 > 0 ) func_87 ( variable_3 -> variable_90 , " : " ) ; func_88 ( variable_3 -> variable_90 , func_89 ( func_90 ( variable_81 -> variable_85 ) ) ) ; if ( variable_3 -> variable_93 . variable_94 ) variable_82 = func_91 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; variable_82 = func_92 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; if ( variable_82 == 0 ) if ( ( variable_3 -> variable_90 != NULL ) && ( variable_84 ) ) func_93 ( variable_3 -> variable_90 , variable_91 ) ; variable_3 -> variable_87 = variable_86 ; variable_3 -> variable_89 = variable_88 ; return variable_82 ; return func_94 ( variable_1 ) ; return variable_82 ; func_95 ( variable_112 , variable_76 , variable_3 , variable_5 ) ;  func_96 ( dissector_handle_t variable_81 , variable_0 variable_2 * variable_3 , variable_4 * variable_5 ) variable_82 = func_97 ( variable_81 , variable_1 , variable_3 , variable_5 ) ; if ( variable_82 == 0 ) func_98 ( variable_111 , variable_1 , variable_3 , variable_5 , variable_38 ) ; return func_99 ( variable_1 ) ; return variable_82 ;

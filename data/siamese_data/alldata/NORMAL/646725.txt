 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; WSADATA variable_2 ; int variable_3 ; struct sockaddr_in variable_4 ; size_t variable_5 = strlen ( variable_0 ) ; if ( func_1 ( func_2 ( 2 , 2 ) , & variable_2 ) != variable_6 ) variable_7 = func_3 ( variable_8 , variable_9 , variable_10 ) ; if ( variable_7 == variable_11 ) memset ( & variable_4 , 0 , sizeof ( variable_4 ) ) ; variable_4 . variable_12 = variable_8 ; variable_4 . variable_13 . variable_14 = variable_15 ; variable_4 . variable_16 = func_4 ( variable_17 ) ; if ( bind ( variable_7 , ( struct sockaddr * ) & variable_4 , sizeof ( variable_4 ) ) == variable_18 ) if ( func_5 ( variable_7 , variable_19 ) == variable_18 ) variable_20 = func_6 ( variable_7 , NULL , NULL ) ; if ( variable_20 == variable_18 ) variable_3 = recv ( variable_20 , ( char * ) ( variable_0 + variable_5 ) , sizeof ( char ) * ( 100 - variable_5 - 1 ) , 0 ) ; if ( variable_3 == variable_18 || variable_3 == 0 ) variable_0 [ variable_5 + variable_3 / sizeof ( char ) ] = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \r ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; variable_21 = strchr ( variable_0 , ' \n ' ) ; if ( variable_21 ) * variable_21 = ' \0 ' ; while ( 0 ) if ( variable_7 != variable_11 ) func_7 ( variable_7 ) ; if ( variable_20 != variable_11 ) func_8 ( variable_20 ) ; func_9 ( variable_0 ) ; void func_10 ( char * variable_0 )
 int func_0 ( struct variable_1 const struct variable_2 bool ( * variable_3 ) ( void * variable_4 , void void * variable_5 ) struct variable_6 * variable_7 , * variable_8 ; struct variable_9 * variable_10 , * variable_11 ; struct variable_12 * variable_13 ; struct variable_14 * variable_15 , * variable_16 ; struct variable_14 * variable_17 , * variable_18 , * * variable_19 ; int variable_20 , variable_21 , variable_22 , variable_23 , variable_24 ; if ( ! variable_25 -> variable_26 ) variable_13 = func_1 ( sizeof ( struct variable_12 ) , variable_27 ) ; if ( ! variable_13 ) variable_17 = variable_18 = NULL ; variable_19 = & variable_17 ; variable_15 = variable_25 -> variable_26 ; if ( func_2 ( variable_15 ) ) variable_7 = func_3 ( variable_15 ) ; variable_20 = func_4 ( variable_7 -> variable_28 , variable_29 ) ; variable_20 >> = variable_30 ; variable_8 = kmalloc ( sizeof ( struct variable_6 ) + variable_20 * sizeof ( unsigned long ) , variable_27 ) ; if ( ! variable_8 ) func_5 ( " dup shortcut % p -> % p \n " , variable_7 , variable_8 ) ; memcpy ( variable_8 , variable_7 , ( sizeof ( struct variable_6 ) + variable_20 * sizeof ( unsigned long ) ) ) ; variable_8 -> variable_31 = variable_18 ; variable_8 -> variable_32 = variable_7 -> variable_32 ; * variable_19 = variable_18 = func_6 ( variable_8 ) ; variable_19 = & variable_8 -> variable_33 ; variable_15 = variable_7 -> variable_33 ; variable_10 = func_7 ( variable_15 ) ; variable_11 = func_8 ( sizeof ( struct variable_9 ) , variable_27 ) ; if ( ! variable_11 ) func_9 ( " dup node % p -> % p \n " , variable_10 , variable_11 ) ; variable_11 -> variable_31 = variable_18 ; variable_11 -> variable_32 = variable_10 -> variable_32 ; * variable_19 = variable_18 = func_10 ( variable_11 ) ; variable_21 = 0 ; for ( ; variable_21 < variable_34 ; variable_21 ++ ) variable_16 = variable_10 -> variable_35 [ variable_21 ] ; if ( ! variable_16 ) if ( func_11 ( variable_16 ) ) if ( func_12 ( func_13 ( variable_16 ) , variable_5 ) ) variable_11 -> variable_35 [ variable_21 ] = variable_16 ; variable_19 = & variable_11 -> variable_35 [ variable_21 ] ; variable_15 = variable_16 ; func_14 ( " -- compress node % p -- \n " , variable_11 ) ; variable_11 -> variable_36 = 0 ; variable_22 = 0 ; for ( variable_21 = 0 ; variable_21 < variable_34 ; variable_21 ++ ) variable_16 = variable_11 -> variable_35 [ variable_21 ] ; if ( ! variable_16 ) variable_22 ++ ; if ( func_15 ( variable_16 ) ) variable_11 -> variable_36 ++ ; func_16 ( " free = %d , leaves = % lu \n " , variable_22 , variable_11 -> variable_36 ) ; variable_23 = 0 ; for ( variable_21 = 0 ; variable_21 < variable_34 ; variable_21 ++ ) struct variable_6 * variable_37 ; struct variable_9 * variable_38 ; variable_16 = variable_11 -> variable_35 [ variable_21 ] ; if ( ! variable_16 || func_17 ( variable_16 ) ) variable_37 = NULL ; if ( func_18 ( variable_16 ) ) variable_37 = func_19 ( variable_16 ) ; variable_16 = variable_37 -> variable_33 ; variable_38 = func_20 ( variable_16 ) ; variable_11 -> variable_36 += variable_38 -> variable_36 ; if ( variable_38 -> variable_36 <= variable_22 + 1 ) func_21 ( " [ %d ] fold node % lu / %d [ nx %d ] \n " , variable_21 , variable_38 -> variable_36 , variable_22 + 1 , variable_23 ) ; func_22 ( variable_37 ) ; variable_11 -> variable_35 [ variable_21 ] = NULL ; variable_22 ++ ; if ( variable_21 < variable_23 ) variable_23 = variable_21 ; for ( variable_24 = 0 ; variable_24 < variable_34 ; variable_24 ++ ) struct variable_14 * variable_39 = variable_38 -> variable_35 [ variable_24 ] ; if ( ! variable_39 ) func_23 ( func_24 ( variable_39 ) ) ; while ( variable_11 -> variable_35 [ variable_23 ] ) variable_23 ++ ; func_25 ( variable_23 >= variable_34 ) ; variable_11 -> variable_35 [ variable_23 ++ ] = variable_39 ; variable_22 -- ; kfree ( variable_38 ) ; func_26 ( " [ %d ] retain node % lu / %d [ nx %d ] \n " , variable_21 , variable_38 -> variable_36 , variable_22 + 1 , variable_23 ) ; func_27 ( " after : % lu \n " , variable_11 -> variable_36 ) ; variable_40 = variable_11 -> variable_36 ; if ( variable_22 == variable_34 - 1 ) for ( variable_21 = 0 ; variable_21 < variable_34 ; variable_21 ++ ) if ( variable_16 = variable_11 -> variable_35 [ variable_21 ] ) if ( func_28 ( variable_16 ) && func_29 ( variable_16 ) ) func_30 ( " excise node % p with 1  shortcut \n " , variable_11 ) ; variable_8 = func_31 ( variable_16 ) ; variable_18 = variable_11 -> variable_31 ; variable_21 = variable_11 -> variable_32 ; kfree ( variable_11 ) ; if ( ! variable_18 ) variable_8 -> variable_31 = NULL ; variable_8 -> variable_32 = 0 ; variable_17 = variable_16 ; if ( func_32 ( variable_18 ) ) struct variable_6 * variable_37 = func_33 ( variable_18 ) ; variable_18 = variable_8 -> variable_31 = variable_37 -> variable_31 ; variable_21 = variable_8 -> variable_32 = variable_37 -> variable_32 ; kfree ( variable_37 ) ; if ( ! variable_18 ) variable_8 -> variable_31 = NULL ; variable_8 -> variable_32 = 0 ; variable_17 = variable_16 ; variable_8 -> variable_31 = variable_18 ; variable_8 -> variable_32 = variable_21 ; variable_11 = func_34 ( variable_18 ) ; variable_11 -> variable_35 [ variable_21 ] = variable_16 ; variable_16 = variable_11 -> variable_31 ; if ( ! variable_16 ) if ( func_35 ( variable_16 ) ) variable_8 = func_36 ( variable_16 ) ; variable_18 = variable_8 -> variable_31 ; variable_21 = variable_8 -> variable_32 ; if ( variable_11 -> variable_36 <= variable_34 ) struct variable_9 * variable_41 ; variable_11 -> variable_31 = variable_18 ; variable_11 -> variable_32 = variable_21 ; kfree ( variable_8 ) ; if ( ! variable_18 ) variable_17 = func_37 ( variable_11 ) ; variable_41 = func_38 ( variable_18 ) ; variable_41 -> variable_35 [ variable_21 ] = func_39 ( variable_11 ) ; variable_18 = variable_16 ; variable_11 = func_40 ( variable_18 ) ; variable_16 = variable_10 -> variable_31 ; if ( func_41 ( variable_16 ) ) variable_7 = func_42 ( variable_16 ) ; variable_21 = variable_7 -> variable_32 ; variable_15 = variable_7 -> variable_31 ; if ( ! variable_15 ) variable_21 = variable_10 -> variable_32 ; variable_15 = variable_16 ; func_43 ( ! variable_15 ) ; variable_10 = func_44 ( variable_15 ) ; variable_21 ++ ; variable_13 -> variable_42 [ 0 ] . variable_43 = variable_17 ; func_45 ( variable_13 ) ; variable_13 -> variable_25 -> variable_40 = variable_40 ;

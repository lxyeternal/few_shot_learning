 void func_0 ( ) char * variable_0 ; char variable_1 [ 100 ] = " " ; variable_0 = variable_1 ; if ( variable_2 == 5 ) size_t variable_3 = strlen ( variable_0 ) ; FILE * variable_4 ; if ( 100 - variable_3 > 1 ) variable_4 = fopen ( variable_5 , " r " ) ; if ( variable_4 != NULL ) if ( fgets ( variable_0 + variable_3 , ( int ) ( 100 - variable_3 ) , variable_4 ) == NULL ) variable_0 [ variable_3 ] = ' \0 ' ; HMODULE variable_6 ; variable_6 = func_1 ( variable_0 ) ; if ( variable_6 != NULL ) FreeLibrary ( variable_6 ) ;
 Buffer func_0 ( RelFileNode variable_0 , ForkNumber variable_1 , BlockNumber variable_2 , ReadBufferMode variable_3 , BufferAccessStrategy variable_4 ) bool variable_5 ; SMgrRelation variable_6 = func_1 ( variable_0 , - 1 ) ; return func_2 ( variable_6 , ' p ' , variable_1 , variable_2 , variable_3 , variable_4 , & variable_5 ) ; static Buffer func_3 ( SMgrRelation variable_6 , char variable_7 , ForkNumber variable_1 , BlockNumber variable_2 , ReadBufferMode variable_3 , BufferAccessStrategy variable_4 , bool * variable_5 ) volatile variable_8 * variable_9 ; Block variable_10 ; bool variable_11 ; bool variable_12 ; bool variable_13 = ( variable_6 -> variable_14 . variable_15 != - 1 ) ; variable_12 = ( variable_2 == ( ( variable_16 ) 0 variable_17 ) ) ; if ( variable_12 ) variable_2 = func_4 ( variable_6 , variable_1 ) ; if ( variable_13 ) variable_9 = ( func_5 ( variable_6 , variable_1 , variable_2 , & variable_11 ) ) ; variable_9 = func_6 ( variable_6 , variable_7 , variable_1 , variable_2 , variable_4 , & variable_11 ) ; static volatile variable_8 * func_7 ( SMgrRelation variable_6 , char variable_7 , ForkNumber variable_1 , BlockNumber variable_2 , BufferAccessStrategy variable_4 , bool * variable_18 ) BufferTag variable_19 ; uint32 variable_20 ; BufFlags variable_21 ; int variable_22 ; volatile variable_8 * variable_23 ; ( variable_19 . variable_0 = variable_6 -> variable_14 . variable_24 , variable_19 . variable_1 = variable_1 ) , variable_19 . variable_2 = variable_2 ; variable_20 = func_8 ( & variable_19 ) ; variable_22 = func_9 ( & variable_19 , variable_20 ) ; if ( variable_22 >= 0 ) variable_23 = ( & variable_25 [ variable_22 ] ) ; return variable_23 ; variable_23 = func_10 ( variable_4 , & variable_26 ) ; variable_21 = variable_23 -> variable_27 ; if ( variable_21 & 1 << 0 ) if ( func_11 ( variable_23 -> variable_28 , variable_29 ) ) if ( variable_4 != ( ( void * ) 0 ) && func_12 ( ( ( variable_30 ) ( ( variable_31 ) ( variable_32 + ( ( variable_33 ) ( variable_23 -> variable_22 ) ) * 8192 ) ) ) -> variable_34 ) && func_13 ( variable_4 , variable_23 ) ) variable_22 = func_14 ( & variable_19 , variable_20 , variable_23 -> variable_22 ) ; if ( variable_22 >= 0 ) variable_23 = ( & variable_25 [ variable_22 ] ) ; return variable_23 ; variable_21 = variable_23 -> variable_27 ; if ( variable_23 -> variable_35 == 1 && ! ( variable_21 & 1 << 0 ) ) * ( ( volatile slock_t * ) ( & variable_23 -> variable_36 ) ) = 0 ; variable_23 -> variable_37 = variable_19 ; variable_23 -> variable_27 &= ~ ( 1 << 1 | 1 << 0 | 1 << 5 | 1 << 7 | 1 << 4 | 1 << 8 ) ; if ( variable_7 == ' p ' ) variable_23 -> variable_27 |= 1 << 2 ; variable_23 -> variable_38 = 1 ; * ( ( volatile slock_t * ) ( & variable_23 -> variable_36 ) ) = 0 ; return variable_23 ; if ( variable_11 ) if ( ! variable_12 ) variable_10 = ( variable_13 ? variable_39 [ - ( variable_9 -> variable_22 + 2 ) ] : ( ( variable_31 ) ( variable_32 + ( ( variable_33 ) ( variable_9 -> variable_22 ) ) * 8192 ) ) ) ; if ( variable_13 ) variable_9 -> variable_27 &= ~ ( 1 << 1 ) ; variable_9 -> variable_27 &= ~ ( 1 << 1 ) ; * ( ( volatile slock_t * ) ( & variable_9 -> variable_36 ) ) = 0 ; while ( ! func_15 ( variable_9 , ( ( bool ) 1 ) ) ) static bool func_16 ( volatile variable_8 * variable_23 , bool variable_40 ) if ( ! ( ( variable_23 -> variable_27 ) & 1 << 3 ) ) * ( ( volatile slock_t * ) ( & variable_23 -> variable_36 ) ) = 0 ; if ( variable_40 ? ( variable_23 -> variable_27 ) & 1 << 1 : ! ( ( variable_23 -> variable_27 ) & 1 << 0 ) ) return ( bool ) 0 ; return ( bool ) 1 ; variable_10 = ( variable_13 ? variable_39 [ - ( variable_9 -> variable_22 + 2 ) ] : ( ( variable_31 ) ( variable_32 + ( ( variable_33 ) ( variable_9 -> variable_22 ) ) * 8192 ) ) ) ; if ( variable_12 ) if ( variable_3 == variable_41 ) if ( ! func_17 ( ( ( variable_30 ) variable_10 ) ) ) if ( variable_3 == variable_42 || variable_43 ) void * variable_44 = ( void * ) ( ( char * ) variable_10 ) ; int variable_45 = 0 ; Size variable_46 = 8192 ; if ( ( ( ( variable_47 ) variable_44 ) & sizeof ( long ) - 1 ) == 0 && ( variable_46 & sizeof ( long ) - 1 ) == 0 && variable_45 == 0 && variable_46 <= 1024 && 1024 != 0 ) memset ( variable_44 , variable_45 , variable_46 ) ; while ( 0 )
